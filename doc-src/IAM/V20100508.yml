---
:add_client_id_to_open_id_connect_provider: |-
  Calls the AddClientIDToOpenIDConnectProvider API operation.
  @param [Hash] options
    * `:open_id_connect_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider to add the client ID to. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action.
    * `:client_id` - *required* - (String) The client ID (also known as audience) to add to the IAM OpenID Connect provider.
  @return [Core::Response]
:add_role_to_instance_profile: |-
  Calls the AddRoleToInstanceProfile API operation.
  @param [Hash] options
    * `:instance_profile_name` - *required* - (String) The name of the instance profile to update.
    * `:role_name` - *required* - (String) The name of the role to add.
  @return [Core::Response]
:add_user_to_group: |-
  Calls the AddUserToGroup API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group to update.
    * `:user_name` - *required* - (String) The name of the user to add.
  @return [Core::Response]
:change_password: |-
  Calls the ChangePassword API operation.
  @param [Hash] options
    * `:old_password` - *required* - (String) The IAM user's current password.
    * `:new_password` - *required* - (String) The new password. The new password must conform to the AWS account's password policy, if one exists.
  @return [Core::Response]
:create_access_key: |-
  Calls the CreateAccessKey API operation.
  @param [Hash] options
    * `:user_name` - (String) The user name that the new key will belong to.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:access_key` - (Hash)
      * `:user_name` - (String)
      * `:access_key_id` - (String)
      * `:status` - (String)
      * `:secret_access_key` - (String)
      * `:create_date` - (Time)
:create_account_alias: |-
  Calls the CreateAccountAlias API operation.
  @param [Hash] options
    * `:account_alias` - *required* - (String) The name of the account alias to create.
  @return [Core::Response]
:create_group: |-
  Calls the CreateGroup API operation.
  @param [Hash] options
    * `:path` - (String) The path to the group. For more information about paths, see IAM Identifiers in the Using IAM guide. This parameter is optional. If it is not included, it defaults to a slash (/).
    * `:group_name` - *required* - (String) The name of the group to create. Do not include the path in this value.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:group` - (Hash)
      * `:path` - (String)
      * `:group_name` - (String)
      * `:group_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
:create_instance_profile: |-
  Calls the CreateInstanceProfile API operation.
  @param [Hash] options
    * `:instance_profile_name` - *required* - (String) The name of the instance profile to create.
    * `:path` - (String) The path to the instance profile. For more information about paths, see IAM Identifiers in the Using IAM guide. This parameter is optional. If it is not included, it defaults to a slash (/).
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:instance_profile` - (Hash)
      * `:path` - (String)
      * `:instance_profile_name` - (String)
      * `:instance_profile_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:roles` - (Array<Hash>)
        * `:path` - (String)
        * `:role_name` - (String)
        * `:role_id` - (String)
        * `:arn` - (String)
        * `:create_date` - (Time)
        * `:assume_role_policy_document` - (String)
:create_login_profile: |-
  Calls the CreateLoginProfile API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user to create a password for.
    * `:password` - *required* - (String) The new password for the user.
    * `:password_reset_required` - (Boolean) Specifies whether the user is required to set a new password on next sign-in.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:login_profile` - (Hash)
      * `:user_name` - (String)
      * `:create_date` - (Time)
      * `:password_reset_required` - (Boolean)
:create_open_id_connect_provider: |-
  Calls the CreateOpenIDConnectProvider API operation.
  @param [Hash] options
    * `:url` - *required* - (String) The URL of the identity provider. The URL must begin with "https://" and should correspond to the iss claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a host name, like "https://server.example.org" or "https://example.com". You cannot register the same provider multiple times in a single AWS account. If you try to submit a URL that has already been used for an OpenID Connect provider in the AWS account, you will get an error.
    * `:client_id_list` - (Array&lt;<String>) A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.) You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider. There is no defined format for a client ID. The CreateOpenIDConnectProviderRequest action accepts client IDs up to 255 characters long.
    * `:thumbprint_list` - *required* - (Array&lt;<String>) A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s). Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates. The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string. You must provide at least one thumbprint when creating an IAM OIDC provider. For example, if the OIDC provider is server.example.com and the provider stores its keys at "https://keys.server.example.com/openid-connect", the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by https://keys.server.example.com.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:open_id_connect_provider_arn` - (String)
:create_role: |-
  Calls the CreateRole API operation.
  @param [Hash] options
    * `:path` - (String) The path to the role. For more information about paths, see IAM Identifiers in the Using IAM guide. This parameter is optional. If it is not included, it defaults to a slash (/).
    * `:role_name` - *required* - (String) The name of the role to create.
    * `:assume_role_policy_document` - *required* - (String) The policy that grants an entity permission to assume the role.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:role` - (Hash)
      * `:path` - (String)
      * `:role_name` - (String)
      * `:role_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:assume_role_policy_document` - (String)
:create_saml_provider: |-
  Calls the CreateSAMLProvider API operation.
  @param [Hash] options
    * `:saml_metadata_document` - *required* - (String) An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP. For more information, see Creating Temporary Security Credentials for SAML Federation in the Using Temporary Security Credentials guide.
    * `:name` - *required* - (String) The name of the provider to create.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:saml_provider_arn` - (String)
:create_user: |-
  Calls the CreateUser API operation.
  @param [Hash] options
    * `:path` - (String) The path for the user name. For more information about paths, see IAM Identifiers in the Using IAM guide. This parameter is optional. If it is not included, it defaults to a slash (/).
    * `:user_name` - *required* - (String) The name of the user to create.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:user` - (Hash)
      * `:path` - (String)
      * `:user_name` - (String)
      * `:user_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:password_last_used` - (Time)
:create_virtual_mfa_device: |-
  Calls the CreateVirtualMFADevice API operation.
  @param [Hash] options
    * `:path` - (String) The path for the virtual MFA device. For more information about paths, see IAM Identifiers in the Using IAM guide. This parameter is optional. If it is not included, it defaults to a slash (/).
    * `:virtual_mfa_device_name` - *required* - (String) The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:virtual_mfa_device` - (Hash)
      * `:serial_number` - (String)
      * `:base_32_string_seed` - (String)
      * `:qr_code_png` - (String)
      * `:user` - (Hash)
        * `:path` - (String)
        * `:user_name` - (String)
        * `:user_id` - (String)
        * `:arn` - (String)
        * `:create_date` - (Time)
        * `:password_last_used` - (Time)
      * `:enable_date` - (Time)
:deactivate_mfa_device: |-
  Calls the DeactivateMFADevice API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user whose MFA device you want to deactivate.
    * `:serial_number` - *required* - (String) The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.
  @return [Core::Response]
:delete_access_key: |-
  Calls the DeleteAccessKey API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user whose key you want to delete.
    * `:access_key_id` - *required* - (String) The access key ID for the access key ID and secret access key you want to delete.
  @return [Core::Response]
:delete_account_alias: |-
  Calls the DeleteAccountAlias API operation.
  @param [Hash] options
    * `:account_alias` - *required* - (String) The name of the account alias to delete.
  @return [Core::Response]
:delete_account_password_policy: |-
  Calls the DeleteAccountPasswordPolicy API operation.
  @param [Hash] options
  @return [Core::Response]
:delete_group: |-
  Calls the DeleteGroup API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group to delete.
  @return [Core::Response]
:delete_group_policy: |-
  Calls the DeleteGroupPolicy API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group the policy is associated with.
    * `:policy_name` - *required* - (String) The name of the policy document to delete.
  @return [Core::Response]
:delete_instance_profile: |-
  Calls the DeleteInstanceProfile API operation.
  @param [Hash] options
    * `:instance_profile_name` - *required* - (String) The name of the instance profile to delete.
  @return [Core::Response]
:delete_login_profile: |-
  Calls the DeleteLoginProfile API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user whose password you want to delete.
  @return [Core::Response]
:delete_open_id_connect_provider: |-
  Calls the DeleteOpenIDConnectProvider API operation.
  @param [Hash] options
    * `:open_id_connect_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the IAM OpenID Connect provider to delete. You can get a list of OpenID Connect provider ARNs by using the ListOpenIDConnectProviders action.
  @return [Core::Response]
:delete_role: |-
  Calls the DeleteRole API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role to delete.
  @return [Core::Response]
:delete_role_policy: |-
  Calls the DeleteRolePolicy API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role the associated with the policy.
    * `:policy_name` - *required* - (String) The name of the policy document to delete.
  @return [Core::Response]
:delete_saml_provider: |-
  Calls the DeleteSAMLProvider API operation.
  @param [Hash] options
    * `:saml_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the SAML provider to delete.
  @return [Core::Response]
:delete_server_certificate: |-
  Calls the DeleteServerCertificate API operation.
  @param [Hash] options
    * `:server_certificate_name` - *required* - (String) The name of the server certificate you want to delete.
  @return [Core::Response]
:delete_signing_certificate: |-
  Calls the DeleteSigningCertificate API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user the signing certificate belongs to.
    * `:certificate_id` - *required* - (String) The ID of the signing certificate to delete.
  @return [Core::Response]
:delete_user: |-
  Calls the DeleteUser API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user to delete.
  @return [Core::Response]
:delete_user_policy: |-
  Calls the DeleteUserPolicy API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user the policy is associated with.
    * `:policy_name` - *required* - (String) The name of the policy document to delete.
  @return [Core::Response]
:delete_virtual_mfa_device: |-
  Calls the DeleteVirtualMFADevice API operation.
  @param [Hash] options
    * `:serial_number` - *required* - (String) The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.
  @return [Core::Response]
:enable_mfa_device: |-
  Calls the EnableMFADevice API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user for whom you want to enable the MFA device.
    * `:serial_number` - *required* - (String) The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.
    * `:authentication_code_1` - *required* - (String) An authentication code emitted by the device.
    * `:authentication_code_2` - *required* - (String) A subsequent authentication code emitted by the device.
  @return [Core::Response]
:generate_credential_report: |-
  Calls the GenerateCredentialReport API operation.
  @param [Hash] options
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:state` - (String)
    * `:description` - (String)
:get_account_password_policy: |-
  Calls the GetAccountPasswordPolicy API operation.
  @param [Hash] options
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:password_policy` - (Hash)
      * `:minimum_password_length` - (Integer)
      * `:require_symbols` - (Boolean)
      * `:require_numbers` - (Boolean)
      * `:require_uppercase_characters` - (Boolean)
      * `:require_lowercase_characters` - (Boolean)
      * `:allow_users_to_change_password` - (Boolean)
      * `:expire_passwords` - (Boolean)
      * `:max_password_age` - (Integer)
      * `:password_reuse_prevention` - (Integer)
      * `:hard_expiry` - (Boolean)
:get_account_summary: |-
  Calls the GetAccountSummary API operation.
  @param [Hash] options
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:summary_map` - (Hash<String,Integer>)
:get_credential_report: |-
  Calls the GetCredentialReport API operation.
  @param [Hash] options
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:content` - (String)
    * `:report_format` - (String)
    * `:generated_time` - (Time)
:get_group: |-
  Calls the GetGroup API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of groups you want in the response. If there are additional groups beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:group` - (Hash)
      * `:path` - (String)
      * `:group_name` - (String)
      * `:group_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
    * `:users` - (Array<Hash>)
      * `:path` - (String)
      * `:user_name` - (String)
      * `:user_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:password_last_used` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:get_group_policy: |-
  Calls the GetGroupPolicy API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group the policy is associated with.
    * `:policy_name` - *required* - (String) The name of the policy document to get.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:group_name` - (String)
    * `:policy_name` - (String)
    * `:policy_document` - (String)
:get_instance_profile: |-
  Calls the GetInstanceProfile API operation.
  @param [Hash] options
    * `:instance_profile_name` - *required* - (String) The name of the instance profile to get information about.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:instance_profile` - (Hash)
      * `:path` - (String)
      * `:instance_profile_name` - (String)
      * `:instance_profile_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:roles` - (Array<Hash>)
        * `:path` - (String)
        * `:role_name` - (String)
        * `:role_id` - (String)
        * `:arn` - (String)
        * `:create_date` - (Time)
        * `:assume_role_policy_document` - (String)
:get_login_profile: |-
  Calls the GetLoginProfile API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user whose login profile you want to retrieve.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:login_profile` - (Hash)
      * `:user_name` - (String)
      * `:create_date` - (Time)
      * `:password_reset_required` - (Boolean)
:get_open_id_connect_provider: |-
  Calls the GetOpenIDConnectProvider API operation.
  @param [Hash] options
    * `:open_id_connect_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider to get information for. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:url` - (String)
    * `:client_id_list` - (Array<String>)
    * `:thumbprint_list` - (Array<String>)
    * `:create_date` - (Time)
:get_role: |-
  Calls the GetRole API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role to get information about.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:role` - (Hash)
      * `:path` - (String)
      * `:role_name` - (String)
      * `:role_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:assume_role_policy_document` - (String)
:get_role_policy: |-
  Calls the GetRolePolicy API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role associated with the policy.
    * `:policy_name` - *required* - (String) The name of the policy document to get.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:role_name` - (String)
    * `:policy_name` - (String)
    * `:policy_document` - (String)
:get_saml_provider: |-
  Calls the GetSAMLProvider API operation.
  @param [Hash] options
    * `:saml_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the SAML provider to get information about.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:saml_metadata_document` - (String)
    * `:create_date` - (Time)
    * `:valid_until` - (Time)
:get_server_certificate: |-
  Calls the GetServerCertificate API operation.
  @param [Hash] options
    * `:server_certificate_name` - *required* - (String) The name of the server certificate you want to retrieve information about.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:server_certificate` - (Hash)
      * `:server_certificate_metadata` - (Hash)
        * `:path` - (String)
        * `:server_certificate_name` - (String)
        * `:server_certificate_id` - (String)
        * `:arn` - (String)
        * `:upload_date` - (Time)
        * `:expiration` - (Time)
      * `:certificate_body` - (String)
      * `:certificate_chain` - (String)
:get_user: |-
  Calls the GetUser API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user to get information about. This parameter is optional. If it is not included, it defaults to the user making the request.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:user` - (Hash)
      * `:path` - (String)
      * `:user_name` - (String)
      * `:user_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:password_last_used` - (Time)
:get_user_policy: |-
  Calls the GetUserPolicy API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user who the policy is associated with.
    * `:policy_name` - *required* - (String) The name of the policy document to get.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:user_name` - (String)
    * `:policy_name` - (String)
    * `:policy_document` - (String)
:list_access_keys: |-
  Calls the ListAccessKeys API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user.
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of keys you want in the response. If there are additional keys beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:access_key_metadata` - (Array<Hash>)
      * `:user_name` - (String)
      * `:access_key_id` - (String)
      * `:status` - (String)
      * `:create_date` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_account_aliases: |-
  Calls the ListAccountAliases API operation.
  @param [Hash] options
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of account aliases you want in the response. If there are additional account aliases beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:account_aliases` - (Array<String>)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_group_policies: |-
  Calls the ListGroupPolicies API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group to list policies for.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of policy names you want in the response. If there are additional policy names beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:policy_names` - (Array<String>)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_groups: |-
  Calls the ListGroups API operation.
  @param [Hash] options
    * `:path_prefix` - (String) The path prefix for filtering the results. For example, the prefix /division_abc/subdivision_xyz/ gets all groups whose path starts with /division_abc/subdivision_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of groups you want in the response. If there are additional groups beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:groups` - (Array<Hash>)
      * `:path` - (String)
      * `:group_name` - (String)
      * `:group_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_groups_for_user: |-
  Calls the ListGroupsForUser API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user to list groups for.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of groups you want in the response. If there are additional groups beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:groups` - (Array<Hash>)
      * `:path` - (String)
      * `:group_name` - (String)
      * `:group_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_instance_profiles: |-
  Calls the ListInstanceProfiles API operation.
  @param [Hash] options
    * `:path_prefix` - (String) The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all instance profiles whose path starts with /application_abc/component_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles.
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of instance profiles you want in the response. If there are additional instance profiles beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:instance_profiles` - (Array<Hash>)
      * `:path` - (String)
      * `:instance_profile_name` - (String)
      * `:instance_profile_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:roles` - (Array<Hash>)
        * `:path` - (String)
        * `:role_name` - (String)
        * `:role_id` - (String)
        * `:arn` - (String)
        * `:create_date` - (Time)
        * `:assume_role_policy_document` - (String)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_instance_profiles_for_role: |-
  Calls the ListInstanceProfilesForRole API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role to list instance profiles for.
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of instance profiles you want in the response. If there are additional instance profiles beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:instance_profiles` - (Array<Hash>)
      * `:path` - (String)
      * `:instance_profile_name` - (String)
      * `:instance_profile_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:roles` - (Array<Hash>)
        * `:path` - (String)
        * `:role_name` - (String)
        * `:role_id` - (String)
        * `:arn` - (String)
        * `:create_date` - (Time)
        * `:assume_role_policy_document` - (String)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_mfa_devices: |-
  Calls the ListMFADevices API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user whose MFA devices you want to list.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of MFA devices you want in the response. If there are additional MFA devices beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:mfa_devices` - (Array<Hash>)
      * `:user_name` - (String)
      * `:serial_number` - (String)
      * `:enable_date` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_open_id_connect_providers: |-
  Calls the ListOpenIDConnectProviders API operation.
  @param [Hash] options
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:open_id_connect_provider_list` - (Array<Hash>)
      * `:arn` - (String)
:list_role_policies: |-
  Calls the ListRolePolicies API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role to list policies for.
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of role policies you want in the response. If there are additional role policies beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:policy_names` - (Array<String>)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_roles: |-
  Calls the ListRoles API operation.
  @param [Hash] options
    * `:path_prefix` - (String) The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all roles whose path starts with /application_abc/component_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles.
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of roles you want in the response. If there are additional roles beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:roles` - (Array<Hash>)
      * `:path` - (String)
      * `:role_name` - (String)
      * `:role_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:assume_role_policy_document` - (String)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_saml_providers: |-
  Calls the ListSAMLProviders API operation.
  @param [Hash] options
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:saml_provider_list` - (Array<Hash>)
      * `:arn` - (String)
      * `:valid_until` - (Time)
      * `:create_date` - (Time)
:list_server_certificates: |-
  Calls the ListServerCertificates API operation.
  @param [Hash] options
    * `:path_prefix` - (String) The path prefix for filtering the results. For example: /company/servercerts would get all server certificates for which the path starts with /company/servercerts. This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of server certificates you want in the response. If there are additional server certificates beyond the maximum you specify, the IsTruncated response element will be set to  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:server_certificate_metadata_list` - (Array<Hash>)
      * `:path` - (String)
      * `:server_certificate_name` - (String)
      * `:server_certificate_id` - (String)
      * `:arn` - (String)
      * `:upload_date` - (Time)
      * `:expiration` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_signing_certificates: |-
  Calls the ListSigningCertificates API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of certificate IDs you want in the response. If there are additional certificate IDs beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:certificates` - (Array<Hash>)
      * `:user_name` - (String)
      * `:certificate_id` - (String)
      * `:certificate_body` - (String)
      * `:status` - (String)
      * `:upload_date` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_user_policies: |-
  Calls the ListUserPolicies API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user to list policies for.
    * `:marker` - (String) Use this only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this only when paginating results to indicate the maximum number of policy names you want in the response. If there are additional policy names beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:policy_names` - (Array<String>)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_users: |-
  Calls the ListUsers API operation.
  @param [Hash] options
    * `:path_prefix` - (String) The path prefix for filtering the results. For example: /division_abc/subdivision_xyz/, which would get all user names whose path starts with /division_abc/subdivision_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names.
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of user names you want in the response. If there are additional user names beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:users` - (Array<Hash>)
      * `:path` - (String)
      * `:user_name` - (String)
      * `:user_id` - (String)
      * `:arn` - (String)
      * `:create_date` - (Time)
      * `:password_last_used` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:list_virtual_mfa_devices: |-
  Calls the ListVirtualMFADevices API operation.
  @param [Hash] options
    * `:assignment_status` - (String) The status (unassigned or assigned) of the devices to list. If you do not specify an AssignmentStatus, the action defaults to Any which lists both assigned and unassigned virtual MFA devices.  Valid values include:
      * `Assigned`
      * `Unassigned`
      * `Any`
    * `:marker` - (String) Use this parameter only when paginating results, and only in a subsequent request after you've received a response where the results are truncated. Set it to the value of the Marker element in the response you just received.
    * `:max_items` - (Integer) Use this parameter only when paginating results to indicate the maximum number of MFA devices you want in the response. If there are additional MFA devices beyond the maximum you specify, the IsTruncated response element is  `true` . This parameter is optional. If you do not include it, it defaults to 100.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:virtual_mfa_devices` - (Array<Hash>)
      * `:serial_number` - (String)
      * `:base_32_string_seed` - (String)
      * `:qr_code_png` - (String)
      * `:user` - (Hash)
        * `:path` - (String)
        * `:user_name` - (String)
        * `:user_id` - (String)
        * `:arn` - (String)
        * `:create_date` - (Time)
        * `:password_last_used` - (Time)
      * `:enable_date` - (Time)
    * `:is_truncated` - (Boolean)
    * `:marker` - (String)
:put_group_policy: |-
  Calls the PutGroupPolicy API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group to associate the policy with.
    * `:policy_name` - *required* - (String) The name of the policy document.
    * `:policy_document` - *required* - (String) The policy document.
  @return [Core::Response]
:put_role_policy: |-
  Calls the PutRolePolicy API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role to associate the policy with.
    * `:policy_name` - *required* - (String) The name of the policy document.
    * `:policy_document` - *required* - (String) The policy document.
  @return [Core::Response]
:put_user_policy: |-
  Calls the PutUserPolicy API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user to associate the policy with.
    * `:policy_name` - *required* - (String) The name of the policy document.
    * `:policy_document` - *required* - (String) The policy document.
  @return [Core::Response]
:remove_client_id_from_open_id_connect_provider: |-
  Calls the RemoveClientIDFromOpenIDConnectProvider API operation.
  @param [Hash] options
    * `:open_id_connect_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider to remove the client ID from. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action.
    * `:client_id` - *required* - (String) The client ID (also known as audience) to remove from the IAM OpenID Connect provider. For more information about client IDs, see CreateOpenIDConnectProvider.
  @return [Core::Response]
:remove_role_from_instance_profile: |-
  Calls the RemoveRoleFromInstanceProfile API operation.
  @param [Hash] options
    * `:instance_profile_name` - *required* - (String) The name of the instance profile to update.
    * `:role_name` - *required* - (String) The name of the role to remove.
  @return [Core::Response]
:remove_user_from_group: |-
  Calls the RemoveUserFromGroup API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) The name of the group to update.
    * `:user_name` - *required* - (String) The name of the user to remove.
  @return [Core::Response]
:resync_mfa_device: |-
  Calls the ResyncMFADevice API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user whose MFA device you want to resynchronize.
    * `:serial_number` - *required* - (String) Serial number that uniquely identifies the MFA device.
    * `:authentication_code_1` - *required* - (String) An authentication code emitted by the device.
    * `:authentication_code_2` - *required* - (String) A subsequent authentication code emitted by the device.
  @return [Core::Response]
:update_access_key: |-
  Calls the UpdateAccessKey API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user whose key you want to update.
    * `:access_key_id` - *required* - (String) The access key ID of the secret access key you want to update.
    * `:status` - *required* - (String) The status you want to assign to the secret access key. Active means the key can be used for API calls to AWS, while Inactive means the key cannot be used.  Valid values include:
      * `Active`
      * `Inactive`
  @return [Core::Response]
:update_account_password_policy: "Calls the UpdateAccountPasswordPolicy API operation.\n@param
  [Hash] options\n  * `:minimum_password_length` - (Integer) The minimum number of
  characters allowed in an IAM user password. Default value: 6\n  * `:require_symbols`
  - (Boolean) Specifies whether IAM user passwords must contain at least one of the
  following non-alphanumeric characters: ! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } |
  ' Default value:  `false` \n  * `:require_numbers` - (Boolean) Specifies whether
  IAM user passwords must contain at least one numeric character (0 to 9). Default
  value:  `false` \n  * `:require_uppercase_characters` - (Boolean) Specifies whether
  IAM user passwords must contain at least one uppercase character from the ISO basic
  Latin alphabet (A to Z). Default value:  `false` \n  * `:require_lowercase_characters`
  - (Boolean) Specifies whether IAM user passwords must contain at least one lowercase
  character from the ISO basic Latin alphabet (a to z). Default value:  `false` \n
  \ * `:allow_users_to_change_password` - (Boolean) Allows all IAM users in your account
  to use the AWS Management Console to change their own passwords. For more information,
  see Letting IAM Users Change Their Own Passwords in the Using IAM guide. Default
  value:  `false` \n  * `:max_password_age` - (Integer) The number of days that an
  IAM user password is valid. The default value of 0 means IAM user passwords never
  expire. Default value: 0\n  * `:password_reuse_prevention` - (Integer) Specifies
  the number of previous passwords that IAM users are prevented from reusing. The
  default value of 0 means IAM users are not prevented from reusing previous passwords.
  Default value: 0\n  * `:hard_expiry` - (Boolean) Prevents IAM users from setting
  a new password after their password has expired. Default value:  `false` \n@return
  [Core::Response]"
:update_assume_role_policy: |-
  Calls the UpdateAssumeRolePolicy API operation.
  @param [Hash] options
    * `:role_name` - *required* - (String) The name of the role to update.
    * `:policy_document` - *required* - (String) The policy that grants an entity permission to assume the role.
  @return [Core::Response]
:update_group: |-
  Calls the UpdateGroup API operation.
  @param [Hash] options
    * `:group_name` - *required* - (String) Name of the group to update. If you're changing the name of the group, this is the original name.
    * `:new_path` - (String) New path for the group. Only include this if changing the group's path.
    * `:new_group_name` - (String) New name for the group. Only include this if changing the group's name.
  @return [Core::Response]
:update_login_profile: |-
  Calls the UpdateLoginProfile API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) The name of the user whose password you want to update.
    * `:password` - (String) The new password for the specified user.
    * `:password_reset_required` - (Boolean) Require the specified user to set a new password on next sign-in.
  @return [Core::Response]
:update_open_id_connect_provider_thumbprint: |-
  Calls the UpdateOpenIDConnectProviderThumbprint API operation.
  @param [Hash] options
    * `:open_id_connect_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider to update the thumbprint for. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action.
    * `:thumbprint_list` - *required* - (Array&lt;<String>) A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see CreateOpenIDConnectProvider.
  @return [Core::Response]
:update_saml_provider: |-
  Calls the UpdateSAMLProvider API operation.
  @param [Hash] options
    * `:saml_metadata_document` - *required* - (String) An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
    * `:saml_provider_arn` - *required* - (String) The Amazon Resource Name (ARN) of the SAML provider to update.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:saml_provider_arn` - (String)
:update_server_certificate: |-
  Calls the UpdateServerCertificate API operation.
  @param [Hash] options
    * `:server_certificate_name` - *required* - (String) The name of the server certificate that you want to update.
    * `:new_path` - (String) The new path for the server certificate. Include this only if you are updating the server certificate's path.
    * `:new_server_certificate_name` - (String) The new name for the server certificate. Include this only if you are updating the server certificate's name.
  @return [Core::Response]
:update_signing_certificate: |-
  Calls the UpdateSigningCertificate API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user the signing certificate belongs to.
    * `:certificate_id` - *required* - (String) The ID of the signing certificate you want to update.
    * `:status` - *required* - (String) The status you want to assign to the certificate. Active means the certificate can be used for API calls to AWS, while Inactive means the certificate cannot be used.  Valid values include:
      * `Active`
      * `Inactive`
  @return [Core::Response]
:update_user: |-
  Calls the UpdateUser API operation.
  @param [Hash] options
    * `:user_name` - *required* - (String) Name of the user to update. If you're changing the name of the user, this is the original user name.
    * `:new_path` - (String) New path for the user. Include this parameter only if you're changing the user's path.
    * `:new_user_name` - (String) New name for the user. Include this parameter only if you're changing the user's name.
  @return [Core::Response]
:upload_server_certificate: |-
  Calls the UploadServerCertificate API operation.
  @param [Hash] options
    * `:path` - (String) The path for the server certificate. For more information about paths, see IAM Identifiers in the Using IAM guide. This parameter is optional. If it is not included, it defaults to a slash (/). If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the --path option. The path must begin with /cloudfront and must include a trailing slash (for example, /cloudfront/test/).
    * `:server_certificate_name` - *required* - (String) The name for the server certificate. Do not include the path in this value.
    * `:certificate_body` - *required* - (String) The contents of the public key certificate in PEM-encoded format.
    * `:private_key` - *required* - (String) The contents of the private key in PEM-encoded format.
    * `:certificate_chain` - (String) The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:server_certificate_metadata` - (Hash)
      * `:path` - (String)
      * `:server_certificate_name` - (String)
      * `:server_certificate_id` - (String)
      * `:arn` - (String)
      * `:upload_date` - (Time)
      * `:expiration` - (Time)
:upload_signing_certificate: |-
  Calls the UploadSigningCertificate API operation.
  @param [Hash] options
    * `:user_name` - (String) The name of the user the signing certificate is for.
    * `:certificate_body` - *required* - (String) The contents of the signing certificate.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:certificate` - (Hash)
      * `:user_name` - (String)
      * `:certificate_id` - (String)
      * `:certificate_body` - (String)
      * `:status` - (String)
      * `:upload_date` - (Time)
