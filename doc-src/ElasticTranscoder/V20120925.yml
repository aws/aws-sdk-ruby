---
:cancel_job: |-
  Calls the DELETE CancelJob API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the job that you want to cancel. To get a list of the jobs (including their jobId) that have a status of Submitted, use the ListJobsByStatus API action.
  @return [Core::Response]
:create_job: "Calls the POST CreateJob API operation.\n@param [Hash] options\n  *
  `:pipeline_id` - (String) The Id of the pipeline that you want Elastic Transcoder
  to use for transcoding. The pipeline determines several settings, including the
  Amazon S3 bucket from which Elastic Transcoder gets the files to transcode and the
  bucket into which Elastic Transcoder puts the transcoded files.\n  * `:input` -
  (Hash) A section of the request body that provides information about the file that
  is being transcoded.\n    * `:key` - (String) The name of the file to transcode.
  Elsewhere in the body of the JSON block is the the ID of the pipeline to use for
  processing the job. The InputBucket object in that pipeline tells Elastic Transcoder
  which Amazon S3 bucket to get the file from. If the file name includes a prefix,
  such as cooking/lasagna.mpg, include the prefix in the key. If the file isn't in
  the specified bucket, Elastic Transcoder returns an error.\n    * `:frame_rate`
  - (String) The frame rate of the input file. If you want Elastic Transcoder to automatically
  detect the frame rate of the input file, specify auto. If you want to specify the
  frame rate for the input file, enter one of the following values: 10, 15, 23.97,
  24, 25, 29.97, 30, 60 If you specify a value other than auto, Elastic Transcoder
  disables automatic detection of the frame rate.\n    * `:resolution` - (String)
  This value must be auto, which causes Elastic Transcoder to automatically detect
  the resolution of the input file.\n    * `:aspect_ratio` - (String) The aspect ratio
  of the input file. If you want Elastic Transcoder to automatically detect the aspect
  ratio of the input file, specify auto. If you want to specify the aspect ratio for
  the output file, enter one of the following values: 1:1, 4:3, 3:2, 16:9 If you specify
  a value other than auto, Elastic Transcoder disables automatic detection of the
  aspect ratio.\n    * `:interlaced` - (String) Whether the input file is interlaced.
  If you want Elastic Transcoder to automatically detect whether the input file is
  interlaced, specify auto. If you want to specify whether the input file is interlaced,
  enter one of the following values:  `true` ,  `false`  If you specify a value other
  than auto, Elastic Transcoder disables automatic detection of interlacing.\n    *
  `:container` - (String) The container type for the input file. If you want Elastic
  Transcoder to automatically detect the container type of the input file, specify
  auto. If you want to specify the container type for the input file, enter one of
  the following values: 3gp, aac, asf, avi, divx, flv, m4a, mkv, mov, mp3, mp4, mpeg,
  mpeg-ps, mpeg-ts, mxf, ogg, vob, wav, webm\n  * `:output` - (Hash) \n    * `:key`
  - (String) The name to assign to the transcoded file. Elastic Transcoder saves the
  file in the Amazon S3 bucket specified by the OutputBucket object in the pipeline
  that is specified by the pipeline ID. If a file with the specified name already
  exists in the output bucket, the job fails.\n    * `:thumbnail_pattern` - (String)
  Whether you want Elastic Transcoder to create thumbnails for your videos and, if
  so, how you want Elastic Transcoder to name the files. If you don't want Elastic
  Transcoder to create thumbnails, specify \"\". If you do want Elastic Transcoder
  to create thumbnails, specify the information that you want to include in the file
  name for each thumbnail. You can specify the following values in any sequence: `{count}`
  (Required): If you want to create thumbnails, you must include `{count}` in the
  ThumbnailPattern object. Wherever you specify `{count}`, Elastic Transcoder adds
  a five-digit sequence number (beginning with 00001) to thumbnail file names. The
  number indicates where a given thumbnail appears in the sequence of thumbnails for
  a transcoded file. If you specify a literal value and/or `{resolution}` but you
  omit `{count}`, Elastic Transcoder returns a validation error and does not create
  the job. Literal values (Optional): You can specify literal values anywhere in the
  ThumbnailPattern object. For example, you can include them as a file name prefix
  or as a delimiter between `{resolution}` and `{count}`. `{resolution}` (Optional):
  If you want Elastic Transcoder to include the resolution in the file name, include
  `{resolution}` in the ThumbnailPattern object. When creating thumbnails, Elastic
  Transcoder automatically saves the files in the format (.jpg or .png) that appears
  in the preset that you specified in the PresetID value of CreateJobOutput. Elastic
  Transcoder also appends the applicable file name extension.\n    * `:rotate` - (String)
  The number of degrees clockwise by which you want Elastic Transcoder to rotate the
  output relative to the input. Enter one of the following values: auto, 0, 90, 180,
  270. The value auto generally works only if the file that you're transcoding contains
  rotation metadata.\n    * `:preset_id` - (String) The Id of the preset to use for
  this job. The preset determines the audio, video, and thumbnail settings that Elastic
  Transcoder uses for transcoding.\n    * `:segment_duration` - (String) If you specify
  a preset in PresetId for which the value of Container is ts (MPEG-TS), SegmentDuration
  is the duration of each .ts file in seconds. The range of valid values is 1 to 60
  seconds.\n    * `:watermarks` - (Array&lt;Hash>) Information about the watermarks
  that you want Elastic Transcoder to add to the video during transcoding. You can
  specify up to four watermarks for each output. Settings for each watermark must
  be defined in the preset for the current output.\n    * `:member` - (Hash) \n      *
  `:preset_watermark_id` - (String) The ID of the watermark settings that Elastic
  Transcoder uses to add watermarks to the video during transcoding. The settings
  are in the preset specified by Preset for the current output. In that preset, the
  value of Watermarks Id tells Elastic Transcoder which settings to use.\n      *
  `:input_key` - (String) The name of the .png or .jpg file that you want to use for
  the watermark. To determine which Amazon S3 bucket contains the specified file,
  Elastic Transcoder checks the pipeline specified by Pipeline; the Input Bucket object
  in that pipeline identifies the bucket. If the file name includes a prefix, for
  example, logos/128x64.png, include the prefix in the key. If the file isn't in the
  specified bucket, Elastic Transcoder returns an error.\n    * `:album_art` - (Hash)
  Information about the album art that you want Elastic Transcoder to add to the file
  during transcoding. You can specify up to twenty album artworks for each output.
  Settings for each artwork must be defined in the job for the current output.\n      *
  `:merge_policy` - (String) A policy that determines how Elastic Transcoder will
  handle the existence of multiple album artwork files. Replace: The specified album
  art will replace any existing album art. Prepend: The specified album art will be
  placed in front of any existing album art. Append: The specified album art will
  be placed after any existing album art. Fallback: If the original input file contains
  artwork, Elastic Transcoder will use that artwork for the output. If the original
  input does not contain artwork, Elastic Transcoder will use the specified album
  art file.\n      * `:artwork` - (Array&lt;Hash>) The file to be used as album art.
  There can be multiple artworks associated with an audio file, to a maximum of 20.
  Valid formats are .jpg and .png\n      * `:member` - (Hash) \n        * `:input_key`
  - (String) The name of the file to be used as album art. To determine which Amazon
  S3 bucket contains the specified file, Elastic Transcoder checks the pipeline specified
  by PipelineId; the InputBucket object in that pipeline identifies the bucket. If
  the file name includes a prefix, for example, cooking/pie.jpg, include the prefix
  in the key. If the file isn't in the specified bucket, Elastic Transcoder returns
  an error.\n        * `:max_width` - (String) The maximum width of the output album
  art in pixels. If you specify auto, Elastic Transcoder uses 600 as the default value.
  If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.\n
  \       * `:max_height` - (String) The maximum height of the output album art in
  pixels. If you specify auto, Elastic Transcoder uses 600 as the default value. If
  you specify a numeric value, enter an even integer between 32 and 3072, inclusive.\n
  \       * `:sizing_policy` - (String) Specify one of the following values to control
  scaling of the output album art: Fit: Elastic Transcoder scales the output art so
  it matches the value that you specified in either MaxWidth or MaxHeight without
  exceeding the other value. Fill: Elastic Transcoder scales the output art so it
  matches the value that you specified in either MaxWidth or MaxHeight and matches
  or exceeds the other value. Elastic Transcoder centers the output art and then crops
  it in the dimension (if any) that exceeds the maximum value. Stretch: Elastic Transcoder
  stretches the output art to match the values that you specified for MaxWidth and
  MaxHeight. If the relative proportions of the input art and the output art are different,
  the output art will be distorted. Keep: Elastic Transcoder does not scale the output
  art. If either dimension of the input art exceeds the values that you specified
  for MaxWidth and MaxHeight, Elastic Transcoder crops the output art. ShrinkToFit:
  Elastic Transcoder scales the output art down so that its dimensions match the values
  that you specified for at least one of MaxWidth and MaxHeight without exceeding
  either value. If you specify this option, Elastic Transcoder does not scale the
  art up. ShrinkToFill Elastic Transcoder scales the output art down so that its dimensions
  match the values that you specified for at least one of MaxWidth and MaxHeight without
  dropping below either value. If you specify this option, Elastic Transcoder does
  not scale the art up.\n        * `:padding_policy` - (String) When you set PaddingPolicy
  to Pad, Elastic Transcoder may add white bars to the top and bottom and/or left
  and right sides of the output album art to make the total size of the output art
  match the values that you specified for MaxWidth and MaxHeight.\n        * `:album_art_format`
  - (String) The format of album art, if any. Valid formats are .jpg and .png.\n    *
  `:composition` - (Array&lt;Hash>) You can create an output file that contains an
  excerpt from the input file. This excerpt, called a clip, can come from the beginning,
  middle, or end of the file. The Composition object contains settings for the clips
  that make up an output file. For the current release, you can only specify settings
  for a single clip per output file. The Composition object cannot be null.\n    *
  `:member` - (Hash) \n      * `:time_span` - (Hash) Settings that determine when
  a clip begins and how long it lasts.\n        * `:start_time` - (String) The place
  in the input file where you want a clip to start. The format can be either HH:mm:ss.SSS
  (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS (maximum
  value: 86399.999). If you don't specify a value, Elastic Transcoder starts at the
  beginning of the input file.\n        * `:duration` - (String) The duration of the
  clip. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is
  thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you don't specify
  a value, Elastic Transcoder creates an output file from StartTime to the end of
  the file. If you specify a value longer than the duration of the input file , Elastic
  Transcoder transcodes the file and returns a warning message.\n  * `:outputs` -
  (Array&lt;Hash>) A section of the request body that provides information about the
  transcoded (target) files. We recommend that you use the Outputs syntax instead
  of the Output syntax.\n  * `:member` - (Hash) \n    * `:key` - (String) The name
  to assign to the transcoded file. Elastic Transcoder saves the file in the Amazon
  S3 bucket specified by the OutputBucket object in the pipeline that is specified
  by the pipeline ID. If a file with the specified name already exists in the output
  bucket, the job fails.\n    * `:thumbnail_pattern` - (String) Whether you want Elastic
  Transcoder to create thumbnails for your videos and, if so, how you want Elastic
  Transcoder to name the files. If you don't want Elastic Transcoder to create thumbnails,
  specify \"\". If you do want Elastic Transcoder to create thumbnails, specify the
  information that you want to include in the file name for each thumbnail. You can
  specify the following values in any sequence: `{count}` (Required): If you want
  to create thumbnails, you must include `{count}` in the ThumbnailPattern object.
  Wherever you specify `{count}`, Elastic Transcoder adds a five-digit sequence number
  (beginning with 00001) to thumbnail file names. The number indicates where a given
  thumbnail appears in the sequence of thumbnails for a transcoded file. If you specify
  a literal value and/or `{resolution}` but you omit `{count}`, Elastic Transcoder
  returns a validation error and does not create the job. Literal values (Optional):
  You can specify literal values anywhere in the ThumbnailPattern object. For example,
  you can include them as a file name prefix or as a delimiter between `{resolution}`
  and `{count}`. `{resolution}` (Optional): If you want Elastic Transcoder to include
  the resolution in the file name, include `{resolution}` in the ThumbnailPattern
  object. When creating thumbnails, Elastic Transcoder automatically saves the files
  in the format (.jpg or .png) that appears in the preset that you specified in the
  PresetID value of CreateJobOutput. Elastic Transcoder also appends the applicable
  file name extension.\n    * `:rotate` - (String) The number of degrees clockwise
  by which you want Elastic Transcoder to rotate the output relative to the input.
  Enter one of the following values: auto, 0, 90, 180, 270. The value auto generally
  works only if the file that you're transcoding contains rotation metadata.\n    *
  `:preset_id` - (String) The Id of the preset to use for this job. The preset determines
  the audio, video, and thumbnail settings that Elastic Transcoder uses for transcoding.\n
  \   * `:segment_duration` - (String) If you specify a preset in PresetId for which
  the value of Container is ts (MPEG-TS), SegmentDuration is the duration of each
  .ts file in seconds. The range of valid values is 1 to 60 seconds.\n    * `:watermarks`
  - (Array&lt;Hash>) Information about the watermarks that you want Elastic Transcoder
  to add to the video during transcoding. You can specify up to four watermarks for
  each output. Settings for each watermark must be defined in the preset for the current
  output.\n    * `:member` - (Hash) \n      * `:preset_watermark_id` - (String) The
  ID of the watermark settings that Elastic Transcoder uses to add watermarks to the
  video during transcoding. The settings are in the preset specified by Preset for
  the current output. In that preset, the value of Watermarks Id tells Elastic Transcoder
  which settings to use.\n      * `:input_key` - (String) The name of the .png or
  .jpg file that you want to use for the watermark. To determine which Amazon S3 bucket
  contains the specified file, Elastic Transcoder checks the pipeline specified by
  Pipeline; the Input Bucket object in that pipeline identifies the bucket. If the
  file name includes a prefix, for example, logos/128x64.png, include the prefix in
  the key. If the file isn't in the specified bucket, Elastic Transcoder returns an
  error.\n    * `:album_art` - (Hash) Information about the album art that you want
  Elastic Transcoder to add to the file during transcoding. You can specify up to
  twenty album artworks for each output. Settings for each artwork must be defined
  in the job for the current output.\n      * `:merge_policy` - (String) A policy
  that determines how Elastic Transcoder will handle the existence of multiple album
  artwork files. Replace: The specified album art will replace any existing album
  art. Prepend: The specified album art will be placed in front of any existing album
  art. Append: The specified album art will be placed after any existing album art.
  Fallback: If the original input file contains artwork, Elastic Transcoder will use
  that artwork for the output. If the original input does not contain artwork, Elastic
  Transcoder will use the specified album art file.\n      * `:artwork` - (Array&lt;Hash>)
  The file to be used as album art. There can be multiple artworks associated with
  an audio file, to a maximum of 20. Valid formats are .jpg and .png\n      * `:member`
  - (Hash) \n        * `:input_key` - (String) The name of the file to be used as
  album art. To determine which Amazon S3 bucket contains the specified file, Elastic
  Transcoder checks the pipeline specified by PipelineId; the InputBucket object in
  that pipeline identifies the bucket. If the file name includes a prefix, for example,
  cooking/pie.jpg, include the prefix in the key. If the file isn't in the specified
  bucket, Elastic Transcoder returns an error.\n        * `:max_width` - (String)
  The maximum width of the output album art in pixels. If you specify auto, Elastic
  Transcoder uses 600 as the default value. If you specify a numeric value, enter
  an even integer between 32 and 4096, inclusive.\n        * `:max_height` - (String)
  The maximum height of the output album art in pixels. If you specify auto, Elastic
  Transcoder uses 600 as the default value. If you specify a numeric value, enter
  an even integer between 32 and 3072, inclusive.\n        * `:sizing_policy` - (String)
  Specify one of the following values to control scaling of the output album art:
  Fit: Elastic Transcoder scales the output art so it matches the value that you specified
  in either MaxWidth or MaxHeight without exceeding the other value. Fill: Elastic
  Transcoder scales the output art so it matches the value that you specified in either
  MaxWidth or MaxHeight and matches or exceeds the other value. Elastic Transcoder
  centers the output art and then crops it in the dimension (if any) that exceeds
  the maximum value. Stretch: Elastic Transcoder stretches the output art to match
  the values that you specified for MaxWidth and MaxHeight. If the relative proportions
  of the input art and the output art are different, the output art will be distorted.
  Keep: Elastic Transcoder does not scale the output art. If either dimension of the
  input art exceeds the values that you specified for MaxWidth and MaxHeight, Elastic
  Transcoder crops the output art. ShrinkToFit: Elastic Transcoder scales the output
  art down so that its dimensions match the values that you specified for at least
  one of MaxWidth and MaxHeight without exceeding either value. If you specify this
  option, Elastic Transcoder does not scale the art up. ShrinkToFill Elastic Transcoder
  scales the output art down so that its dimensions match the values that you specified
  for at least one of MaxWidth and MaxHeight without dropping below either value.
  If you specify this option, Elastic Transcoder does not scale the art up.\n        *
  `:padding_policy` - (String) When you set PaddingPolicy to Pad, Elastic Transcoder
  may add white bars to the top and bottom and/or left and right sides of the output
  album art to make the total size of the output art match the values that you specified
  for MaxWidth and MaxHeight.\n        * `:album_art_format` - (String) The format
  of album art, if any. Valid formats are .jpg and .png.\n    * `:composition` - (Array&lt;Hash>)
  You can create an output file that contains an excerpt from the input file. This
  excerpt, called a clip, can come from the beginning, middle, or end of the file.
  The Composition object contains settings for the clips that make up an output file.
  For the current release, you can only specify settings for a single clip per output
  file. The Composition object cannot be null.\n    * `:member` - (Hash) \n      *
  `:time_span` - (Hash) Settings that determine when a clip begins and how long it
  lasts.\n        * `:start_time` - (String) The place in the input file where you
  want a clip to start. The format can be either HH:mm:ss.SSS (maximum value: 23:59:59.999;
  SSS is thousandths of a second) or sssss.SSS (maximum value: 86399.999). If you
  don't specify a value, Elastic Transcoder starts at the beginning of the input file.\n
  \       * `:duration` - (String) The duration of the clip. The format can be either
  HH:mm:ss.SSS (maximum value: 23:59:59.999; SSS is thousandths of a second) or sssss.SSS
  (maximum value: 86399.999). If you don't specify a value, Elastic Transcoder creates
  an output file from StartTime to the end of the file. If you specify a value longer
  than the duration of the input file , Elastic Transcoder transcodes the file and
  returns a warning message.\n  * `:output_key_prefix` - (String) The value, if any,
  that you want Elastic Transcoder to prepend to the names of all files that this
  job creates, including output files, thumbnails, and playlists.\n  * `:playlists`
  - (Array&lt;Hash>) If you specify a preset in PresetId for which the value of Container
  is ts (MPEG-TS), Playlists contains information about the master playlists that
  you want Elastic Transcoder to create. We recommend that you create only one master
  playlist. The maximum number of master playlists in a job is 30.\n  * `:member`
  - (Hash) \n    * `:name` - (String) The name that you want Elastic Transcoder to
  assign to the master playlist, for example, nyc-vacation.m3u8. The name cannot include
  a / character. If you create more than one master playlist (not recommended), the
  values of all Name objects must be unique. Elastic Transcoder automatically appends
  .m3u8 to the file name. If you include .m3u8 in Name, it will appear twice in the
  file name.\n    * `:format` - (String) This value must currently be HLSv3.\n    *
  `:output_keys` - (Array&lt;String>) For each output in this job that you want to
  include in a master playlist, the value of the Outputs:Key object. If you include
  more than one output in a playlist, the value of SegmentDuration for all of the
  outputs must be the same.\n    * `:member` - (String) \n@return [Core::Response]
  The `#data` method of the response object returns a hash with the following structure:\n\n
  \ * `:job` - (Hash)\n    * `:id` - (String)\n    * `:arn` - (String)\n    * `:pipeline_id`
  - (String)\n    * `:input` - (Hash)\n      * `:key` - (String)\n      * `:frame_rate`
  - (String)\n      * `:resolution` - (String)\n      * `:aspect_ratio` - (String)\n
  \     * `:interlaced` - (String)\n      * `:container` - (String)\n    * `:output`
  - (Hash)\n      * `:id` - (String)\n      * `:key` - (String)\n      * `:thumbnail_pattern`
  - (String)\n      * `:rotate` - (String)\n      * `:preset_id` - (String)\n      *
  `:segment_duration` - (String)\n      * `:status` - (String)\n      * `:status_detail`
  - (String)\n      * `:duration` - (Integer)\n      * `:width` - (Integer)\n      *
  `:height` - (Integer)\n      * `:watermarks` - (Array<Hash>)\n        * `:preset_watermark_id`
  - (String)\n        * `:input_key` - (String)\n      * `:album_art` - (Hash)\n        *
  `:merge_policy` - (String)\n        * `:artwork` - (Array<Hash>)\n          * `:input_key`
  - (String)\n          * `:max_width` - (String)\n          * `:max_height` - (String)\n
  \         * `:sizing_policy` - (String)\n          * `:padding_policy` - (String)\n
  \         * `:album_art_format` - (String)\n      * `:composition` - (Array<Hash>)\n
  \       * `:time_span` - (Hash)\n          * `:start_time` - (String)\n          *
  `:duration` - (String)\n    * `:outputs` - (Array<Hash>)\n      * `:id` - (String)\n
  \     * `:key` - (String)\n      * `:thumbnail_pattern` - (String)\n      * `:rotate`
  - (String)\n      * `:preset_id` - (String)\n      * `:segment_duration` - (String)\n
  \     * `:status` - (String)\n      * `:status_detail` - (String)\n      * `:duration`
  - (Integer)\n      * `:width` - (Integer)\n      * `:height` - (Integer)\n      *
  `:watermarks` - (Array<Hash>)\n        * `:preset_watermark_id` - (String)\n        *
  `:input_key` - (String)\n      * `:album_art` - (Hash)\n        * `:merge_policy`
  - (String)\n        * `:artwork` - (Array<Hash>)\n          * `:input_key` - (String)\n
  \         * `:max_width` - (String)\n          * `:max_height` - (String)\n          *
  `:sizing_policy` - (String)\n          * `:padding_policy` - (String)\n          *
  `:album_art_format` - (String)\n      * `:composition` - (Array<Hash>)\n        *
  `:time_span` - (Hash)\n          * `:start_time` - (String)\n          * `:duration`
  - (String)\n    * `:output_key_prefix` - (String)\n    * `:playlists` - (Array<Hash>)\n
  \     * `:name` - (String)\n      * `:format` - (String)\n      * `:output_keys`
  - (Array<String>)\n      * `:status` - (String)\n      * `:status_detail` - (String)\n
  \   * `:status` - (String)"
:create_pipeline: "Calls the POST CreatePipeline API operation.\n@param [Hash] options\n
  \ * `:name` - (String) The name of the pipeline. We recommend that the name be unique
  within the AWS account, but uniqueness is not enforced. Constraints: Maximum 40
  characters.\n  * `:input_bucket` - (String) The Amazon S3 bucket in which you saved
  the media files that you want to transcode.\n  * `:output_bucket` - (String) The
  Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
  (Use this, or use ContentConfig:Bucket plus ThumbnailConfig:Bucket.) Specify this
  value when all of the following are  `true` : You want to save transcoded files,
  thumbnails (if any), and playlists (if any) together in one bucket. You do not want
  to specify the users or groups who have access to the transcoded files, thumbnails,
  and playlists. You do not want to specify the permissions that Elastic Transcoder
  grants to the files. When Elastic Transcoder saves files in OutputBucket, it grants
  full control over the files only to the AWS account that owns the role that is specified
  by Role. You want to associate the transcoded files and thumbnails with the Amazon
  S3 Standard storage class. If you want to save transcoded files and playlists in
  one bucket and thumbnails in another bucket, specify which users can access the
  transcoded files or the permissions the users have, or change the Amazon S3 storage
  class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig
  instead.\n  * `:role` - (String) The IAM Amazon Resource Name (ARN) for the role
  that you want Elastic Transcoder to use to create the pipeline.\n  * `:notifications`
  - (Hash) The Amazon Simple Notification Service (Amazon SNS) topic that you want
  to notify to report job status. To receive notifications, you must also subscribe
  to the new topic in the Amazon SNS console. Progressing: The topic ARN for the Amazon
  Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic
  Transcoder has started to process a job in this pipeline. This is the ARN that Amazon
  SNS returned when you created the topic. For more information, see Create a Topic
  in the Amazon Simple Notification Service Developer Guide. Completed: The topic
  ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has
  finished processing a job in this pipeline. This is the ARN that Amazon SNS returned
  when you created the topic. Warning: The topic ARN for the Amazon SNS topic that
  you want to notify when Elastic Transcoder encounters a warning condition while
  processing a job in this pipeline. This is the ARN that Amazon SNS returned when
  you created the topic. Error: The topic ARN for the Amazon SNS topic that you want
  to notify when Elastic Transcoder encounters an error condition while processing
  a job in this pipeline. This is the ARN that Amazon SNS returned when you created
  the topic.\n    * `:progressing` - (String) The Amazon Simple Notification Service
  (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to
  process the job.\n    * `:completed` - (String) The Amazon SNS topic that you want
  to notify when Elastic Transcoder has finished processing the job.\n    * `:warning`
  - (String) The Amazon SNS topic that you want to notify when Elastic Transcoder
  encounters a warning condition.\n    * `:error` - (String) The Amazon SNS topic
  that you want to notify when Elastic Transcoder encounters an error condition.\n
  \ * `:content_config` - (Hash) The optional ContentConfig object specifies information
  about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded
  files and playlists: which bucket to use, which users you want to have access to
  the files, the type of access you want users to have, and the storage class that
  you want to assign to the files. If you specify values for ContentConfig, you must
  also specify values for ThumbnailConfig. If you specify values for ContentConfig
  and ThumbnailConfig, omit the OutputBucket object. Bucket: The Amazon S3 bucket
  in which you want Elastic Transcoder to save transcoded files and playlists. Permissions
  (Optional): The Permissions object specifies which users you want to have access
  to transcoded files and the type of access you want them to have. You can grant
  permissions to a maximum of 30 users and/or predefined Amazon S3 groups. Grantee
  Type: Specify the type of value that appears in the Grantee object: Canonical: The
  value in the Grantee object is either the canonical user ID for an AWS account or
  an origin access identity for an Amazon CloudFront distribution. For more information
  about canonical user IDs, see Access Control List (ACL) Overview in the Amazon Simple
  Storage Service Developer Guide. For more information about using CloudFront origin
  access identities to require that users use CloudFront URLs instead of Amazon S3
  URLs, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content.
  A canonical user ID is not the same as an AWS account number. Email: The value in
  the Grantee object is the registered email address of an AWS account. Group: The
  value in the Grantee object is one of the following predefined Amazon S3 groups:
  AllUsers, AuthenticatedUsers, or LogDelivery. Grantee: The AWS user or group that
  you want to have access to transcoded files and playlists. To identify the user
  or group, you can specify the canonical user ID for an AWS account, an origin access
  identity for a CloudFront distribution, the registered email address of an AWS account,
  or a predefined Amazon S3 group Access: The permission that you want to give to
  the AWS user that you specified in Grantee. Permissions are granted on the files
  that Elastic Transcoder adds to the bucket, including playlists and video files.
  Valid values include: READ: The grantee can read the objects and metadata for objects
  that Elastic Transcoder adds to the Amazon S3 bucket. READ_ACP: The grantee can
  read the object ACL for objects that Elastic Transcoder adds to the Amazon S3 bucket.
  WRITE_ACP: The grantee can write the ACL for the objects that Elastic Transcoder
  adds to the Amazon S3 bucket. FULL_CONTROL: The grantee has READ, READ_ACP, and
  WRITE_ACP permissions for the objects that Elastic Transcoder adds to the Amazon
  S3 bucket. StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy,
  that you want Elastic Transcoder to assign to the video files and playlists that
  it stores in your Amazon S3 bucket.\n    * `:bucket` - (String) The Amazon S3 bucket
  in which you want Elastic Transcoder to save the transcoded files. Specify this
  value when all of the following are  `true` : You want to save transcoded files,
  thumbnails (if any), and playlists (if any) together in one bucket. You do not want
  to specify the users or groups who have access to the transcoded files, thumbnails,
  and playlists. You do not want to specify the permissions that Elastic Transcoder
  grants to the files. You want to associate the transcoded files and thumbnails with
  the Amazon S3 Standard storage class. If you want to save transcoded files and playlists
  in one bucket and thumbnails in another bucket, specify which users can access the
  transcoded files or the permissions the users have, or change the Amazon S3 storage
  class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig
  instead.\n    * `:storage_class` - (String) The Amazon S3 storage class, Standard
  or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files
  and playlists that it stores in your Amazon S3 bucket.\n    * `:permissions` - (Array&lt;Hash>)
  Optional. The Permissions object specifies which users and/or predefined Amazon
  S3 groups you want to have access to transcoded files and playlists, and the type
  of access you want them to have. You can grant permissions to a maximum of 30 users
  and/or predefined Amazon S3 groups. If you include Permissions, Elastic Transcoder
  grants only the permissions that you specify. It does not grant full permissions
  to the owner of the role specified by Role. If you want that user to have full control,
  you must explicitly grant full control to the user. If you omit Permissions, Elastic
  Transcoder grants full control over the transcoded files and playlists to the owner
  of the role specified by Role, and grants no other permissions to any other user
  or group.\n    * `:member` - (Hash) \n      * `:grantee_type` - (String) The type
  of value that appears in the Grantee object: Canonical: Either the canonical user
  ID for an AWS account or an origin access identity for an Amazon CloudFront distribution.
  A canonical user ID is not the same as an AWS account number. Email: The registered
  email address of an AWS account. Group: One of the following predefined Amazon S3
  groups: AllUsers, AuthenticatedUsers, or LogDelivery.\n      * `:grantee` - (String)
  The AWS user or group that you want to have access to transcoded files and playlists.
  To identify the user or group, you can specify the canonical user ID for an AWS
  account, an origin access identity for a CloudFront distribution, the registered
  email address of an AWS account, or a predefined Amazon S3 group.\n      * `:access`
  - (Array&lt;String>) The permission that you want to give to the AWS user that is
  listed in Grantee. Valid values include: READ: The grantee can read the thumbnails
  and metadata for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
  READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket. WRITE_ACP: The grantee can write the ACL for the thumbnails
  that Elastic Transcoder adds to the Amazon S3 bucket. FULL_CONTROL: The grantee
  has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket.\n      * `:member` - (String) \n  * `:thumbnail_config`
  - (Hash) The ThumbnailConfig object specifies several values, including the Amazon
  S3 bucket in which you want Elastic Transcoder to save thumbnail files, which users
  you want to have access to the files, the type of access you want users to have,
  and the storage class that you want to assign to the files. If you specify values
  for ContentConfig, you must also specify values for ThumbnailConfig even if you
  don't want to create thumbnails. If you specify values for ContentConfig and ThumbnailConfig,
  omit the OutputBucket object. Bucket: The Amazon S3 bucket in which you want Elastic
  Transcoder to save thumbnail files. Permissions (Optional): The Permissions object
  specifies which users and/or predefined Amazon S3 groups you want to have access
  to thumbnail files, and the type of access you want them to have. You can grant
  permissions to a maximum of 30 users and/or predefined Amazon S3 groups. GranteeType:
  Specify the type of value that appears in the Grantee object: Canonical: The value
  in the Grantee object is either the canonical user ID for an AWS account or an origin
  access identity for an Amazon CloudFront distribution. A canonical user ID is not
  the same as an AWS account number. Email: The value in the Grantee object is the
  registered email address of an AWS account. Group: The value in the Grantee object
  is one of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers,
  or LogDelivery. Grantee: The AWS user or group that you want to have access to thumbnail
  files. To identify the user or group, you can specify the canonical user ID for
  an AWS account, an origin access identity for a CloudFront distribution, the registered
  email address of an AWS account, or a predefined Amazon S3 group. Access: The permission
  that you want to give to the AWS user that you specified in Grantee. Permissions
  are granted on the thumbnail files that Elastic Transcoder adds to the bucket. Valid
  values include: READ: The grantee can read the thumbnails and metadata for objects
  that Elastic Transcoder adds to the Amazon S3 bucket. READ_ACP: The grantee can
  read the object ACL for thumbnails that Elastic Transcoder adds to the Amazon S3
  bucket. WRITE_ACP: The grantee can write the ACL for the thumbnails that Elastic
  Transcoder adds to the Amazon S3 bucket. FULL_CONTROL: The grantee has READ, READ_ACP,
  and WRITE_ACP permissions for the thumbnails that Elastic Transcoder adds to the
  Amazon S3 bucket. StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy,
  that you want Elastic Transcoder to assign to the thumbnails that it stores in your
  Amazon S3 bucket.\n    * `:bucket` - (String) The Amazon S3 bucket in which you
  want Elastic Transcoder to save the transcoded files. Specify this value when all
  of the following are  `true` : You want to save transcoded files, thumbnails (if
  any), and playlists (if any) together in one bucket. You do not want to specify
  the users or groups who have access to the transcoded files, thumbnails, and playlists.
  You do not want to specify the permissions that Elastic Transcoder grants to the
  files. You want to associate the transcoded files and thumbnails with the Amazon
  S3 Standard storage class. If you want to save transcoded files and playlists in
  one bucket and thumbnails in another bucket, specify which users can access the
  transcoded files or the permissions the users have, or change the Amazon S3 storage
  class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig
  instead.\n    * `:storage_class` - (String) The Amazon S3 storage class, Standard
  or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files
  and playlists that it stores in your Amazon S3 bucket.\n    * `:permissions` - (Array&lt;Hash>)
  Optional. The Permissions object specifies which users and/or predefined Amazon
  S3 groups you want to have access to transcoded files and playlists, and the type
  of access you want them to have. You can grant permissions to a maximum of 30 users
  and/or predefined Amazon S3 groups. If you include Permissions, Elastic Transcoder
  grants only the permissions that you specify. It does not grant full permissions
  to the owner of the role specified by Role. If you want that user to have full control,
  you must explicitly grant full control to the user. If you omit Permissions, Elastic
  Transcoder grants full control over the transcoded files and playlists to the owner
  of the role specified by Role, and grants no other permissions to any other user
  or group.\n    * `:member` - (Hash) \n      * `:grantee_type` - (String) The type
  of value that appears in the Grantee object: Canonical: Either the canonical user
  ID for an AWS account or an origin access identity for an Amazon CloudFront distribution.
  A canonical user ID is not the same as an AWS account number. Email: The registered
  email address of an AWS account. Group: One of the following predefined Amazon S3
  groups: AllUsers, AuthenticatedUsers, or LogDelivery.\n      * `:grantee` - (String)
  The AWS user or group that you want to have access to transcoded files and playlists.
  To identify the user or group, you can specify the canonical user ID for an AWS
  account, an origin access identity for a CloudFront distribution, the registered
  email address of an AWS account, or a predefined Amazon S3 group.\n      * `:access`
  - (Array&lt;String>) The permission that you want to give to the AWS user that is
  listed in Grantee. Valid values include: READ: The grantee can read the thumbnails
  and metadata for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
  READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket. WRITE_ACP: The grantee can write the ACL for the thumbnails
  that Elastic Transcoder adds to the Amazon S3 bucket. FULL_CONTROL: The grantee
  has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket.\n      * `:member` - (String) \n@return [Core::Response]
  The `#data` method of the response object returns a hash with the following structure:\n\n
  \ * `:pipeline` - (Hash)\n    * `:id` - (String)\n    * `:arn` - (String)\n    *
  `:name` - (String)\n    * `:status` - (String)\n    * `:input_bucket` - (String)\n
  \   * `:output_bucket` - (String)\n    * `:role` - (String)\n    * `:notifications`
  - (Hash)\n      * `:progressing` - (String)\n      * `:completed` - (String)\n      *
  `:warning` - (String)\n      * `:error` - (String)\n    * `:content_config` - (Hash)\n
  \     * `:bucket` - (String)\n      * `:storage_class` - (String)\n      * `:permissions`
  - (Array<Hash>)\n        * `:grantee_type` - (String)\n        * `:grantee` - (String)\n
  \       * `:access` - (Array<String>)\n    * `:thumbnail_config` - (Hash)\n      *
  `:bucket` - (String)\n      * `:storage_class` - (String)\n      * `:permissions`
  - (Array<Hash>)\n        * `:grantee_type` - (String)\n        * `:grantee` - (String)\n
  \       * `:access` - (Array<String>)"
:create_preset: "Calls the POST CreatePreset API operation.\n@param [Hash] options\n
  \ * `:name` - (String) The name of the preset. We recommend that the name be unique
  within the AWS account, but uniqueness is not enforced.\n  * `:description` - (String)
  A description of the preset.\n  * `:container` - (String) The container type for
  the output file. Valid values include mp3, mp4, ogg, ts, and webm.\n  * `:video`
  - (Hash) A section of the request body that specifies the video parameters.\n    *
  `:codec` - (String) The video codec for the output file. Valid values include H.264
  and vp8. You can only specify vp8 when the container type is webm.\n    * `:codec_options`
  - (Hash) Profile The H.264 profile that you want to use for the output file. Elastic
  Transcoder supports the following profiles: baseline: The profile most commonly
  used for videoconferencing and for mobile applications. main: The profile used for
  standard-definition digital TV broadcasts. high: The profile used for high-definition
  digital TV broadcasts and for Blu-ray discs. Level (H.264 Only) The H.264 level
  that you want to use for the output file. Elastic Transcoder supports the following
  levels: 1, 1b, 1.1, 1.2, 1.3, 2, 2.1, 2.2, 3, 3.1, 3.2, 4, 4.1 MaxReferenceFrames
  (H.264 Only) Applicable only when the value of Video:Codec is H.264. The maximum
  number of previously decoded frames to use as a reference for decoding future frames.
  Valid values are integers 0 through 16, but we recommend that you not use a value
  greater than the following: Min(Floor(Maximum decoded picture buffer in macroblocks
  * 256 / (Width in pixels * Height in pixels)), 16) where Width in pixels and Height
  in pixels represent either MaxWidth and MaxHeight, or Resolution. Maximum decoded
  picture buffer in macroblocks depends on the value of the Level object. See the
  list below. (A macroblock is a block of pixels measuring 16x16.) 1 - 396 1b - 396
  1.1 - 900 1.2 - 2376 1.3 - 2376 2 - 2376 2.1 - 4752 2.2 - 8100 3 - 8100 3.1 - 18000
  3.2 - 20480 4 - 32768 4.1 - 32768 MaxBitRate The maximum number of bits per second
  in a video buffer; the size of the buffer is specified by BufferSize. Specify a
  value between 16 and 62,500. You can reduce the bandwidth required to stream a video
  by reducing the maximum bit rate, but this also reduces the quality of the video.
  BufferSize The maximum number of bits in any x seconds of the output video. This
  window is commonly 10 seconds, the standard segment duration when you're using MPEG-TS
  for the container type of the output video. Specify an integer greater than 0. If
  you specify MaxBitRate and omit BufferSize, Elastic Transcoder sets BufferSize to
  10 times the value of MaxBitRate.\n    * `:value` - (String) \n    * `:keyframes_max_dist`
  - (String) The maximum number of frames between key frames. Key frames are fully
  encoded frames; the frames between key frames are encoded based, in part, on the
  content of the key frames. The value is an integer formatted as a string; valid
  values are between 1 (every frame is a key frame) and 100000, inclusive. A higher
  value results in higher compression but may also discernibly decrease video quality.\n
  \   * `:fixed_gop` - (String) Whether to use a fixed value for FixedGOP. Valid values
  are  `true`  and  `false` :  `true` : Elastic Transcoder uses the value of KeyframesMaxDist
  for the distance between key frames (the number of frames in a group of pictures,
  or GOP).  `false` : The distance between key frames can vary.\n    * `:bit_rate`
  - (String) The bit rate of the video stream in the output file, in kilobits/second.
  Valid values depend on the values of Level and Profile. If you specify auto, Elastic
  Transcoder uses the detected bit rate of the input source. If you specify a value
  other than auto, we recommend that you specify a value less than or equal to the
  maximum H.264-compliant value listed for your level and profile: Level - Maximum
  video bit rate in kilobits/second (baseline and main Profile) : maximum video bit
  rate in kilobits/second (high Profile) 1 - 64 : 80 1b - 128 : 160 1.1 - 192 : 240
  1.2 - 384 : 480 1.3 - 768 : 960 2 - 2000 : 2500 3 - 10000 : 12500 3.1 - 14000 :
  17500 3.2 - 20000 : 25000 4 - 20000 : 25000 4.1 - 50000 : 62500\n    * `:frame_rate`
  - (String) The frames per second for the video stream in the output file. Valid
  values include: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 60 If you specify auto,
  Elastic Transcoder uses the detected frame rate of the input source. If you specify
  a frame rate, we recommend that you perform the following calculation: Frame rate
  = maximum recommended decoding speed in luma samples/second / (width in pixels *
  height in pixels) where: width in pixels and height in pixels represent the Resolution
  of the output video. maximum recommended decoding speed in Luma samples/second is
  less than or equal to the maximum value listed in the following table, based on
  the value that you specified for Level. The maximum recommended decoding speed in
  Luma samples/second for each level is described in the following list (Level - Decoding
  speed): 1 - 380160 1b - 380160 1.1 - 76800 1.2 - 1536000 1.3 - 3041280 2 - 3041280
  2.1 - 5068800 2.2 - 5184000 3 - 10368000 3.1 - 27648000 3.2 - 55296000 4 - 62914560
  4.1 - 62914560\n    * `:max_frame_rate` - (String) If you specify auto for FrameRate,
  Elastic Transcoder uses the frame rate of the input video for the frame rate of
  the output video. Specify the maximum frame rate that you want Elastic Transcoder
  to use when the frame rate of the input video is greater than the desired maximum
  frame rate of the output video. Valid values include: 10, 15, 23.97, 24, 25, 29.97,
  30, 60.\n    * `:resolution` - (String) To better control resolution and aspect
  ratio of output videos, we recommend that you use the values MaxWidth, MaxHeight,
  SizingPolicy, PaddingPolicy, and DisplayAspectRatio instead of Resolution and AspectRatio.
  The two groups of settings are mutually exclusive. Do not use them together. The
  width and height of the video in the output file, in pixels. Valid values are auto
  and width x height: auto: Elastic Transcoder attempts to preserve the width and
  height of the input file, subject to the following rules. width x height: The width
  and height of the output video in pixels. Note the following about specifying the
  width and height: The width must be an even integer between 128 and 4096, inclusive.
  The height must be an even integer between 96 and 3072, inclusive. If you specify
  a resolution that is less than the resolution of the input file, Elastic Transcoder
  rescales the output file to the lower resolution. If you specify a resolution that
  is greater than the resolution of the input file, Elastic Transcoder rescales the
  output to the higher resolution. We recommend that you specify a resolution for
  which the product of width and height is less than or equal to the applicable value
  in the following list (List - Max width x height value): 1 - 25344 1b - 25344 1.1
  - 101376 1.2 - 101376 1.3 - 101376 2 - 101376 2.1 - 202752 2.2 - 404720 3 - 404720
  3.1 - 921600 3.2 - 1310720 4 - 2097152 4.1 - 2097152\n    * `:aspect_ratio` - (String)
  To better control resolution and aspect ratio of output videos, we recommend that
  you use the values MaxWidth, MaxHeight, SizingPolicy, PaddingPolicy, and DisplayAspectRatio
  instead of Resolution and AspectRatio. The two groups of settings are mutually exclusive.
  Do not use them together. The display aspect ratio of the video in the output file.
  Valid values include: auto, 1:1, 4:3, 3:2, 16:9 If you specify auto, Elastic Transcoder
  tries to preserve the aspect ratio of the input file. If you specify an aspect ratio
  for the output file that differs from aspect ratio of the input file, Elastic Transcoder
  adds pillarboxing (black bars on the sides) or letterboxing (black bars on the top
  and bottom) to maintain the aspect ratio of the active region of the video.\n    *
  `:max_width` - (String) The maximum width of the output video in pixels. If you
  specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you
  specify a numeric value, enter an even integer between 128 and 4096.\n    * `:max_height`
  - (String) The maximum height of the output video in pixels. If you specify auto,
  Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric
  value, enter an even integer between 96 and 3072.\n    * `:display_aspect_ratio`
  - (String) The value that Elastic Transcoder adds to the metadata in the output
  file.\n    * `:sizing_policy` - (String) Specify one of the following values to
  control scaling of the output video: Fit: Elastic Transcoder scales the output video
  so it matches the value that you specified in either MaxWidth or MaxHeight without
  exceeding the other value. Fill: Elastic Transcoder scales the output video so it
  matches the value that you specified in either MaxWidth or MaxHeight and matches
  or exceeds the other value. Elastic Transcoder centers the output video and then
  crops it in the dimension (if any) that exceeds the maximum value. Stretch: Elastic
  Transcoder stretches the output video to match the values that you specified for
  MaxWidth and MaxHeight. If the relative proportions of the input video and the output
  video are different, the output video will be distorted. Keep: Elastic Transcoder
  does not scale the output video. If either dimension of the input video exceeds
  the values that you specified for MaxWidth and MaxHeight, Elastic Transcoder crops
  the output video. ShrinkToFit: Elastic Transcoder scales the output video down so
  that its dimensions match the values that you specified for at least one of MaxWidth
  and MaxHeight without exceeding either value. If you specify this option, Elastic
  Transcoder does not scale the video up. ShrinkToFill: Elastic Transcoder scales
  the output video down so that its dimensions match the values that you specified
  for at least one of MaxWidth and MaxHeight without dropping below either value.
  If you specify this option, Elastic Transcoder does not scale the video up.\n    *
  `:padding_policy` - (String) When you set PaddingPolicy to Pad, Elastic Transcoder
  may add black bars to the top and bottom and/or left and right sides of the output
  video to make the total size of the output video match the values that you specified
  for MaxWidth and MaxHeight.\n    * `:watermarks` - (Array&lt;Hash>) Settings for
  the size, location, and opacity of graphics that you want Elastic Transcoder to
  overlay over videos that are transcoded using this preset. You can specify settings
  for up to four watermarks. Watermarks appear in the specified size and location,
  and with the specified opacity for the duration of the transcoded video. Watermarks
  can be in .png or .jpg format. If you want to display a watermark that is not rectangular,
  use the .png format, which supports transparency. When you create a job that uses
  this preset, you specify the .png or .jpg graphics that you want Elastic Transcoder
  to include in the transcoded videos. You can specify fewer graphics in the job than
  you specify watermark settings in the preset, which allows you to use the same preset
  for up to four watermarks that have different dimensions.\n    * `:member` - (Hash)
  \n      * `:id` - (String) A unique identifier for the settings for one watermark.
  The value of Id can be up to 40 characters long.\n      * `:max_width` - (String)
  The maximum width of the watermark in one of the following formats: number of pixels
  (px): The minimum value is 16 pixels, and the maximum value is the value of MaxWidth.
  integer percentage (%): The range of valid values is 0 to 100. Use the value of
  Target to specify whether you want Elastic Transcoder to include the black bars
  that are added by Elastic Transcoder, if any, in the calculation. If you specify
  the value in pixels, it must be less than or equal to the value of MaxWidth.\n      *
  `:max_height` - (String) The maximum height of the watermark in one of the following
  formats: number of pixels (px): The minimum value is 16 pixels, and the maximum
  value is the value of MaxHeight. integer percentage (%): The range of valid values
  is 0 to 100. Use the value of Target to specify whether you want Elastic Transcoder
  to include the black bars that are added by Elastic Transcoder, if any, in the calculation.
  If you specify the value in pixels, it must be less than or equal to the value of
  MaxHeight.\n      * `:sizing_policy` - (String) A value that controls scaling of
  the watermark: Fit: Elastic Transcoder scales the watermark so it matches the value
  that you specified in either MaxWidth or MaxHeight without exceeding the other value.
  Stretch: Elastic Transcoder stretches the watermark to match the values that you
  specified for MaxWidth and MaxHeight. If the relative proportions of the watermark
  and the values of MaxWidth and MaxHeight are different, the watermark will be distorted.
  ShrinkToFit: Elastic Transcoder scales the watermark down so that its dimensions
  match the values that you specified for at least one of MaxWidth and MaxHeight without
  exceeding either value. If you specify this option, Elastic Transcoder does not
  scale the watermark up.\n      * `:horizontal_align` - (String) The horizontal position
  of the watermark unless you specify a non-zero value for HorizontalOffset: Left:
  The left edge of the watermark is aligned with the left border of the video. Right:
  The right edge of the watermark is aligned with the right border of the video. Center:
  The watermark is centered between the left and right borders.\n      * `:horizontal_offset`
  - (String) The amount by which you want the horizontal position of the watermark
  to be offset from the position specified by HorizontalAlign: number of pixels (px):
  The minimum value is 0 pixels, and the maximum value is the value of MaxWidth. integer
  percentage (%): The range of valid values is 0 to 100. For example, if you specify
  Left for HorizontalAlign and 5px for HorizontalOffset, the left side of the watermark
  appears 5 pixels from the left border of the output video. HorizontalOffset is only
  valid when the value of HorizontalAlign is Left or Right. If you specify an offset
  that causes the watermark to extend beyond the left or right border and Elastic
  Transcoder has not added black bars, the watermark is cropped. If Elastic Transcoder
  has added black bars, the watermark extends into the black bars. If the watermark
  extends beyond the black bars, it is cropped. Use the value of Target to specify
  whether you want to include the black bars that are added by Elastic Transcoder,
  if any, in the offset calculation.\n      * `:vertical_align` - (String) The vertical
  position of the watermark unless you specify a non-zero value for VerticalOffset:
  Top: The top edge of the watermark is aligned with the top border of the video.
  Bottom: The bottom edge of the watermark is aligned with the bottom border of the
  video. Center: The watermark is centered between the top and bottom borders.\n      *
  `:vertical_offset` - (String) VerticalOffset The amount by which you want the vertical
  position of the watermark to be offset from the position specified by VerticalAlign:
  number of pixels (px): The minimum value is 0 pixels, and the maximum value is the
  value of MaxHeight. integer percentage (%): The range of valid values is 0 to 100.
  For example, if you specify Top for VerticalAlign and 5px for VerticalOffset, the
  top of the watermark appears 5 pixels from the top border of the output video. VerticalOffset
  is only valid when the value of VerticalAlign is Top or Bottom. If you specify an
  offset that causes the watermark to extend beyond the top or bottom border and Elastic
  Transcoder has not added black bars, the watermark is cropped. If Elastic Transcoder
  has added black bars, the watermark extends into the black bars. If the watermark
  extends beyond the black bars, it is cropped. Use the value of Target to specify
  whether you want Elastic Transcoder to include the black bars that are added by
  Elastic Transcoder, if any, in the offset calculation.\n      * `:opacity` - (String)
  A percentage that indicates how much you want a watermark to obscure the video in
  the location where it appears. Valid values are 0 (the watermark is invisible) to
  100 (the watermark completely obscures the video in the specified location). The
  datatype of Opacity is float. Elastic Transcoder supports transparent .png graphics.
  If you use a transparent .png, the transparent portion of the video appears as if
  you had specified a value of 0 for Opacity. The .jpg file format doesn't support
  transparency.\n      * `:target` - (String) A value that determines how Elastic
  Transcoder interprets values that you specified for HorizontalOffset, VerticalOffset,
  MaxWidth, and MaxHeight: Content: HorizontalOffset and VerticalOffset values are
  calculated based on the borders of the video excluding black bars added by Elastic
  Transcoder, if any. In addition, MaxWidth and MaxHeight, if specified as a percentage,
  are calculated based on the borders of the video excluding black bars added by Elastic
  Transcoder, if any. Frame: HorizontalOffset and VerticalOffset values are calculated
  based on the borders of the video including black bars added by Elastic Transcoder,
  if any. In addition, MaxWidth and MaxHeight, if specified as a percentage, are calculated
  based on the borders of the video including black bars added by Elastic Transcoder,
  if any.\n  * `:audio` - (Hash) A section of the request body that specifies the
  audio parameters.\n    * `:codec` - (String) The audio codec for the output file.
  Valid values include aac, mp3, and vorbis.\n    * `:sample_rate` - (String) The
  sample rate of the audio stream in the output file, in Hertz. Valid values include:
  auto, 22050, 32000, 44100, 48000, 96000 If you specify auto, Elastic Transcoder
  automatically detects the sample rate.\n    * `:bit_rate` - (String) The bit rate
  of the audio stream in the output file, in kilobits/second. Enter an integer between
  64 and 320, inclusive.\n    * `:channels` - (String) The number of audio channels
  in the output file. Valid values include: auto, 0, 1, 2 If you specify auto, Elastic
  Transcoder automatically detects the number of channels in the input file.\n    *
  `:codec_options` - (Hash) If you specified AAC for Audio:Codec, this is the AAC
  compression profile to use. Valid values include: auto, AAC-LC, HE-AAC, HE-AACv2
  If you specify auto, Elastic Transcoder chooses a profile based on the bit rate
  of the output file.\n      * `:profile` - (String) If you specified AAC for Audio:Codec,
  choose the AAC profile for the output file. Elastic Transcoder supports the following
  profiles: auto: If you specify auto, Elastic Transcoder will select the profile
  based on the bit rate selected for the output file. AAC-LC: The most common AAC
  profile. Use for bitrates larger than 64 kbps. HE-AAC: Not supported on some older
  players and devices. Use for bitrates between 40 and 80 kbps. HE-AACv2: Not supported
  on some players and devices. Use for bitrates less than 48 kbps. If you created
  any presets before AAC profiles were added, Elastic Transcoder automatically updated
  your presets to use AAC-LC. You can change the value as required.\n  * `:thumbnails`
  - (Hash) A section of the request body that specifies the thumbnail parameters,
  if any.\n    * `:format` - (String) The format of thumbnails, if any. Valid values
  are jpg and png. You specify whether you want Elastic Transcoder to create thumbnails
  when you create a job.\n    * `:interval` - (String) The number of seconds between
  thumbnails. Specify an integer value.\n    * `:resolution` - (String) To better
  control resolution and aspect ratio of thumbnails, we recommend that you use the
  values MaxWidth, MaxHeight, SizingPolicy, and PaddingPolicy instead of Resolution
  and AspectRatio. The two groups of settings are mutually exclusive. Do not use them
  together. The width and height of thumbnail files in pixels. Specify a value in
  the format width x height where both values are even integers. The values cannot
  exceed the width and height that you specified in the Video:Resolution object.\n
  \   * `:aspect_ratio` - (String) To better control resolution and aspect ratio of
  thumbnails, we recommend that you use the values MaxWidth, MaxHeight, SizingPolicy,
  and PaddingPolicy instead of Resolution and AspectRatio. The two groups of settings
  are mutually exclusive. Do not use them together. The aspect ratio of thumbnails.
  Valid values include: auto, 1:1, 4:3, 3:2, 16:9 If you specify auto, Elastic Transcoder
  tries to preserve the aspect ratio of the video in the output file.\n    * `:max_width`
  - (String) The maximum width of thumbnails in pixels. If you specify auto, Elastic
  Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value,
  enter an even integer between 32 and 4096.\n    * `:max_height` - (String) The maximum
  height of thumbnails in pixels. If you specify auto, Elastic Transcoder uses 1080
  (Full HD) as the default value. If you specify a numeric value, enter an even integer
  between 32 and 3072.\n    * `:sizing_policy` - (String) Specify one of the following
  values to control scaling of thumbnails: Fit: Elastic Transcoder scales thumbnails
  so they match the value that you specified in thumbnail MaxWidth or MaxHeight settings
  without exceeding the other value. Fill: Elastic Transcoder scales thumbnails so
  they match the value that you specified in thumbnail MaxWidth or MaxHeight settings
  and matches or exceeds the other value. Elastic Transcoder centers the image in
  thumbnails and then crops in the dimension (if any) that exceeds the maximum value.
  Stretch: Elastic Transcoder stretches thumbnails to match the values that you specified
  for thumbnail MaxWidth and MaxHeight settings. If the relative proportions of the
  input video and thumbnails are different, the thumbnails will be distorted. Keep:
  Elastic Transcoder does not scale thumbnails. If either dimension of the input video
  exceeds the values that you specified for thumbnail MaxWidth and MaxHeight settings,
  Elastic Transcoder crops the thumbnails. ShrinkToFit: Elastic Transcoder scales
  thumbnails down so that their dimensions match the values that you specified for
  at least one of thumbnail MaxWidth and MaxHeight without exceeding either value.
  If you specify this option, Elastic Transcoder does not scale thumbnails up. ShrinkToFill:
  Elastic Transcoder scales thumbnails down so that their dimensions match the values
  that you specified for at least one of MaxWidth and MaxHeight without dropping below
  either value. If you specify this option, Elastic Transcoder does not scale thumbnails
  up.\n    * `:padding_policy` - (String) When you set PaddingPolicy to Pad, Elastic
  Transcoder may add black bars to the top and bottom and/or left and right sides
  of thumbnails to make the total size of the thumbnails match the values that you
  specified for thumbnail MaxWidth and MaxHeight settings.\n@return [Core::Response]
  The `#data` method of the response object returns a hash with the following structure:\n\n
  \ * `:preset` - (Hash)\n    * `:id` - (String)\n    * `:arn` - (String)\n    * `:name`
  - (String)\n    * `:description` - (String)\n    * `:container` - (String)\n    *
  `:audio` - (Hash)\n      * `:codec` - (String)\n      * `:sample_rate` - (String)\n
  \     * `:bit_rate` - (String)\n      * `:channels` - (String)\n      * `:codec_options`
  - (Hash)\n        * `:profile` - (String)\n    * `:video` - (Hash)\n      * `:codec`
  - (String)\n      * `:codec_options` - (Hash<String,String>)\n      * `:keyframes_max_dist`
  - (String)\n      * `:fixed_gop` - (String)\n      * `:bit_rate` - (String)\n      *
  `:frame_rate` - (String)\n      * `:max_frame_rate` - (String)\n      * `:resolution`
  - (String)\n      * `:aspect_ratio` - (String)\n      * `:max_width` - (String)\n
  \     * `:max_height` - (String)\n      * `:display_aspect_ratio` - (String)\n      *
  `:sizing_policy` - (String)\n      * `:padding_policy` - (String)\n      * `:watermarks`
  - (Array<Hash>)\n        * `:id` - (String)\n        * `:max_width` - (String)\n
  \       * `:max_height` - (String)\n        * `:sizing_policy` - (String)\n        *
  `:horizontal_align` - (String)\n        * `:horizontal_offset` - (String)\n        *
  `:vertical_align` - (String)\n        * `:vertical_offset` - (String)\n        *
  `:opacity` - (String)\n        * `:target` - (String)\n    * `:thumbnails` - (Hash)\n
  \     * `:format` - (String)\n      * `:interval` - (String)\n      * `:resolution`
  - (String)\n      * `:aspect_ratio` - (String)\n      * `:max_width` - (String)\n
  \     * `:max_height` - (String)\n      * `:sizing_policy` - (String)\n      * `:padding_policy`
  - (String)\n    * `:type` - (String)\n  * `:warning` - (String)"
:delete_pipeline: |-
  Calls the DELETE DeletePipeline API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the pipeline that you want to delete.
  @return [Core::Response]
:delete_preset: |-
  Calls the DELETE DeletePreset API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the preset for which you want to get detailed information.
  @return [Core::Response]
:list_jobs_by_pipeline: |-
  Calls the GET ListJobsByPipeline API operation.
  @param [Hash] options
    * `:pipeline_id` - *required* - (String) The ID of the pipeline for which you want to get job information.
    * `:ascending` - (String) To list jobs in chronological order by the date and time that they were submitted, enter  `true` . To list jobs in reverse chronological order, enter  `false` .
    * `:page_token` - (String) When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:jobs` - (Array<Hash>)
      * `:id` - (String)
      * `:arn` - (String)
      * `:pipeline_id` - (String)
      * `:input` - (Hash)
        * `:key` - (String)
        * `:frame_rate` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:interlaced` - (String)
        * `:container` - (String)
      * `:output` - (Hash)
        * `:id` - (String)
        * `:key` - (String)
        * `:thumbnail_pattern` - (String)
        * `:rotate` - (String)
        * `:preset_id` - (String)
        * `:segment_duration` - (String)
        * `:status` - (String)
        * `:status_detail` - (String)
        * `:duration` - (Integer)
        * `:width` - (Integer)
        * `:height` - (Integer)
        * `:watermarks` - (Array<Hash>)
          * `:preset_watermark_id` - (String)
          * `:input_key` - (String)
        * `:album_art` - (Hash)
          * `:merge_policy` - (String)
          * `:artwork` - (Array<Hash>)
            * `:input_key` - (String)
            * `:max_width` - (String)
            * `:max_height` - (String)
            * `:sizing_policy` - (String)
            * `:padding_policy` - (String)
            * `:album_art_format` - (String)
        * `:composition` - (Array<Hash>)
          * `:time_span` - (Hash)
            * `:start_time` - (String)
            * `:duration` - (String)
      * `:outputs` - (Array<Hash>)
        * `:id` - (String)
        * `:key` - (String)
        * `:thumbnail_pattern` - (String)
        * `:rotate` - (String)
        * `:preset_id` - (String)
        * `:segment_duration` - (String)
        * `:status` - (String)
        * `:status_detail` - (String)
        * `:duration` - (Integer)
        * `:width` - (Integer)
        * `:height` - (Integer)
        * `:watermarks` - (Array<Hash>)
          * `:preset_watermark_id` - (String)
          * `:input_key` - (String)
        * `:album_art` - (Hash)
          * `:merge_policy` - (String)
          * `:artwork` - (Array<Hash>)
            * `:input_key` - (String)
            * `:max_width` - (String)
            * `:max_height` - (String)
            * `:sizing_policy` - (String)
            * `:padding_policy` - (String)
            * `:album_art_format` - (String)
        * `:composition` - (Array<Hash>)
          * `:time_span` - (Hash)
            * `:start_time` - (String)
            * `:duration` - (String)
      * `:output_key_prefix` - (String)
      * `:playlists` - (Array<Hash>)
        * `:name` - (String)
        * `:format` - (String)
        * `:output_keys` - (Array<String>)
        * `:status` - (String)
        * `:status_detail` - (String)
      * `:status` - (String)
    * `:next_page_token` - (String)
:list_jobs_by_status: |-
  Calls the GET ListJobsByStatus API operation.
  @param [Hash] options
    * `:status` - *required* - (String) To get information about all of the jobs associated with the current AWS account that have a given status, specify the following status: Submitted, Progressing, Complete, Canceled, or Error.
    * `:ascending` - (String) To list jobs in chronological order by the date and time that they were submitted, enter  `true` . To list jobs in reverse chronological order, enter  `false` .
    * `:page_token` - (String) When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:jobs` - (Array<Hash>)
      * `:id` - (String)
      * `:arn` - (String)
      * `:pipeline_id` - (String)
      * `:input` - (Hash)
        * `:key` - (String)
        * `:frame_rate` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:interlaced` - (String)
        * `:container` - (String)
      * `:output` - (Hash)
        * `:id` - (String)
        * `:key` - (String)
        * `:thumbnail_pattern` - (String)
        * `:rotate` - (String)
        * `:preset_id` - (String)
        * `:segment_duration` - (String)
        * `:status` - (String)
        * `:status_detail` - (String)
        * `:duration` - (Integer)
        * `:width` - (Integer)
        * `:height` - (Integer)
        * `:watermarks` - (Array<Hash>)
          * `:preset_watermark_id` - (String)
          * `:input_key` - (String)
        * `:album_art` - (Hash)
          * `:merge_policy` - (String)
          * `:artwork` - (Array<Hash>)
            * `:input_key` - (String)
            * `:max_width` - (String)
            * `:max_height` - (String)
            * `:sizing_policy` - (String)
            * `:padding_policy` - (String)
            * `:album_art_format` - (String)
        * `:composition` - (Array<Hash>)
          * `:time_span` - (Hash)
            * `:start_time` - (String)
            * `:duration` - (String)
      * `:outputs` - (Array<Hash>)
        * `:id` - (String)
        * `:key` - (String)
        * `:thumbnail_pattern` - (String)
        * `:rotate` - (String)
        * `:preset_id` - (String)
        * `:segment_duration` - (String)
        * `:status` - (String)
        * `:status_detail` - (String)
        * `:duration` - (Integer)
        * `:width` - (Integer)
        * `:height` - (Integer)
        * `:watermarks` - (Array<Hash>)
          * `:preset_watermark_id` - (String)
          * `:input_key` - (String)
        * `:album_art` - (Hash)
          * `:merge_policy` - (String)
          * `:artwork` - (Array<Hash>)
            * `:input_key` - (String)
            * `:max_width` - (String)
            * `:max_height` - (String)
            * `:sizing_policy` - (String)
            * `:padding_policy` - (String)
            * `:album_art_format` - (String)
        * `:composition` - (Array<Hash>)
          * `:time_span` - (Hash)
            * `:start_time` - (String)
            * `:duration` - (String)
      * `:output_key_prefix` - (String)
      * `:playlists` - (Array<Hash>)
        * `:name` - (String)
        * `:format` - (String)
        * `:output_keys` - (Array<String>)
        * `:status` - (String)
        * `:status_detail` - (String)
      * `:status` - (String)
    * `:next_page_token` - (String)
:list_pipelines: |-
  Calls the GET ListPipelines API operation.
  @param [Hash] options
    * `:ascending` - (String) To list pipelines in chronological order by the date and time that they were created, enter  `true` . To list pipelines in reverse chronological order, enter  `false` .
    * `:page_token` - (String) When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:pipelines` - (Array<Hash>)
      * `:id` - (String)
      * `:arn` - (String)
      * `:name` - (String)
      * `:status` - (String)
      * `:input_bucket` - (String)
      * `:output_bucket` - (String)
      * `:role` - (String)
      * `:notifications` - (Hash)
        * `:progressing` - (String)
        * `:completed` - (String)
        * `:warning` - (String)
        * `:error` - (String)
      * `:content_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
      * `:thumbnail_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
    * `:next_page_token` - (String)
:list_presets: |-
  Calls the GET ListPresets API operation.
  @param [Hash] options
    * `:ascending` - (String) To list presets in chronological order by the date and time that they were created, enter  `true` . To list presets in reverse chronological order, enter  `false` .
    * `:page_token` - (String) When Elastic Transcoder returns more than one page of results, use pageToken in subsequent GET requests to get each successive page of results.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:presets` - (Array<Hash>)
      * `:id` - (String)
      * `:arn` - (String)
      * `:name` - (String)
      * `:description` - (String)
      * `:container` - (String)
      * `:audio` - (Hash)
        * `:codec` - (String)
        * `:sample_rate` - (String)
        * `:bit_rate` - (String)
        * `:channels` - (String)
        * `:codec_options` - (Hash)
          * `:profile` - (String)
      * `:video` - (Hash)
        * `:codec` - (String)
        * `:codec_options` - (Hash<String,String>)
        * `:keyframes_max_dist` - (String)
        * `:fixed_gop` - (String)
        * `:bit_rate` - (String)
        * `:frame_rate` - (String)
        * `:max_frame_rate` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:max_width` - (String)
        * `:max_height` - (String)
        * `:display_aspect_ratio` - (String)
        * `:sizing_policy` - (String)
        * `:padding_policy` - (String)
        * `:watermarks` - (Array<Hash>)
          * `:id` - (String)
          * `:max_width` - (String)
          * `:max_height` - (String)
          * `:sizing_policy` - (String)
          * `:horizontal_align` - (String)
          * `:horizontal_offset` - (String)
          * `:vertical_align` - (String)
          * `:vertical_offset` - (String)
          * `:opacity` - (String)
          * `:target` - (String)
      * `:thumbnails` - (Hash)
        * `:format` - (String)
        * `:interval` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:max_width` - (String)
        * `:max_height` - (String)
        * `:sizing_policy` - (String)
        * `:padding_policy` - (String)
      * `:type` - (String)
    * `:next_page_token` - (String)
:read_job: |-
  Calls the GET ReadJob API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the job for which you want to get detailed information.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:job` - (Hash)
      * `:id` - (String)
      * `:arn` - (String)
      * `:pipeline_id` - (String)
      * `:input` - (Hash)
        * `:key` - (String)
        * `:frame_rate` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:interlaced` - (String)
        * `:container` - (String)
      * `:output` - (Hash)
        * `:id` - (String)
        * `:key` - (String)
        * `:thumbnail_pattern` - (String)
        * `:rotate` - (String)
        * `:preset_id` - (String)
        * `:segment_duration` - (String)
        * `:status` - (String)
        * `:status_detail` - (String)
        * `:duration` - (Integer)
        * `:width` - (Integer)
        * `:height` - (Integer)
        * `:watermarks` - (Array<Hash>)
          * `:preset_watermark_id` - (String)
          * `:input_key` - (String)
        * `:album_art` - (Hash)
          * `:merge_policy` - (String)
          * `:artwork` - (Array<Hash>)
            * `:input_key` - (String)
            * `:max_width` - (String)
            * `:max_height` - (String)
            * `:sizing_policy` - (String)
            * `:padding_policy` - (String)
            * `:album_art_format` - (String)
        * `:composition` - (Array<Hash>)
          * `:time_span` - (Hash)
            * `:start_time` - (String)
            * `:duration` - (String)
      * `:outputs` - (Array<Hash>)
        * `:id` - (String)
        * `:key` - (String)
        * `:thumbnail_pattern` - (String)
        * `:rotate` - (String)
        * `:preset_id` - (String)
        * `:segment_duration` - (String)
        * `:status` - (String)
        * `:status_detail` - (String)
        * `:duration` - (Integer)
        * `:width` - (Integer)
        * `:height` - (Integer)
        * `:watermarks` - (Array<Hash>)
          * `:preset_watermark_id` - (String)
          * `:input_key` - (String)
        * `:album_art` - (Hash)
          * `:merge_policy` - (String)
          * `:artwork` - (Array<Hash>)
            * `:input_key` - (String)
            * `:max_width` - (String)
            * `:max_height` - (String)
            * `:sizing_policy` - (String)
            * `:padding_policy` - (String)
            * `:album_art_format` - (String)
        * `:composition` - (Array<Hash>)
          * `:time_span` - (Hash)
            * `:start_time` - (String)
            * `:duration` - (String)
      * `:output_key_prefix` - (String)
      * `:playlists` - (Array<Hash>)
        * `:name` - (String)
        * `:format` - (String)
        * `:output_keys` - (Array<String>)
        * `:status` - (String)
        * `:status_detail` - (String)
      * `:status` - (String)
:read_pipeline: |-
  Calls the GET ReadPipeline API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the pipeline to read.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:pipeline` - (Hash)
      * `:id` - (String)
      * `:arn` - (String)
      * `:name` - (String)
      * `:status` - (String)
      * `:input_bucket` - (String)
      * `:output_bucket` - (String)
      * `:role` - (String)
      * `:notifications` - (Hash)
        * `:progressing` - (String)
        * `:completed` - (String)
        * `:warning` - (String)
        * `:error` - (String)
      * `:content_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
      * `:thumbnail_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
:read_preset: |-
  Calls the GET ReadPreset API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the preset for which you want to get detailed information.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:preset` - (Hash)
      * `:id` - (String)
      * `:arn` - (String)
      * `:name` - (String)
      * `:description` - (String)
      * `:container` - (String)
      * `:audio` - (Hash)
        * `:codec` - (String)
        * `:sample_rate` - (String)
        * `:bit_rate` - (String)
        * `:channels` - (String)
        * `:codec_options` - (Hash)
          * `:profile` - (String)
      * `:video` - (Hash)
        * `:codec` - (String)
        * `:codec_options` - (Hash<String,String>)
        * `:keyframes_max_dist` - (String)
        * `:fixed_gop` - (String)
        * `:bit_rate` - (String)
        * `:frame_rate` - (String)
        * `:max_frame_rate` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:max_width` - (String)
        * `:max_height` - (String)
        * `:display_aspect_ratio` - (String)
        * `:sizing_policy` - (String)
        * `:padding_policy` - (String)
        * `:watermarks` - (Array<Hash>)
          * `:id` - (String)
          * `:max_width` - (String)
          * `:max_height` - (String)
          * `:sizing_policy` - (String)
          * `:horizontal_align` - (String)
          * `:horizontal_offset` - (String)
          * `:vertical_align` - (String)
          * `:vertical_offset` - (String)
          * `:opacity` - (String)
          * `:target` - (String)
      * `:thumbnails` - (Hash)
        * `:format` - (String)
        * `:interval` - (String)
        * `:resolution` - (String)
        * `:aspect_ratio` - (String)
        * `:max_width` - (String)
        * `:max_height` - (String)
        * `:sizing_policy` - (String)
        * `:padding_policy` - (String)
      * `:type` - (String)
:test_role: "Calls the POST TestRole API operation.\n@param [Hash] options\n  * `:role`
  - (String) The IAM Amazon Resource Name (ARN) for the role that you want Elastic
  Transcoder to test.\n  * `:input_bucket` - (String) The Amazon S3 bucket that contains
  media files to be transcoded. The action attempts to read from this bucket.\n  *
  `:output_bucket` - (String) The Amazon S3 bucket that Elastic Transcoder will write
  transcoded media files to. The action attempts to read from this bucket.\n  * `:topics`
  - (Array&lt;String>) The ARNs of one or more Amazon Simple Notification Service
  (Amazon SNS) topics that you want the action to send a test notification to.\n  *
  `:member` - (String) \n@return [Core::Response] The `#data` method of the response
  object returns a hash with the following structure:\n\n  * `:success` - (String)\n
  \ * `:messages` - (Array<String>)"
:update_pipeline: "Calls the PUT UpdatePipeline API operation.\n@param [Hash] options\n
  \ * `:id` - *required* - (String) The ID of the pipeline that you want to update.\n
  \ * `:name` - (String) The name of the pipeline. We recommend that the name be unique
  within the AWS account, but uniqueness is not enforced. Constraints: Maximum 40
  characters\n  * `:input_bucket` - (String) The Amazon S3 bucket in which you saved
  the media files that you want to transcode and the graphics that you want to use
  as watermarks.\n  * `:role` - (String) The IAM Amazon Resource Name (ARN) for the
  role that you want Elastic Transcoder to use to transcode jobs for this pipeline.\n
  \ * `:notifications` - (Hash) \n    * `:progressing` - (String) The Amazon Simple
  Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder
  has started to process the job.\n    * `:completed` - (String) The Amazon SNS topic
  that you want to notify when Elastic Transcoder has finished processing the job.\n
  \   * `:warning` - (String) The Amazon SNS topic that you want to notify when Elastic
  Transcoder encounters a warning condition.\n    * `:error` - (String) The Amazon
  SNS topic that you want to notify when Elastic Transcoder encounters an error condition.\n
  \ * `:content_config` - (Hash) The optional ContentConfig object specifies information
  about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded
  files and playlists: which bucket to use, which users you want to have access to
  the files, the type of access you want users to have, and the storage class that
  you want to assign to the files. If you specify values for ContentConfig, you must
  also specify values for ThumbnailConfig. If you specify values for ContentConfig
  and ThumbnailConfig, omit the OutputBucket object. Bucket: The Amazon S3 bucket
  in which you want Elastic Transcoder to save transcoded files and playlists. Permissions
  (Optional): The Permissions object specifies which users you want to have access
  to transcoded files and the type of access you want them to have. You can grant
  permissions to a maximum of 30 users and/or predefined Amazon S3 groups. Grantee
  Type: Specify the type of value that appears in the Grantee object: Canonical: The
  value in the Grantee object is either the canonical user ID for an AWS account or
  an origin access identity for an Amazon CloudFront distribution. For more information
  about canonical user IDs, see Access Control List (ACL) Overview in the Amazon Simple
  Storage Service Developer Guide. For more information about using CloudFront origin
  access identities to require that users use CloudFront URLs instead of Amazon S3
  URLs, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content.
  A canonical user ID is not the same as an AWS account number. Email: The value in
  the Grantee object is the registered email address of an AWS account. Group: The
  value in the Grantee object is one of the following predefined Amazon S3 groups:
  AllUsers, AuthenticatedUsers, or LogDelivery. Grantee: The AWS user or group that
  you want to have access to transcoded files and playlists. To identify the user
  or group, you can specify the canonical user ID for an AWS account, an origin access
  identity for a CloudFront distribution, the registered email address of an AWS account,
  or a predefined Amazon S3 group Access: The permission that you want to give to
  the AWS user that you specified in Grantee. Permissions are granted on the files
  that Elastic Transcoder adds to the bucket, including playlists and video files.
  Valid values include: READ: The grantee can read the objects and metadata for objects
  that Elastic Transcoder adds to the Amazon S3 bucket. READ_ACP: The grantee can
  read the object ACL for objects that Elastic Transcoder adds to the Amazon S3 bucket.
  WRITE_ACP: The grantee can write the ACL for the objects that Elastic Transcoder
  adds to the Amazon S3 bucket. FULL_CONTROL: The grantee has READ, READ_ACP, and
  WRITE_ACP permissions for the objects that Elastic Transcoder adds to the Amazon
  S3 bucket. StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy,
  that you want Elastic Transcoder to assign to the video files and playlists that
  it stores in your Amazon S3 bucket.\n    * `:bucket` - (String) The Amazon S3 bucket
  in which you want Elastic Transcoder to save the transcoded files. Specify this
  value when all of the following are  `true` : You want to save transcoded files,
  thumbnails (if any), and playlists (if any) together in one bucket. You do not want
  to specify the users or groups who have access to the transcoded files, thumbnails,
  and playlists. You do not want to specify the permissions that Elastic Transcoder
  grants to the files. You want to associate the transcoded files and thumbnails with
  the Amazon S3 Standard storage class. If you want to save transcoded files and playlists
  in one bucket and thumbnails in another bucket, specify which users can access the
  transcoded files or the permissions the users have, or change the Amazon S3 storage
  class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig
  instead.\n    * `:storage_class` - (String) The Amazon S3 storage class, Standard
  or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files
  and playlists that it stores in your Amazon S3 bucket.\n    * `:permissions` - (Array&lt;Hash>)
  Optional. The Permissions object specifies which users and/or predefined Amazon
  S3 groups you want to have access to transcoded files and playlists, and the type
  of access you want them to have. You can grant permissions to a maximum of 30 users
  and/or predefined Amazon S3 groups. If you include Permissions, Elastic Transcoder
  grants only the permissions that you specify. It does not grant full permissions
  to the owner of the role specified by Role. If you want that user to have full control,
  you must explicitly grant full control to the user. If you omit Permissions, Elastic
  Transcoder grants full control over the transcoded files and playlists to the owner
  of the role specified by Role, and grants no other permissions to any other user
  or group.\n    * `:member` - (Hash) \n      * `:grantee_type` - (String) The type
  of value that appears in the Grantee object: Canonical: Either the canonical user
  ID for an AWS account or an origin access identity for an Amazon CloudFront distribution.
  A canonical user ID is not the same as an AWS account number. Email: The registered
  email address of an AWS account. Group: One of the following predefined Amazon S3
  groups: AllUsers, AuthenticatedUsers, or LogDelivery.\n      * `:grantee` - (String)
  The AWS user or group that you want to have access to transcoded files and playlists.
  To identify the user or group, you can specify the canonical user ID for an AWS
  account, an origin access identity for a CloudFront distribution, the registered
  email address of an AWS account, or a predefined Amazon S3 group.\n      * `:access`
  - (Array&lt;String>) The permission that you want to give to the AWS user that is
  listed in Grantee. Valid values include: READ: The grantee can read the thumbnails
  and metadata for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
  READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket. WRITE_ACP: The grantee can write the ACL for the thumbnails
  that Elastic Transcoder adds to the Amazon S3 bucket. FULL_CONTROL: The grantee
  has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket.\n      * `:member` - (String) \n  * `:thumbnail_config`
  - (Hash) The ThumbnailConfig object specifies several values, including the Amazon
  S3 bucket in which you want Elastic Transcoder to save thumbnail files, which users
  you want to have access to the files, the type of access you want users to have,
  and the storage class that you want to assign to the files. If you specify values
  for ContentConfig, you must also specify values for ThumbnailConfig even if you
  don't want to create thumbnails. If you specify values for ContentConfig and ThumbnailConfig,
  omit the OutputBucket object. Bucket: The Amazon S3 bucket in which you want Elastic
  Transcoder to save thumbnail files. Permissions (Optional): The Permissions object
  specifies which users and/or predefined Amazon S3 groups you want to have access
  to thumbnail files, and the type of access you want them to have. You can grant
  permissions to a maximum of 30 users and/or predefined Amazon S3 groups. GranteeType:
  Specify the type of value that appears in the Grantee object: Canonical: The value
  in the Grantee object is either the canonical user ID for an AWS account or an origin
  access identity for an Amazon CloudFront distribution. A canonical user ID is not
  the same as an AWS account number. Email: The value in the Grantee object is the
  registered email address of an AWS account. Group: The value in the Grantee object
  is one of the following predefined Amazon S3 groups: AllUsers, AuthenticatedUsers,
  or LogDelivery. Grantee: The AWS user or group that you want to have access to thumbnail
  files. To identify the user or group, you can specify the canonical user ID for
  an AWS account, an origin access identity for a CloudFront distribution, the registered
  email address of an AWS account, or a predefined Amazon S3 group. Access: The permission
  that you want to give to the AWS user that you specified in Grantee. Permissions
  are granted on the thumbnail files that Elastic Transcoder adds to the bucket. Valid
  values include: READ: The grantee can read the thumbnails and metadata for objects
  that Elastic Transcoder adds to the Amazon S3 bucket. READ_ACP: The grantee can
  read the object ACL for thumbnails that Elastic Transcoder adds to the Amazon S3
  bucket. WRITE_ACP: The grantee can write the ACL for the thumbnails that Elastic
  Transcoder adds to the Amazon S3 bucket. FULL_CONTROL: The grantee has READ, READ_ACP,
  and WRITE_ACP permissions for the thumbnails that Elastic Transcoder adds to the
  Amazon S3 bucket. StorageClass: The Amazon S3 storage class, Standard or ReducedRedundancy,
  that you want Elastic Transcoder to assign to the thumbnails that it stores in your
  Amazon S3 bucket.\n    * `:bucket` - (String) The Amazon S3 bucket in which you
  want Elastic Transcoder to save the transcoded files. Specify this value when all
  of the following are  `true` : You want to save transcoded files, thumbnails (if
  any), and playlists (if any) together in one bucket. You do not want to specify
  the users or groups who have access to the transcoded files, thumbnails, and playlists.
  You do not want to specify the permissions that Elastic Transcoder grants to the
  files. You want to associate the transcoded files and thumbnails with the Amazon
  S3 Standard storage class. If you want to save transcoded files and playlists in
  one bucket and thumbnails in another bucket, specify which users can access the
  transcoded files or the permissions the users have, or change the Amazon S3 storage
  class, omit OutputBucket and specify values for ContentConfig and ThumbnailConfig
  instead.\n    * `:storage_class` - (String) The Amazon S3 storage class, Standard
  or ReducedRedundancy, that you want Elastic Transcoder to assign to the video files
  and playlists that it stores in your Amazon S3 bucket.\n    * `:permissions` - (Array&lt;Hash>)
  Optional. The Permissions object specifies which users and/or predefined Amazon
  S3 groups you want to have access to transcoded files and playlists, and the type
  of access you want them to have. You can grant permissions to a maximum of 30 users
  and/or predefined Amazon S3 groups. If you include Permissions, Elastic Transcoder
  grants only the permissions that you specify. It does not grant full permissions
  to the owner of the role specified by Role. If you want that user to have full control,
  you must explicitly grant full control to the user. If you omit Permissions, Elastic
  Transcoder grants full control over the transcoded files and playlists to the owner
  of the role specified by Role, and grants no other permissions to any other user
  or group.\n    * `:member` - (Hash) \n      * `:grantee_type` - (String) The type
  of value that appears in the Grantee object: Canonical: Either the canonical user
  ID for an AWS account or an origin access identity for an Amazon CloudFront distribution.
  A canonical user ID is not the same as an AWS account number. Email: The registered
  email address of an AWS account. Group: One of the following predefined Amazon S3
  groups: AllUsers, AuthenticatedUsers, or LogDelivery.\n      * `:grantee` - (String)
  The AWS user or group that you want to have access to transcoded files and playlists.
  To identify the user or group, you can specify the canonical user ID for an AWS
  account, an origin access identity for a CloudFront distribution, the registered
  email address of an AWS account, or a predefined Amazon S3 group.\n      * `:access`
  - (Array&lt;String>) The permission that you want to give to the AWS user that is
  listed in Grantee. Valid values include: READ: The grantee can read the thumbnails
  and metadata for thumbnails that Elastic Transcoder adds to the Amazon S3 bucket.
  READ_ACP: The grantee can read the object ACL for thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket. WRITE_ACP: The grantee can write the ACL for the thumbnails
  that Elastic Transcoder adds to the Amazon S3 bucket. FULL_CONTROL: The grantee
  has READ, READ_ACP, and WRITE_ACP permissions for the thumbnails that Elastic Transcoder
  adds to the Amazon S3 bucket.\n      * `:member` - (String) \n@return [Core::Response]
  The `#data` method of the response object returns a hash with the following structure:\n\n
  \ * `:pipeline` - (Hash)\n    * `:id` - (String)\n    * `:arn` - (String)\n    *
  `:name` - (String)\n    * `:status` - (String)\n    * `:input_bucket` - (String)\n
  \   * `:output_bucket` - (String)\n    * `:role` - (String)\n    * `:notifications`
  - (Hash)\n      * `:progressing` - (String)\n      * `:completed` - (String)\n      *
  `:warning` - (String)\n      * `:error` - (String)\n    * `:content_config` - (Hash)\n
  \     * `:bucket` - (String)\n      * `:storage_class` - (String)\n      * `:permissions`
  - (Array<Hash>)\n        * `:grantee_type` - (String)\n        * `:grantee` - (String)\n
  \       * `:access` - (Array<String>)\n    * `:thumbnail_config` - (Hash)\n      *
  `:bucket` - (String)\n      * `:storage_class` - (String)\n      * `:permissions`
  - (Array<Hash>)\n        * `:grantee_type` - (String)\n        * `:grantee` - (String)\n
  \       * `:access` - (Array<String>)"
:update_pipeline_notifications: |-
  Calls the POST UpdatePipelineNotifications API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the pipeline for which you want to change notification settings.
    * `:notifications` - (Hash) The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. To receive notifications, you must also subscribe to the new topic in the Amazon SNS console. Progressing: The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process jobs that are added to this pipeline. This is the ARN that Amazon SNS returned when you created the topic. Completed: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job. This is the ARN that Amazon SNS returned when you created the topic. Warning: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition. This is the ARN that Amazon SNS returned when you created the topic. Error: The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition. This is the ARN that Amazon SNS returned when you created the topic.
      * `:progressing` - (String) The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process the job.
      * `:completed` - (String) The Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing the job.
      * `:warning` - (String) The Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition.
      * `:error` - (String) The Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:pipeline` - (Hash)
      * `:id` - (String)
      * `:arn` - (String)
      * `:name` - (String)
      * `:status` - (String)
      * `:input_bucket` - (String)
      * `:output_bucket` - (String)
      * `:role` - (String)
      * `:notifications` - (Hash)
        * `:progressing` - (String)
        * `:completed` - (String)
        * `:warning` - (String)
        * `:error` - (String)
      * `:content_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
      * `:thumbnail_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
:update_pipeline_status: |-
  Calls the POST UpdatePipelineStatus API operation.
  @param [Hash] options
    * `:id` - *required* - (String) The identifier of the pipeline to update.
    * `:status` - (String) The desired status of the pipeline: Active: The pipeline is processing jobs. Paused: The pipeline is not currently processing jobs.
  @return [Core::Response] The `#data` method of the response object returns a hash with the following structure:

    * `:pipeline` - (Hash)
      * `:id` - (String)
      * `:arn` - (String)
      * `:name` - (String)
      * `:status` - (String)
      * `:input_bucket` - (String)
      * `:output_bucket` - (String)
      * `:role` - (String)
      * `:notifications` - (Hash)
        * `:progressing` - (String)
        * `:completed` - (String)
        * `:warning` - (String)
        * `:error` - (String)
      * `:content_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
      * `:thumbnail_config` - (Hash)
        * `:bucket` - (String)
        * `:storage_class` - (String)
        * `:permissions` - (Array<Hash>)
          * `:grantee_type` - (String)
          * `:grantee` - (String)
          * `:access` - (Array<String>)
