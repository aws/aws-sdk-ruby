# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module S3
    # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html
    class BucketNotification
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#initialize-instance_method
      def initialize: (String bucket_name, Hash[Symbol, untyped] options) -> void
                    | (bucket_name: String, ?client: Client) -> void
                    | (Hash[Symbol, untyped] args) -> void

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#bucket_name-instance_method
      def bucket_name: () -> String

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#topic_configurations-instance_method
      def topic_configurations: () -> ::Array[Types::TopicConfiguration]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#queue_configurations-instance_method
      def queue_configurations: () -> ::Array[Types::QueueConfiguration]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#lambda_function_configurations-instance_method
      def lambda_function_configurations: () -> ::Array[Types::LambdaFunctionConfiguration]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#event_bridge_configuration-instance_method
      def event_bridge_configuration: () -> Types::EventBridgeConfiguration

      def client: () -> Client

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#load-instance_method
      def load: () -> self
      alias reload load

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#data-instance_method
      def data: () -> Types::NotificationConfiguration

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#data_loaded?-instance_method
      def data_loaded?: () -> bool


      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#put-instance_method
      def put: (
                 notification_configuration: {
                   topic_configurations: Array[
                     {
                       id: ::String?,
                       topic_arn: ::String,
                       events: Array[("s3:ReducedRedundancyLostObject" | "s3:ObjectCreated:*" | "s3:ObjectCreated:Put" | "s3:ObjectCreated:Post" | "s3:ObjectCreated:Copy" | "s3:ObjectCreated:CompleteMultipartUpload" | "s3:ObjectRemoved:*" | "s3:ObjectRemoved:Delete" | "s3:ObjectRemoved:DeleteMarkerCreated" | "s3:ObjectRestore:*" | "s3:ObjectRestore:Post" | "s3:ObjectRestore:Completed" | "s3:Replication:*" | "s3:Replication:OperationFailedReplication" | "s3:Replication:OperationNotTracked" | "s3:Replication:OperationMissedThreshold" | "s3:Replication:OperationReplicatedAfterThreshold" | "s3:ObjectRestore:Delete" | "s3:LifecycleTransition" | "s3:IntelligentTiering" | "s3:ObjectAcl:Put" | "s3:LifecycleExpiration:*" | "s3:LifecycleExpiration:Delete" | "s3:LifecycleExpiration:DeleteMarkerCreated" | "s3:ObjectTagging:*" | "s3:ObjectTagging:Put" | "s3:ObjectTagging:Delete")],
                       filter: {
                         key: {
                           filter_rules: Array[
                             {
                               name: ("prefix" | "suffix")?,
                               value: ::String?
                             },
                           ]?
                         }?
                       }?
                     },
                   ]?,
                   queue_configurations: Array[
                     {
                       id: ::String?,
                       queue_arn: ::String,
                       events: Array[("s3:ReducedRedundancyLostObject" | "s3:ObjectCreated:*" | "s3:ObjectCreated:Put" | "s3:ObjectCreated:Post" | "s3:ObjectCreated:Copy" | "s3:ObjectCreated:CompleteMultipartUpload" | "s3:ObjectRemoved:*" | "s3:ObjectRemoved:Delete" | "s3:ObjectRemoved:DeleteMarkerCreated" | "s3:ObjectRestore:*" | "s3:ObjectRestore:Post" | "s3:ObjectRestore:Completed" | "s3:Replication:*" | "s3:Replication:OperationFailedReplication" | "s3:Replication:OperationNotTracked" | "s3:Replication:OperationMissedThreshold" | "s3:Replication:OperationReplicatedAfterThreshold" | "s3:ObjectRestore:Delete" | "s3:LifecycleTransition" | "s3:IntelligentTiering" | "s3:ObjectAcl:Put" | "s3:LifecycleExpiration:*" | "s3:LifecycleExpiration:Delete" | "s3:LifecycleExpiration:DeleteMarkerCreated" | "s3:ObjectTagging:*" | "s3:ObjectTagging:Put" | "s3:ObjectTagging:Delete")],
                       filter: {
                         key: {
                           filter_rules: Array[
                             {
                               name: ("prefix" | "suffix")?,
                               value: ::String?
                             },
                           ]?
                         }?
                       }?
                     },
                   ]?,
                   lambda_function_configurations: Array[
                     {
                       id: ::String?,
                       lambda_function_arn: ::String,
                       events: Array[("s3:ReducedRedundancyLostObject" | "s3:ObjectCreated:*" | "s3:ObjectCreated:Put" | "s3:ObjectCreated:Post" | "s3:ObjectCreated:Copy" | "s3:ObjectCreated:CompleteMultipartUpload" | "s3:ObjectRemoved:*" | "s3:ObjectRemoved:Delete" | "s3:ObjectRemoved:DeleteMarkerCreated" | "s3:ObjectRestore:*" | "s3:ObjectRestore:Post" | "s3:ObjectRestore:Completed" | "s3:Replication:*" | "s3:Replication:OperationFailedReplication" | "s3:Replication:OperationNotTracked" | "s3:Replication:OperationMissedThreshold" | "s3:Replication:OperationReplicatedAfterThreshold" | "s3:ObjectRestore:Delete" | "s3:LifecycleTransition" | "s3:IntelligentTiering" | "s3:ObjectAcl:Put" | "s3:LifecycleExpiration:*" | "s3:LifecycleExpiration:Delete" | "s3:LifecycleExpiration:DeleteMarkerCreated" | "s3:ObjectTagging:*" | "s3:ObjectTagging:Put" | "s3:ObjectTagging:Delete")],
                       filter: {
                         key: {
                           filter_rules: Array[
                             {
                               name: ("prefix" | "suffix")?,
                               value: ::String?
                             },
                           ]?
                         }?
                       }?
                     },
                   ]?,
                   event_bridge_configuration: {
                   }?
                 },
                 ?expected_bucket_owner: ::String,
                 ?skip_destination_validation: bool
               ) -> ::Aws::EmptyStructure
             | (?Hash[Symbol, untyped]) -> ::Aws::EmptyStructure

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/BucketNotification.html#bucket-instance_method
      def bucket: () -> Bucket

      class Collection < ::Aws::Resources::Collection[BucketNotification]
      end
    end
  end
end
