# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module RDS
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#add_role_to_db_cluster-instance_method
      def add_role_to_db_cluster: (
                                    db_cluster_identifier: ::String,
                                    role_arn: ::String,
                                    ?feature_name: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#add_role_to_db_instance-instance_method
      def add_role_to_db_instance: (
                                     db_instance_identifier: ::String,
                                     role_arn: ::String,
                                     feature_name: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _AddSourceIdentifierToSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AddSourceIdentifierToSubscriptionResult]
        def event_subscription: () -> Types::EventSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#add_source_identifier_to_subscription-instance_method
      def add_source_identifier_to_subscription: (
                                                   subscription_name: ::String,
                                                   source_identifier: ::String
                                                 ) -> _AddSourceIdentifierToSubscriptionResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AddSourceIdentifierToSubscriptionResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#add_tags_to_resource-instance_method
      def add_tags_to_resource: (
                                  resource_name: ::String,
                                  tags: Array[
                                    {
                                      key: ::String?,
                                      value: ::String?
                                    },
                                  ]
                                ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ApplyPendingMaintenanceActionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ApplyPendingMaintenanceActionResult]
        def resource_pending_maintenance_actions: () -> Types::ResourcePendingMaintenanceActions
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#apply_pending_maintenance_action-instance_method
      def apply_pending_maintenance_action: (
                                              resource_identifier: ::String,
                                              apply_action: ::String,
                                              opt_in_type: ::String
                                            ) -> _ApplyPendingMaintenanceActionResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ApplyPendingMaintenanceActionResponseSuccess

      interface _AuthorizeDBSecurityGroupIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AuthorizeDBSecurityGroupIngressResult]
        def db_security_group: () -> Types::DBSecurityGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#authorize_db_security_group_ingress-instance_method
      def authorize_db_security_group_ingress: (
                                                 db_security_group_name: ::String,
                                                 ?cidrip: ::String,
                                                 ?ec2_security_group_name: ::String,
                                                 ?ec2_security_group_id: ::String,
                                                 ?ec2_security_group_owner_id: ::String
                                               ) -> _AuthorizeDBSecurityGroupIngressResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AuthorizeDBSecurityGroupIngressResponseSuccess

      interface _BacktrackDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterBacktrack]
        def db_cluster_identifier: () -> ::String
        def backtrack_identifier: () -> ::String
        def backtrack_to: () -> ::Time
        def backtracked_from: () -> ::Time
        def backtrack_request_creation_time: () -> ::Time
        def status: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#backtrack_db_cluster-instance_method
      def backtrack_db_cluster: (
                                  db_cluster_identifier: ::String,
                                  backtrack_to: ::Time,
                                  ?force: bool,
                                  ?use_earliest_time_on_point_in_time_unavailable: bool
                                ) -> _BacktrackDBClusterResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BacktrackDBClusterResponseSuccess

      interface _CancelExportTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportTask]
        def export_task_identifier: () -> ::String
        def source_arn: () -> ::String
        def export_only: () -> ::Array[::String]
        def snapshot_time: () -> ::Time
        def task_start_time: () -> ::Time
        def task_end_time: () -> ::Time
        def s3_bucket: () -> ::String
        def s3_prefix: () -> ::String
        def iam_role_arn: () -> ::String
        def kms_key_id: () -> ::String
        def status: () -> ::String
        def percent_progress: () -> ::Integer
        def total_extracted_data_in_gb: () -> ::Integer
        def failure_cause: () -> ::String
        def warning_message: () -> ::String
        def source_type: () -> ("SNAPSHOT" | "CLUSTER")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#cancel_export_task-instance_method
      def cancel_export_task: (
                                export_task_identifier: ::String
                              ) -> _CancelExportTaskResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelExportTaskResponseSuccess

      interface _CopyDBClusterParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyDBClusterParameterGroupResult]
        def db_cluster_parameter_group: () -> Types::DBClusterParameterGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#copy_db_cluster_parameter_group-instance_method
      def copy_db_cluster_parameter_group: (
                                             source_db_cluster_parameter_group_identifier: ::String,
                                             target_db_cluster_parameter_group_identifier: ::String,
                                             target_db_cluster_parameter_group_description: ::String,
                                             ?tags: Array[
                                               {
                                                 key: ::String?,
                                                 value: ::String?
                                               },
                                             ]
                                           ) -> _CopyDBClusterParameterGroupResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyDBClusterParameterGroupResponseSuccess

      interface _CopyDBClusterSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyDBClusterSnapshotResult]
        def db_cluster_snapshot: () -> Types::DBClusterSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#copy_db_cluster_snapshot-instance_method
      def copy_db_cluster_snapshot: (
                                      source_db_cluster_snapshot_identifier: ::String,
                                      target_db_cluster_snapshot_identifier: ::String,
                                      ?kms_key_id: ::String,
                                      ?pre_signed_url: ::String,
                                      ?copy_tags: bool,
                                      ?tags: Array[
                                        {
                                          key: ::String?,
                                          value: ::String?
                                        },
                                      ],
                                      ?source_region: ::String
                                    ) -> _CopyDBClusterSnapshotResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyDBClusterSnapshotResponseSuccess

      interface _CopyDBParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyDBParameterGroupResult]
        def db_parameter_group: () -> Types::DBParameterGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#copy_db_parameter_group-instance_method
      def copy_db_parameter_group: (
                                     source_db_parameter_group_identifier: ::String,
                                     target_db_parameter_group_identifier: ::String,
                                     target_db_parameter_group_description: ::String,
                                     ?tags: Array[
                                       {
                                         key: ::String?,
                                         value: ::String?
                                       },
                                     ]
                                   ) -> _CopyDBParameterGroupResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyDBParameterGroupResponseSuccess

      interface _CopyDBSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyDBSnapshotResult]
        def db_snapshot: () -> Types::DBSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#copy_db_snapshot-instance_method
      def copy_db_snapshot: (
                              source_db_snapshot_identifier: ::String,
                              target_db_snapshot_identifier: ::String,
                              ?kms_key_id: ::String,
                              ?tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ],
                              ?copy_tags: bool,
                              ?pre_signed_url: ::String,
                              ?option_group_name: ::String,
                              ?target_custom_availability_zone: ::String,
                              ?copy_option_group: bool,
                              ?source_region: ::String
                            ) -> _CopyDBSnapshotResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyDBSnapshotResponseSuccess

      interface _CopyOptionGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyOptionGroupResult]
        def option_group: () -> Types::OptionGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#copy_option_group-instance_method
      def copy_option_group: (
                               source_option_group_identifier: ::String,
                               target_option_group_identifier: ::String,
                               target_option_group_description: ::String,
                               ?tags: Array[
                                 {
                                   key: ::String?,
                                   value: ::String?
                                 },
                               ]
                             ) -> _CopyOptionGroupResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyOptionGroupResponseSuccess

      interface _CreateBlueGreenDeploymentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateBlueGreenDeploymentResponse]
        def blue_green_deployment: () -> Types::BlueGreenDeployment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_blue_green_deployment-instance_method
      def create_blue_green_deployment: (
                                          blue_green_deployment_name: ::String,
                                          source: ::String,
                                          ?target_engine_version: ::String,
                                          ?target_db_parameter_group_name: ::String,
                                          ?target_db_cluster_parameter_group_name: ::String,
                                          ?tags: Array[
                                            {
                                              key: ::String?,
                                              value: ::String?
                                            },
                                          ],
                                          ?target_db_instance_class: ::String,
                                          ?upgrade_target_storage_config: bool
                                        ) -> _CreateBlueGreenDeploymentResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateBlueGreenDeploymentResponseSuccess

      interface _CreateCustomDBEngineVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBEngineVersion]
        def engine: () -> ::String
        def engine_version: () -> ::String
        def db_parameter_group_family: () -> ::String
        def db_engine_description: () -> ::String
        def db_engine_version_description: () -> ::String
        def default_character_set: () -> Types::CharacterSet
        def image: () -> Types::CustomDBEngineVersionAMI
        def db_engine_media_type: () -> ::String
        def supported_character_sets: () -> ::Array[Types::CharacterSet]
        def supported_nchar_character_sets: () -> ::Array[Types::CharacterSet]
        def valid_upgrade_target: () -> ::Array[Types::UpgradeTarget]
        def supported_timezones: () -> ::Array[Types::Timezone]
        def exportable_log_types: () -> ::Array[::String]
        def supports_log_exports_to_cloudwatch_logs: () -> bool
        def supports_read_replica: () -> bool
        def supported_engine_modes: () -> ::Array[::String]
        def supported_feature_names: () -> ::Array[::String]
        def status: () -> ::String
        def supports_parallel_query: () -> bool
        def supports_global_databases: () -> bool
        def major_engine_version: () -> ::String
        def database_installation_files_s3_bucket_name: () -> ::String
        def database_installation_files_s3_prefix: () -> ::String
        def db_engine_version_arn: () -> ::String
        def kms_key_id: () -> ::String
        def create_time: () -> ::Time
        def tag_list: () -> ::Array[Types::Tag]
        def supports_babelfish: () -> bool
        def custom_db_engine_version_manifest: () -> ::String
        def supports_certificate_rotation_without_restart: () -> bool
        def supported_ca_certificate_identifiers: () -> ::Array[::String]
        def supports_local_write_forwarding: () -> bool
        def supports_integrations: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_custom_db_engine_version-instance_method
      def create_custom_db_engine_version: (
                                             engine: ::String,
                                             engine_version: ::String,
                                             ?database_installation_files_s3_bucket_name: ::String,
                                             ?database_installation_files_s3_prefix: ::String,
                                             ?image_id: ::String,
                                             ?kms_key_id: ::String,
                                             ?description: ::String,
                                             ?manifest: ::String,
                                             ?tags: Array[
                                               {
                                                 key: ::String?,
                                                 value: ::String?
                                               },
                                             ],
                                             ?source_custom_db_engine_version_identifier: ::String,
                                             ?use_aws_provided_latest_image: bool
                                           ) -> _CreateCustomDBEngineVersionResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCustomDBEngineVersionResponseSuccess

      interface _CreateDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_cluster-instance_method
      def create_db_cluster: (
                               ?availability_zones: Array[::String],
                               ?backup_retention_period: ::Integer,
                               ?character_set_name: ::String,
                               ?database_name: ::String,
                               db_cluster_identifier: ::String,
                               ?db_cluster_parameter_group_name: ::String,
                               ?vpc_security_group_ids: Array[::String],
                               ?db_subnet_group_name: ::String,
                               engine: ::String,
                               ?engine_version: ::String,
                               ?port: ::Integer,
                               ?master_username: ::String,
                               ?master_user_password: ::String,
                               ?option_group_name: ::String,
                               ?preferred_backup_window: ::String,
                               ?preferred_maintenance_window: ::String,
                               ?replication_source_identifier: ::String,
                               ?tags: Array[
                                 {
                                   key: ::String?,
                                   value: ::String?
                                 },
                               ],
                               ?storage_encrypted: bool,
                               ?kms_key_id: ::String,
                               ?pre_signed_url: ::String,
                               ?enable_iam_database_authentication: bool,
                               ?backtrack_window: ::Integer,
                               ?enable_cloudwatch_logs_exports: Array[::String],
                               ?engine_mode: ::String,
                               ?scaling_configuration: {
                                 min_capacity: ::Integer?,
                                 max_capacity: ::Integer?,
                                 auto_pause: bool?,
                                 seconds_until_auto_pause: ::Integer?,
                                 timeout_action: ::String?,
                                 seconds_before_timeout: ::Integer?
                               },
                               ?rds_custom_cluster_configuration: {
                                 interconnect_subnet_id: ::String?,
                                 transit_gateway_multicast_domain_id: ::String?,
                                 replica_mode: ("open-read-only" | "mounted")?
                               },
                               ?deletion_protection: bool,
                               ?global_cluster_identifier: ::String,
                               ?enable_http_endpoint: bool,
                               ?copy_tags_to_snapshot: bool,
                               ?domain: ::String,
                               ?domain_iam_role_name: ::String,
                               ?enable_global_write_forwarding: bool,
                               ?db_cluster_instance_class: ::String,
                               ?allocated_storage: ::Integer,
                               ?storage_type: ::String,
                               ?iops: ::Integer,
                               ?publicly_accessible: bool,
                               ?auto_minor_version_upgrade: bool,
                               ?monitoring_interval: ::Integer,
                               ?monitoring_role_arn: ::String,
                               ?enable_performance_insights: bool,
                               ?performance_insights_kms_key_id: ::String,
                               ?performance_insights_retention_period: ::Integer,
                               ?enable_limitless_database: bool,
                               ?serverless_v2_scaling_configuration: {
                                 min_capacity: ::Float?,
                                 max_capacity: ::Float?
                               },
                               ?network_type: ::String,
                               ?db_system_id: ::String,
                               ?manage_master_user_password: bool,
                               ?master_user_secret_kms_key_id: ::String,
                               ?enable_local_write_forwarding: bool,
                               ?source_region: ::String
                             ) -> _CreateDBClusterResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBClusterResponseSuccess

      interface _CreateDBClusterEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterEndpoint]
        def db_cluster_endpoint_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def db_cluster_endpoint_resource_identifier: () -> ::String
        def endpoint: () -> ::String
        def status: () -> ::String
        def endpoint_type: () -> ::String
        def custom_endpoint_type: () -> ::String
        def static_members: () -> ::Array[::String]
        def excluded_members: () -> ::Array[::String]
        def db_cluster_endpoint_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_cluster_endpoint-instance_method
      def create_db_cluster_endpoint: (
                                        db_cluster_identifier: ::String,
                                        db_cluster_endpoint_identifier: ::String,
                                        endpoint_type: ::String,
                                        ?static_members: Array[::String],
                                        ?excluded_members: Array[::String],
                                        ?tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]
                                      ) -> _CreateDBClusterEndpointResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBClusterEndpointResponseSuccess

      interface _CreateDBClusterParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBClusterParameterGroupResult]
        def db_cluster_parameter_group: () -> Types::DBClusterParameterGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_cluster_parameter_group-instance_method
      def create_db_cluster_parameter_group: (
                                               db_cluster_parameter_group_name: ::String,
                                               db_parameter_group_family: ::String,
                                               description: ::String,
                                               ?tags: Array[
                                                 {
                                                   key: ::String?,
                                                   value: ::String?
                                                 },
                                               ]
                                             ) -> _CreateDBClusterParameterGroupResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBClusterParameterGroupResponseSuccess

      interface _CreateDBClusterSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBClusterSnapshotResult]
        def db_cluster_snapshot: () -> Types::DBClusterSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_cluster_snapshot-instance_method
      def create_db_cluster_snapshot: (
                                        db_cluster_snapshot_identifier: ::String,
                                        db_cluster_identifier: ::String,
                                        ?tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]
                                      ) -> _CreateDBClusterSnapshotResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBClusterSnapshotResponseSuccess

      interface _CreateDBInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBInstanceResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_instance-instance_method
      def create_db_instance: (
                                ?db_name: ::String,
                                db_instance_identifier: ::String,
                                ?allocated_storage: ::Integer,
                                db_instance_class: ::String,
                                engine: ::String,
                                ?master_username: ::String,
                                ?master_user_password: ::String,
                                ?db_security_groups: Array[::String],
                                ?vpc_security_group_ids: Array[::String],
                                ?availability_zone: ::String,
                                ?db_subnet_group_name: ::String,
                                ?preferred_maintenance_window: ::String,
                                ?db_parameter_group_name: ::String,
                                ?backup_retention_period: ::Integer,
                                ?preferred_backup_window: ::String,
                                ?port: ::Integer,
                                ?multi_az: bool,
                                ?engine_version: ::String,
                                ?auto_minor_version_upgrade: bool,
                                ?license_model: ::String,
                                ?iops: ::Integer,
                                ?option_group_name: ::String,
                                ?character_set_name: ::String,
                                ?nchar_character_set_name: ::String,
                                ?publicly_accessible: bool,
                                ?tags: Array[
                                  {
                                    key: ::String?,
                                    value: ::String?
                                  },
                                ],
                                ?db_cluster_identifier: ::String,
                                ?storage_type: ::String,
                                ?tde_credential_arn: ::String,
                                ?tde_credential_password: ::String,
                                ?storage_encrypted: bool,
                                ?kms_key_id: ::String,
                                ?domain: ::String,
                                ?domain_fqdn: ::String,
                                ?domain_ou: ::String,
                                ?domain_auth_secret_arn: ::String,
                                ?domain_dns_ips: Array[::String],
                                ?copy_tags_to_snapshot: bool,
                                ?monitoring_interval: ::Integer,
                                ?monitoring_role_arn: ::String,
                                ?domain_iam_role_name: ::String,
                                ?promotion_tier: ::Integer,
                                ?timezone: ::String,
                                ?enable_iam_database_authentication: bool,
                                ?enable_performance_insights: bool,
                                ?performance_insights_kms_key_id: ::String,
                                ?performance_insights_retention_period: ::Integer,
                                ?enable_cloudwatch_logs_exports: Array[::String],
                                ?processor_features: Array[
                                  {
                                    name: ::String?,
                                    value: ::String?
                                  },
                                ],
                                ?deletion_protection: bool,
                                ?max_allocated_storage: ::Integer,
                                ?enable_customer_owned_ip: bool,
                                ?custom_iam_instance_profile: ::String,
                                ?backup_target: ::String,
                                ?network_type: ::String,
                                ?storage_throughput: ::Integer,
                                ?manage_master_user_password: bool,
                                ?master_user_secret_kms_key_id: ::String,
                                ?ca_certificate_identifier: ::String,
                                ?db_system_id: ::String,
                                ?dedicated_log_volume: bool,
                                ?multi_tenant: bool
                              ) -> _CreateDBInstanceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBInstanceResponseSuccess

      interface _CreateDBInstanceReadReplicaResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBInstanceReadReplicaResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_instance_read_replica-instance_method
      def create_db_instance_read_replica: (
                                             db_instance_identifier: ::String,
                                             ?source_db_instance_identifier: ::String,
                                             ?db_instance_class: ::String,
                                             ?availability_zone: ::String,
                                             ?port: ::Integer,
                                             ?multi_az: bool,
                                             ?auto_minor_version_upgrade: bool,
                                             ?iops: ::Integer,
                                             ?option_group_name: ::String,
                                             ?db_parameter_group_name: ::String,
                                             ?publicly_accessible: bool,
                                             ?tags: Array[
                                               {
                                                 key: ::String?,
                                                 value: ::String?
                                               },
                                             ],
                                             ?db_subnet_group_name: ::String,
                                             ?vpc_security_group_ids: Array[::String],
                                             ?storage_type: ::String,
                                             ?copy_tags_to_snapshot: bool,
                                             ?monitoring_interval: ::Integer,
                                             ?monitoring_role_arn: ::String,
                                             ?kms_key_id: ::String,
                                             ?pre_signed_url: ::String,
                                             ?enable_iam_database_authentication: bool,
                                             ?enable_performance_insights: bool,
                                             ?performance_insights_kms_key_id: ::String,
                                             ?performance_insights_retention_period: ::Integer,
                                             ?enable_cloudwatch_logs_exports: Array[::String],
                                             ?processor_features: Array[
                                               {
                                                 name: ::String?,
                                                 value: ::String?
                                               },
                                             ],
                                             ?use_default_processor_features: bool,
                                             ?deletion_protection: bool,
                                             ?domain: ::String,
                                             ?domain_iam_role_name: ::String,
                                             ?domain_fqdn: ::String,
                                             ?domain_ou: ::String,
                                             ?domain_auth_secret_arn: ::String,
                                             ?domain_dns_ips: Array[::String],
                                             ?replica_mode: ("open-read-only" | "mounted"),
                                             ?max_allocated_storage: ::Integer,
                                             ?custom_iam_instance_profile: ::String,
                                             ?network_type: ::String,
                                             ?storage_throughput: ::Integer,
                                             ?enable_customer_owned_ip: bool,
                                             ?allocated_storage: ::Integer,
                                             ?source_db_cluster_identifier: ::String,
                                             ?dedicated_log_volume: bool,
                                             ?upgrade_storage_config: bool,
                                             ?source_region: ::String
                                           ) -> _CreateDBInstanceReadReplicaResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBInstanceReadReplicaResponseSuccess

      interface _CreateDBParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBParameterGroupResult]
        def db_parameter_group: () -> Types::DBParameterGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_parameter_group-instance_method
      def create_db_parameter_group: (
                                       db_parameter_group_name: ::String,
                                       db_parameter_group_family: ::String,
                                       description: ::String,
                                       ?tags: Array[
                                         {
                                           key: ::String?,
                                           value: ::String?
                                         },
                                       ]
                                     ) -> _CreateDBParameterGroupResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBParameterGroupResponseSuccess

      interface _CreateDBProxyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBProxyResponse]
        def db_proxy: () -> Types::DBProxy
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_proxy-instance_method
      def create_db_proxy: (
                             db_proxy_name: ::String,
                             engine_family: ("MYSQL" | "POSTGRESQL" | "SQLSERVER"),
                             auth: Array[
                               {
                                 description: ::String?,
                                 user_name: ::String?,
                                 auth_scheme: ("SECRETS")?,
                                 secret_arn: ::String?,
                                 iam_auth: ("DISABLED" | "REQUIRED" | "ENABLED")?,
                                 client_password_auth_type: ("MYSQL_NATIVE_PASSWORD" | "POSTGRES_SCRAM_SHA_256" | "POSTGRES_MD5" | "SQL_SERVER_AUTHENTICATION")?
                               },
                             ],
                             role_arn: ::String,
                             vpc_subnet_ids: Array[::String],
                             ?vpc_security_group_ids: Array[::String],
                             ?require_tls: bool,
                             ?idle_client_timeout: ::Integer,
                             ?debug_logging: bool,
                             ?tags: Array[
                               {
                                 key: ::String?,
                                 value: ::String?
                               },
                             ]
                           ) -> _CreateDBProxyResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBProxyResponseSuccess

      interface _CreateDBProxyEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBProxyEndpointResponse]
        def db_proxy_endpoint: () -> Types::DBProxyEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_proxy_endpoint-instance_method
      def create_db_proxy_endpoint: (
                                      db_proxy_name: ::String,
                                      db_proxy_endpoint_name: ::String,
                                      vpc_subnet_ids: Array[::String],
                                      ?vpc_security_group_ids: Array[::String],
                                      ?target_role: ("READ_WRITE" | "READ_ONLY"),
                                      ?tags: Array[
                                        {
                                          key: ::String?,
                                          value: ::String?
                                        },
                                      ]
                                    ) -> _CreateDBProxyEndpointResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBProxyEndpointResponseSuccess

      interface _CreateDBSecurityGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBSecurityGroupResult]
        def db_security_group: () -> Types::DBSecurityGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_security_group-instance_method
      def create_db_security_group: (
                                      db_security_group_name: ::String,
                                      db_security_group_description: ::String,
                                      ?tags: Array[
                                        {
                                          key: ::String?,
                                          value: ::String?
                                        },
                                      ]
                                    ) -> _CreateDBSecurityGroupResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBSecurityGroupResponseSuccess

      interface _CreateDBShardGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBShardGroup]
        def db_shard_group_resource_id: () -> ::String
        def db_shard_group_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def max_acu: () -> ::Float
        def compute_redundancy: () -> ::Integer
        def status: () -> ::String
        def publicly_accessible: () -> bool
        def endpoint: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_shard_group-instance_method
      def create_db_shard_group: (
                                   db_shard_group_identifier: ::String,
                                   db_cluster_identifier: ::String,
                                   ?compute_redundancy: ::Integer,
                                   max_acu: ::Float,
                                   ?publicly_accessible: bool
                                 ) -> _CreateDBShardGroupResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBShardGroupResponseSuccess

      interface _CreateDBSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBSnapshotResult]
        def db_snapshot: () -> Types::DBSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_snapshot-instance_method
      def create_db_snapshot: (
                                db_snapshot_identifier: ::String,
                                db_instance_identifier: ::String,
                                ?tags: Array[
                                  {
                                    key: ::String?,
                                    value: ::String?
                                  },
                                ]
                              ) -> _CreateDBSnapshotResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBSnapshotResponseSuccess

      interface _CreateDBSubnetGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDBSubnetGroupResult]
        def db_subnet_group: () -> Types::DBSubnetGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_db_subnet_group-instance_method
      def create_db_subnet_group: (
                                    db_subnet_group_name: ::String,
                                    db_subnet_group_description: ::String,
                                    subnet_ids: Array[::String],
                                    ?tags: Array[
                                      {
                                        key: ::String?,
                                        value: ::String?
                                      },
                                    ]
                                  ) -> _CreateDBSubnetGroupResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDBSubnetGroupResponseSuccess

      interface _CreateEventSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateEventSubscriptionResult]
        def event_subscription: () -> Types::EventSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_event_subscription-instance_method
      def create_event_subscription: (
                                       subscription_name: ::String,
                                       sns_topic_arn: ::String,
                                       ?source_type: ::String,
                                       ?event_categories: Array[::String],
                                       ?source_ids: Array[::String],
                                       ?enabled: bool,
                                       ?tags: Array[
                                         {
                                           key: ::String?,
                                           value: ::String?
                                         },
                                       ]
                                     ) -> _CreateEventSubscriptionResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateEventSubscriptionResponseSuccess

      interface _CreateGlobalClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateGlobalClusterResult]
        def global_cluster: () -> Types::GlobalCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_global_cluster-instance_method
      def create_global_cluster: (
                                   ?global_cluster_identifier: ::String,
                                   ?source_db_cluster_identifier: ::String,
                                   ?engine: ::String,
                                   ?engine_version: ::String,
                                   ?deletion_protection: bool,
                                   ?database_name: ::String,
                                   ?storage_encrypted: bool
                                 ) -> _CreateGlobalClusterResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateGlobalClusterResponseSuccess

      interface _CreateIntegrationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::Integration]
        def source_arn: () -> ::String
        def target_arn: () -> ::String
        def integration_name: () -> ::String
        def integration_arn: () -> ::String
        def kms_key_id: () -> ::String
        def additional_encryption_context: () -> ::Hash[::String, ::String]
        def status: () -> ("creating" | "active" | "modifying" | "failed" | "deleting" | "syncing" | "needs_attention")
        def tags: () -> ::Array[Types::Tag]
        def create_time: () -> ::Time
        def errors: () -> ::Array[Types::IntegrationError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_integration-instance_method
      def create_integration: (
                                source_arn: ::String,
                                target_arn: ::String,
                                integration_name: ::String,
                                ?kms_key_id: ::String,
                                ?additional_encryption_context: Hash[::String, ::String],
                                ?tags: Array[
                                  {
                                    key: ::String?,
                                    value: ::String?
                                  },
                                ]
                              ) -> _CreateIntegrationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIntegrationResponseSuccess

      interface _CreateOptionGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateOptionGroupResult]
        def option_group: () -> Types::OptionGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_option_group-instance_method
      def create_option_group: (
                                 option_group_name: ::String,
                                 engine_name: ::String,
                                 major_engine_version: ::String,
                                 option_group_description: ::String,
                                 ?tags: Array[
                                   {
                                     key: ::String?,
                                     value: ::String?
                                   },
                                 ]
                               ) -> _CreateOptionGroupResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateOptionGroupResponseSuccess

      interface _CreateTenantDatabaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTenantDatabaseResult]
        def tenant_database: () -> Types::TenantDatabase
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#create_tenant_database-instance_method
      def create_tenant_database: (
                                    db_instance_identifier: ::String,
                                    tenant_db_name: ::String,
                                    master_username: ::String,
                                    master_user_password: ::String,
                                    ?character_set_name: ::String,
                                    ?nchar_character_set_name: ::String,
                                    ?tags: Array[
                                      {
                                        key: ::String?,
                                        value: ::String?
                                      },
                                    ]
                                  ) -> _CreateTenantDatabaseResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTenantDatabaseResponseSuccess

      interface _DeleteBlueGreenDeploymentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteBlueGreenDeploymentResponse]
        def blue_green_deployment: () -> Types::BlueGreenDeployment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_blue_green_deployment-instance_method
      def delete_blue_green_deployment: (
                                          blue_green_deployment_identifier: ::String,
                                          ?delete_target: bool
                                        ) -> _DeleteBlueGreenDeploymentResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteBlueGreenDeploymentResponseSuccess

      interface _DeleteCustomDBEngineVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBEngineVersion]
        def engine: () -> ::String
        def engine_version: () -> ::String
        def db_parameter_group_family: () -> ::String
        def db_engine_description: () -> ::String
        def db_engine_version_description: () -> ::String
        def default_character_set: () -> Types::CharacterSet
        def image: () -> Types::CustomDBEngineVersionAMI
        def db_engine_media_type: () -> ::String
        def supported_character_sets: () -> ::Array[Types::CharacterSet]
        def supported_nchar_character_sets: () -> ::Array[Types::CharacterSet]
        def valid_upgrade_target: () -> ::Array[Types::UpgradeTarget]
        def supported_timezones: () -> ::Array[Types::Timezone]
        def exportable_log_types: () -> ::Array[::String]
        def supports_log_exports_to_cloudwatch_logs: () -> bool
        def supports_read_replica: () -> bool
        def supported_engine_modes: () -> ::Array[::String]
        def supported_feature_names: () -> ::Array[::String]
        def status: () -> ::String
        def supports_parallel_query: () -> bool
        def supports_global_databases: () -> bool
        def major_engine_version: () -> ::String
        def database_installation_files_s3_bucket_name: () -> ::String
        def database_installation_files_s3_prefix: () -> ::String
        def db_engine_version_arn: () -> ::String
        def kms_key_id: () -> ::String
        def create_time: () -> ::Time
        def tag_list: () -> ::Array[Types::Tag]
        def supports_babelfish: () -> bool
        def custom_db_engine_version_manifest: () -> ::String
        def supports_certificate_rotation_without_restart: () -> bool
        def supported_ca_certificate_identifiers: () -> ::Array[::String]
        def supports_local_write_forwarding: () -> bool
        def supports_integrations: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_custom_db_engine_version-instance_method
      def delete_custom_db_engine_version: (
                                             engine: ::String,
                                             engine_version: ::String
                                           ) -> _DeleteCustomDBEngineVersionResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteCustomDBEngineVersionResponseSuccess

      interface _DeleteDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_cluster-instance_method
      def delete_db_cluster: (
                               db_cluster_identifier: ::String,
                               ?skip_final_snapshot: bool,
                               ?final_db_snapshot_identifier: ::String,
                               ?delete_automated_backups: bool
                             ) -> _DeleteDBClusterResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBClusterResponseSuccess

      interface _DeleteDBClusterAutomatedBackupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBClusterAutomatedBackupResult]
        def db_cluster_automated_backup: () -> Types::DBClusterAutomatedBackup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_cluster_automated_backup-instance_method
      def delete_db_cluster_automated_backup: (
                                                db_cluster_resource_id: ::String
                                              ) -> _DeleteDBClusterAutomatedBackupResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBClusterAutomatedBackupResponseSuccess

      interface _DeleteDBClusterEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterEndpoint]
        def db_cluster_endpoint_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def db_cluster_endpoint_resource_identifier: () -> ::String
        def endpoint: () -> ::String
        def status: () -> ::String
        def endpoint_type: () -> ::String
        def custom_endpoint_type: () -> ::String
        def static_members: () -> ::Array[::String]
        def excluded_members: () -> ::Array[::String]
        def db_cluster_endpoint_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_cluster_endpoint-instance_method
      def delete_db_cluster_endpoint: (
                                        db_cluster_endpoint_identifier: ::String
                                      ) -> _DeleteDBClusterEndpointResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBClusterEndpointResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_cluster_parameter_group-instance_method
      def delete_db_cluster_parameter_group: (
                                               db_cluster_parameter_group_name: ::String
                                             ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteDBClusterSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBClusterSnapshotResult]
        def db_cluster_snapshot: () -> Types::DBClusterSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_cluster_snapshot-instance_method
      def delete_db_cluster_snapshot: (
                                        db_cluster_snapshot_identifier: ::String
                                      ) -> _DeleteDBClusterSnapshotResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBClusterSnapshotResponseSuccess

      interface _DeleteDBInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBInstanceResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_instance-instance_method
      def delete_db_instance: (
                                db_instance_identifier: ::String,
                                ?skip_final_snapshot: bool,
                                ?final_db_snapshot_identifier: ::String,
                                ?delete_automated_backups: bool
                              ) -> _DeleteDBInstanceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBInstanceResponseSuccess

      interface _DeleteDBInstanceAutomatedBackupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBInstanceAutomatedBackupResult]
        def db_instance_automated_backup: () -> Types::DBInstanceAutomatedBackup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_instance_automated_backup-instance_method
      def delete_db_instance_automated_backup: (
                                                 ?dbi_resource_id: ::String,
                                                 ?db_instance_automated_backups_arn: ::String
                                               ) -> _DeleteDBInstanceAutomatedBackupResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBInstanceAutomatedBackupResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_parameter_group-instance_method
      def delete_db_parameter_group: (
                                       db_parameter_group_name: ::String
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteDBProxyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBProxyResponse]
        def db_proxy: () -> Types::DBProxy
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_proxy-instance_method
      def delete_db_proxy: (
                             db_proxy_name: ::String
                           ) -> _DeleteDBProxyResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBProxyResponseSuccess

      interface _DeleteDBProxyEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBProxyEndpointResponse]
        def db_proxy_endpoint: () -> Types::DBProxyEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_proxy_endpoint-instance_method
      def delete_db_proxy_endpoint: (
                                      db_proxy_endpoint_name: ::String
                                    ) -> _DeleteDBProxyEndpointResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBProxyEndpointResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_security_group-instance_method
      def delete_db_security_group: (
                                      db_security_group_name: ::String
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteDBShardGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBShardGroup]
        def db_shard_group_resource_id: () -> ::String
        def db_shard_group_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def max_acu: () -> ::Float
        def compute_redundancy: () -> ::Integer
        def status: () -> ::String
        def publicly_accessible: () -> bool
        def endpoint: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_shard_group-instance_method
      def delete_db_shard_group: (
                                   db_shard_group_identifier: ::String
                                 ) -> _DeleteDBShardGroupResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBShardGroupResponseSuccess

      interface _DeleteDBSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDBSnapshotResult]
        def db_snapshot: () -> Types::DBSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_snapshot-instance_method
      def delete_db_snapshot: (
                                db_snapshot_identifier: ::String
                              ) -> _DeleteDBSnapshotResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDBSnapshotResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_db_subnet_group-instance_method
      def delete_db_subnet_group: (
                                    db_subnet_group_name: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteEventSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEventSubscriptionResult]
        def event_subscription: () -> Types::EventSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_event_subscription-instance_method
      def delete_event_subscription: (
                                       subscription_name: ::String
                                     ) -> _DeleteEventSubscriptionResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEventSubscriptionResponseSuccess

      interface _DeleteGlobalClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteGlobalClusterResult]
        def global_cluster: () -> Types::GlobalCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_global_cluster-instance_method
      def delete_global_cluster: (
                                   global_cluster_identifier: ::String
                                 ) -> _DeleteGlobalClusterResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteGlobalClusterResponseSuccess

      interface _DeleteIntegrationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::Integration]
        def source_arn: () -> ::String
        def target_arn: () -> ::String
        def integration_name: () -> ::String
        def integration_arn: () -> ::String
        def kms_key_id: () -> ::String
        def additional_encryption_context: () -> ::Hash[::String, ::String]
        def status: () -> ("creating" | "active" | "modifying" | "failed" | "deleting" | "syncing" | "needs_attention")
        def tags: () -> ::Array[Types::Tag]
        def create_time: () -> ::Time
        def errors: () -> ::Array[Types::IntegrationError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_integration-instance_method
      def delete_integration: (
                                integration_identifier: ::String
                              ) -> _DeleteIntegrationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIntegrationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_option_group-instance_method
      def delete_option_group: (
                                 option_group_name: ::String
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteTenantDatabaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTenantDatabaseResult]
        def tenant_database: () -> Types::TenantDatabase
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#delete_tenant_database-instance_method
      def delete_tenant_database: (
                                    db_instance_identifier: ::String,
                                    tenant_db_name: ::String,
                                    ?skip_final_snapshot: bool,
                                    ?final_db_snapshot_identifier: ::String
                                  ) -> _DeleteTenantDatabaseResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTenantDatabaseResponseSuccess

      interface _DeregisterDBProxyTargetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterDBProxyTargetsResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#deregister_db_proxy_targets-instance_method
      def deregister_db_proxy_targets: (
                                         db_proxy_name: ::String,
                                         ?target_group_name: ::String,
                                         ?db_instance_identifiers: Array[::String],
                                         ?db_cluster_identifiers: Array[::String]
                                       ) -> _DeregisterDBProxyTargetsResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterDBProxyTargetsResponseSuccess

      interface _DescribeAccountAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AccountAttributesMessage]
        def account_quotas: () -> ::Array[Types::AccountQuota]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_account_attributes-instance_method
      def describe_account_attributes: (
                                       ) -> _DescribeAccountAttributesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAccountAttributesResponseSuccess

      interface _DescribeBlueGreenDeploymentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeBlueGreenDeploymentsResponse]
        def blue_green_deployments: () -> ::Array[Types::BlueGreenDeployment]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_blue_green_deployments-instance_method
      def describe_blue_green_deployments: (
                                             ?blue_green_deployment_identifier: ::String,
                                             ?filters: Array[
                                               {
                                                 name: ::String,
                                                 values: Array[::String]
                                               },
                                             ],
                                             ?marker: ::String,
                                             ?max_records: ::Integer
                                           ) -> _DescribeBlueGreenDeploymentsResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeBlueGreenDeploymentsResponseSuccess

      interface _DescribeCertificatesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CertificateMessage]
        def default_certificate_for_new_launches: () -> ::String
        def certificates: () -> ::Array[Types::Certificate]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_certificates-instance_method
      def describe_certificates: (
                                   ?certificate_identifier: ::String,
                                   ?filters: Array[
                                     {
                                       name: ::String,
                                       values: Array[::String]
                                     },
                                   ],
                                   ?max_records: ::Integer,
                                   ?marker: ::String
                                 ) -> _DescribeCertificatesResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCertificatesResponseSuccess

      interface _DescribeDBClusterAutomatedBackupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterAutomatedBackupMessage]
        def marker: () -> ::String
        def db_cluster_automated_backups: () -> ::Array[Types::DBClusterAutomatedBackup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_automated_backups-instance_method
      def describe_db_cluster_automated_backups: (
                                                   ?db_cluster_resource_id: ::String,
                                                   ?db_cluster_identifier: ::String,
                                                   ?filters: Array[
                                                     {
                                                       name: ::String,
                                                       values: Array[::String]
                                                     },
                                                   ],
                                                   ?max_records: ::Integer,
                                                   ?marker: ::String
                                                 ) -> _DescribeDBClusterAutomatedBackupsResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterAutomatedBackupsResponseSuccess

      interface _DescribeDBClusterBacktracksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterBacktrackMessage]
        def marker: () -> ::String
        def db_cluster_backtracks: () -> ::Array[Types::DBClusterBacktrack]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_backtracks-instance_method
      def describe_db_cluster_backtracks: (
                                            db_cluster_identifier: ::String,
                                            ?backtrack_identifier: ::String,
                                            ?filters: Array[
                                              {
                                                name: ::String,
                                                values: Array[::String]
                                              },
                                            ],
                                            ?max_records: ::Integer,
                                            ?marker: ::String
                                          ) -> _DescribeDBClusterBacktracksResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterBacktracksResponseSuccess

      interface _DescribeDBClusterEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterEndpointMessage]
        def marker: () -> ::String
        def db_cluster_endpoints: () -> ::Array[Types::DBClusterEndpoint]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_endpoints-instance_method
      def describe_db_cluster_endpoints: (
                                           ?db_cluster_identifier: ::String,
                                           ?db_cluster_endpoint_identifier: ::String,
                                           ?filters: Array[
                                             {
                                               name: ::String,
                                               values: Array[::String]
                                             },
                                           ],
                                           ?max_records: ::Integer,
                                           ?marker: ::String
                                         ) -> _DescribeDBClusterEndpointsResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterEndpointsResponseSuccess

      interface _DescribeDBClusterParameterGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterParameterGroupsMessage]
        def marker: () -> ::String
        def db_cluster_parameter_groups: () -> ::Array[Types::DBClusterParameterGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_parameter_groups-instance_method
      def describe_db_cluster_parameter_groups: (
                                                  ?db_cluster_parameter_group_name: ::String,
                                                  ?filters: Array[
                                                    {
                                                      name: ::String,
                                                      values: Array[::String]
                                                    },
                                                  ],
                                                  ?max_records: ::Integer,
                                                  ?marker: ::String
                                                ) -> _DescribeDBClusterParameterGroupsResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterParameterGroupsResponseSuccess

      interface _DescribeDBClusterParametersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterParameterGroupDetails]
        def parameters: () -> ::Array[Types::Parameter]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_parameters-instance_method
      def describe_db_cluster_parameters: (
                                            db_cluster_parameter_group_name: ::String,
                                            ?source: ::String,
                                            ?filters: Array[
                                              {
                                                name: ::String,
                                                values: Array[::String]
                                              },
                                            ],
                                            ?max_records: ::Integer,
                                            ?marker: ::String
                                          ) -> _DescribeDBClusterParametersResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterParametersResponseSuccess

      interface _DescribeDBClusterSnapshotAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBClusterSnapshotAttributesResult]
        def db_cluster_snapshot_attributes_result: () -> Types::DBClusterSnapshotAttributesResult
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_snapshot_attributes-instance_method
      def describe_db_cluster_snapshot_attributes: (
                                                     db_cluster_snapshot_identifier: ::String
                                                   ) -> _DescribeDBClusterSnapshotAttributesResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterSnapshotAttributesResponseSuccess

      interface _DescribeDBClusterSnapshotsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterSnapshotMessage]
        def marker: () -> ::String
        def db_cluster_snapshots: () -> ::Array[Types::DBClusterSnapshot]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_cluster_snapshots-instance_method
      def describe_db_cluster_snapshots: (
                                           ?db_cluster_identifier: ::String,
                                           ?db_cluster_snapshot_identifier: ::String,
                                           ?snapshot_type: ::String,
                                           ?filters: Array[
                                             {
                                               name: ::String,
                                               values: Array[::String]
                                             },
                                           ],
                                           ?max_records: ::Integer,
                                           ?marker: ::String,
                                           ?include_shared: bool,
                                           ?include_public: bool,
                                           ?db_cluster_resource_id: ::String
                                         ) -> _DescribeDBClusterSnapshotsResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClusterSnapshotsResponseSuccess

      interface _DescribeDBClustersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterMessage]
        def marker: () -> ::String
        def db_clusters: () -> ::Array[Types::DBCluster]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_clusters-instance_method
      def describe_db_clusters: (
                                  ?db_cluster_identifier: ::String,
                                  ?filters: Array[
                                    {
                                      name: ::String,
                                      values: Array[::String]
                                    },
                                  ],
                                  ?max_records: ::Integer,
                                  ?marker: ::String,
                                  ?include_shared: bool
                                ) -> _DescribeDBClustersResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBClustersResponseSuccess

      interface _DescribeDBEngineVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBEngineVersionMessage]
        def marker: () -> ::String
        def db_engine_versions: () -> ::Array[Types::DBEngineVersion]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_engine_versions-instance_method
      def describe_db_engine_versions: (
                                         ?engine: ::String,
                                         ?engine_version: ::String,
                                         ?db_parameter_group_family: ::String,
                                         ?filters: Array[
                                           {
                                             name: ::String,
                                             values: Array[::String]
                                           },
                                         ],
                                         ?max_records: ::Integer,
                                         ?marker: ::String,
                                         ?default_only: bool,
                                         ?list_supported_character_sets: bool,
                                         ?list_supported_timezones: bool,
                                         ?include_all: bool
                                       ) -> _DescribeDBEngineVersionsResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBEngineVersionsResponseSuccess

      interface _DescribeDBInstanceAutomatedBackupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBInstanceAutomatedBackupMessage]
        def marker: () -> ::String
        def db_instance_automated_backups: () -> ::Array[Types::DBInstanceAutomatedBackup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_instance_automated_backups-instance_method
      def describe_db_instance_automated_backups: (
                                                    ?dbi_resource_id: ::String,
                                                    ?db_instance_identifier: ::String,
                                                    ?filters: Array[
                                                      {
                                                        name: ::String,
                                                        values: Array[::String]
                                                      },
                                                    ],
                                                    ?max_records: ::Integer,
                                                    ?marker: ::String,
                                                    ?db_instance_automated_backups_arn: ::String
                                                  ) -> _DescribeDBInstanceAutomatedBackupsResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBInstanceAutomatedBackupsResponseSuccess

      interface _DescribeDBInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBInstanceMessage]
        def marker: () -> ::String
        def db_instances: () -> ::Array[Types::DBInstance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_instances-instance_method
      def describe_db_instances: (
                                   ?db_instance_identifier: ::String,
                                   ?filters: Array[
                                     {
                                       name: ::String,
                                       values: Array[::String]
                                     },
                                   ],
                                   ?max_records: ::Integer,
                                   ?marker: ::String
                                 ) -> _DescribeDBInstancesResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBInstancesResponseSuccess

      interface _DescribeDBLogFilesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBLogFilesResponse]
        def describe_db_log_files: () -> ::Array[Types::DescribeDBLogFilesDetails]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_log_files-instance_method
      def describe_db_log_files: (
                                   db_instance_identifier: ::String,
                                   ?filename_contains: ::String,
                                   ?file_last_written: ::Integer,
                                   ?file_size: ::Integer,
                                   ?filters: Array[
                                     {
                                       name: ::String,
                                       values: Array[::String]
                                     },
                                   ],
                                   ?max_records: ::Integer,
                                   ?marker: ::String
                                 ) -> _DescribeDBLogFilesResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBLogFilesResponseSuccess

      interface _DescribeDBParameterGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBParameterGroupsMessage]
        def marker: () -> ::String
        def db_parameter_groups: () -> ::Array[Types::DBParameterGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_parameter_groups-instance_method
      def describe_db_parameter_groups: (
                                          ?db_parameter_group_name: ::String,
                                          ?filters: Array[
                                            {
                                              name: ::String,
                                              values: Array[::String]
                                            },
                                          ],
                                          ?max_records: ::Integer,
                                          ?marker: ::String
                                        ) -> _DescribeDBParameterGroupsResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBParameterGroupsResponseSuccess

      interface _DescribeDBParametersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBParameterGroupDetails]
        def parameters: () -> ::Array[Types::Parameter]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_parameters-instance_method
      def describe_db_parameters: (
                                    db_parameter_group_name: ::String,
                                    ?source: ::String,
                                    ?filters: Array[
                                      {
                                        name: ::String,
                                        values: Array[::String]
                                      },
                                    ],
                                    ?max_records: ::Integer,
                                    ?marker: ::String
                                  ) -> _DescribeDBParametersResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBParametersResponseSuccess

      interface _DescribeDBProxiesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBProxiesResponse]
        def db_proxies: () -> ::Array[Types::DBProxy]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_proxies-instance_method
      def describe_db_proxies: (
                                 ?db_proxy_name: ::String,
                                 ?filters: Array[
                                   {
                                     name: ::String,
                                     values: Array[::String]
                                   },
                                 ],
                                 ?marker: ::String,
                                 ?max_records: ::Integer
                               ) -> _DescribeDBProxiesResponseSuccess
                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBProxiesResponseSuccess

      interface _DescribeDBProxyEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBProxyEndpointsResponse]
        def db_proxy_endpoints: () -> ::Array[Types::DBProxyEndpoint]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_proxy_endpoints-instance_method
      def describe_db_proxy_endpoints: (
                                         ?db_proxy_name: ::String,
                                         ?db_proxy_endpoint_name: ::String,
                                         ?filters: Array[
                                           {
                                             name: ::String,
                                             values: Array[::String]
                                           },
                                         ],
                                         ?marker: ::String,
                                         ?max_records: ::Integer
                                       ) -> _DescribeDBProxyEndpointsResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBProxyEndpointsResponseSuccess

      interface _DescribeDBProxyTargetGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBProxyTargetGroupsResponse]
        def target_groups: () -> ::Array[Types::DBProxyTargetGroup]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_proxy_target_groups-instance_method
      def describe_db_proxy_target_groups: (
                                             db_proxy_name: ::String,
                                             ?target_group_name: ::String,
                                             ?filters: Array[
                                               {
                                                 name: ::String,
                                                 values: Array[::String]
                                               },
                                             ],
                                             ?marker: ::String,
                                             ?max_records: ::Integer
                                           ) -> _DescribeDBProxyTargetGroupsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBProxyTargetGroupsResponseSuccess

      interface _DescribeDBProxyTargetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBProxyTargetsResponse]
        def targets: () -> ::Array[Types::DBProxyTarget]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_proxy_targets-instance_method
      def describe_db_proxy_targets: (
                                       db_proxy_name: ::String,
                                       ?target_group_name: ::String,
                                       ?filters: Array[
                                         {
                                           name: ::String,
                                           values: Array[::String]
                                         },
                                       ],
                                       ?marker: ::String,
                                       ?max_records: ::Integer
                                     ) -> _DescribeDBProxyTargetsResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBProxyTargetsResponseSuccess

      interface _DescribeDBRecommendationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBRecommendationsMessage]
        def db_recommendations: () -> ::Array[Types::DBRecommendation]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_recommendations-instance_method
      def describe_db_recommendations: (
                                         ?last_updated_after: ::Time,
                                         ?last_updated_before: ::Time,
                                         ?locale: ::String,
                                         ?filters: Array[
                                           {
                                             name: ::String,
                                             values: Array[::String]
                                           },
                                         ],
                                         ?max_records: ::Integer,
                                         ?marker: ::String
                                       ) -> _DescribeDBRecommendationsResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBRecommendationsResponseSuccess

      interface _DescribeDBSecurityGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBSecurityGroupMessage]
        def marker: () -> ::String
        def db_security_groups: () -> ::Array[Types::DBSecurityGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_security_groups-instance_method
      def describe_db_security_groups: (
                                         ?db_security_group_name: ::String,
                                         ?filters: Array[
                                           {
                                             name: ::String,
                                             values: Array[::String]
                                           },
                                         ],
                                         ?max_records: ::Integer,
                                         ?marker: ::String
                                       ) -> _DescribeDBSecurityGroupsResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBSecurityGroupsResponseSuccess

      interface _DescribeDBShardGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBShardGroupsResponse]
        def db_shard_groups: () -> ::Array[Types::DBShardGroup]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_shard_groups-instance_method
      def describe_db_shard_groups: (
                                      ?db_shard_group_identifier: ::String,
                                      ?filters: Array[
                                        {
                                          name: ::String,
                                          values: Array[::String]
                                        },
                                      ],
                                      ?marker: ::String,
                                      ?max_records: ::Integer
                                    ) -> _DescribeDBShardGroupsResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBShardGroupsResponseSuccess

      interface _DescribeDBSnapshotAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDBSnapshotAttributesResult]
        def db_snapshot_attributes_result: () -> Types::DBSnapshotAttributesResult
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_snapshot_attributes-instance_method
      def describe_db_snapshot_attributes: (
                                             db_snapshot_identifier: ::String
                                           ) -> _DescribeDBSnapshotAttributesResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBSnapshotAttributesResponseSuccess

      interface _DescribeDBSnapshotTenantDatabasesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBSnapshotTenantDatabasesMessage]
        def marker: () -> ::String
        def db_snapshot_tenant_databases: () -> ::Array[Types::DBSnapshotTenantDatabase]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_snapshot_tenant_databases-instance_method
      def describe_db_snapshot_tenant_databases: (
                                                   ?db_instance_identifier: ::String,
                                                   ?db_snapshot_identifier: ::String,
                                                   ?snapshot_type: ::String,
                                                   ?filters: Array[
                                                     {
                                                       name: ::String,
                                                       values: Array[::String]
                                                     },
                                                   ],
                                                   ?max_records: ::Integer,
                                                   ?marker: ::String,
                                                   ?dbi_resource_id: ::String
                                                 ) -> _DescribeDBSnapshotTenantDatabasesResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBSnapshotTenantDatabasesResponseSuccess

      interface _DescribeDBSnapshotsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBSnapshotMessage]
        def marker: () -> ::String
        def db_snapshots: () -> ::Array[Types::DBSnapshot]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_snapshots-instance_method
      def describe_db_snapshots: (
                                   ?db_instance_identifier: ::String,
                                   ?db_snapshot_identifier: ::String,
                                   ?snapshot_type: ::String,
                                   ?filters: Array[
                                     {
                                       name: ::String,
                                       values: Array[::String]
                                     },
                                   ],
                                   ?max_records: ::Integer,
                                   ?marker: ::String,
                                   ?include_shared: bool,
                                   ?include_public: bool,
                                   ?dbi_resource_id: ::String
                                 ) -> _DescribeDBSnapshotsResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBSnapshotsResponseSuccess

      interface _DescribeDBSubnetGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBSubnetGroupMessage]
        def marker: () -> ::String
        def db_subnet_groups: () -> ::Array[Types::DBSubnetGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_db_subnet_groups-instance_method
      def describe_db_subnet_groups: (
                                       ?db_subnet_group_name: ::String,
                                       ?filters: Array[
                                         {
                                           name: ::String,
                                           values: Array[::String]
                                         },
                                       ],
                                       ?max_records: ::Integer,
                                       ?marker: ::String
                                     ) -> _DescribeDBSubnetGroupsResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDBSubnetGroupsResponseSuccess

      interface _DescribeEngineDefaultClusterParametersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeEngineDefaultClusterParametersResult]
        def engine_defaults: () -> Types::EngineDefaults
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_engine_default_cluster_parameters-instance_method
      def describe_engine_default_cluster_parameters: (
                                                        db_parameter_group_family: ::String,
                                                        ?filters: Array[
                                                          {
                                                            name: ::String,
                                                            values: Array[::String]
                                                          },
                                                        ],
                                                        ?max_records: ::Integer,
                                                        ?marker: ::String
                                                      ) -> _DescribeEngineDefaultClusterParametersResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEngineDefaultClusterParametersResponseSuccess

      interface _DescribeEngineDefaultParametersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeEngineDefaultParametersResult]
        def engine_defaults: () -> Types::EngineDefaults
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_engine_default_parameters-instance_method
      def describe_engine_default_parameters: (
                                                db_parameter_group_family: ::String,
                                                ?filters: Array[
                                                  {
                                                    name: ::String,
                                                    values: Array[::String]
                                                  },
                                                ],
                                                ?max_records: ::Integer,
                                                ?marker: ::String
                                              ) -> _DescribeEngineDefaultParametersResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEngineDefaultParametersResponseSuccess

      interface _DescribeEventCategoriesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EventCategoriesMessage]
        def event_categories_map_list: () -> ::Array[Types::EventCategoriesMap]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_event_categories-instance_method
      def describe_event_categories: (
                                       ?source_type: ::String,
                                       ?filters: Array[
                                         {
                                           name: ::String,
                                           values: Array[::String]
                                         },
                                       ]
                                     ) -> _DescribeEventCategoriesResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEventCategoriesResponseSuccess

      interface _DescribeEventSubscriptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EventSubscriptionsMessage]
        def marker: () -> ::String
        def event_subscriptions_list: () -> ::Array[Types::EventSubscription]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_event_subscriptions-instance_method
      def describe_event_subscriptions: (
                                          ?subscription_name: ::String,
                                          ?filters: Array[
                                            {
                                              name: ::String,
                                              values: Array[::String]
                                            },
                                          ],
                                          ?max_records: ::Integer,
                                          ?marker: ::String
                                        ) -> _DescribeEventSubscriptionsResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEventSubscriptionsResponseSuccess

      interface _DescribeEventsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EventsMessage]
        def marker: () -> ::String
        def events: () -> ::Array[Types::Event]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_events-instance_method
      def describe_events: (
                             ?source_identifier: ::String,
                             ?source_type: ("db-instance" | "db-parameter-group" | "db-security-group" | "db-snapshot" | "db-cluster" | "db-cluster-snapshot" | "custom-engine-version" | "db-proxy" | "blue-green-deployment"),
                             ?start_time: ::Time,
                             ?end_time: ::Time,
                             ?duration: ::Integer,
                             ?event_categories: Array[::String],
                             ?filters: Array[
                               {
                                 name: ::String,
                                 values: Array[::String]
                               },
                             ],
                             ?max_records: ::Integer,
                             ?marker: ::String
                           ) -> _DescribeEventsResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEventsResponseSuccess

      interface _DescribeExportTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportTasksMessage]
        def marker: () -> ::String
        def export_tasks: () -> ::Array[Types::ExportTask]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_export_tasks-instance_method
      def describe_export_tasks: (
                                   ?export_task_identifier: ::String,
                                   ?source_arn: ::String,
                                   ?filters: Array[
                                     {
                                       name: ::String,
                                       values: Array[::String]
                                     },
                                   ],
                                   ?marker: ::String,
                                   ?max_records: ::Integer,
                                   ?source_type: ("SNAPSHOT" | "CLUSTER")
                                 ) -> _DescribeExportTasksResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeExportTasksResponseSuccess

      interface _DescribeGlobalClustersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GlobalClustersMessage]
        def marker: () -> ::String
        def global_clusters: () -> ::Array[Types::GlobalCluster]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_global_clusters-instance_method
      def describe_global_clusters: (
                                      ?global_cluster_identifier: ::String,
                                      ?filters: Array[
                                        {
                                          name: ::String,
                                          values: Array[::String]
                                        },
                                      ],
                                      ?max_records: ::Integer,
                                      ?marker: ::String
                                    ) -> _DescribeGlobalClustersResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeGlobalClustersResponseSuccess

      interface _DescribeIntegrationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIntegrationsResponse]
        def marker: () -> ::String
        def integrations: () -> ::Array[Types::Integration]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_integrations-instance_method
      def describe_integrations: (
                                   ?integration_identifier: ::String,
                                   ?filters: Array[
                                     {
                                       name: ::String,
                                       values: Array[::String]
                                     },
                                   ],
                                   ?max_records: ::Integer,
                                   ?marker: ::String
                                 ) -> _DescribeIntegrationsResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIntegrationsResponseSuccess

      interface _DescribeOptionGroupOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::OptionGroupOptionsMessage]
        def option_group_options: () -> ::Array[Types::OptionGroupOption]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_option_group_options-instance_method
      def describe_option_group_options: (
                                           engine_name: ::String,
                                           ?major_engine_version: ::String,
                                           ?filters: Array[
                                             {
                                               name: ::String,
                                               values: Array[::String]
                                             },
                                           ],
                                           ?max_records: ::Integer,
                                           ?marker: ::String
                                         ) -> _DescribeOptionGroupOptionsResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOptionGroupOptionsResponseSuccess

      interface _DescribeOptionGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::OptionGroups]
        def option_groups_list: () -> ::Array[Types::OptionGroup]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_option_groups-instance_method
      def describe_option_groups: (
                                    ?option_group_name: ::String,
                                    ?filters: Array[
                                      {
                                        name: ::String,
                                        values: Array[::String]
                                      },
                                    ],
                                    ?marker: ::String,
                                    ?max_records: ::Integer,
                                    ?engine_name: ::String,
                                    ?major_engine_version: ::String
                                  ) -> _DescribeOptionGroupsResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOptionGroupsResponseSuccess

      interface _DescribeOrderableDBInstanceOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::OrderableDBInstanceOptionsMessage]
        def orderable_db_instance_options: () -> ::Array[Types::OrderableDBInstanceOption]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_orderable_db_instance_options-instance_method
      def describe_orderable_db_instance_options: (
                                                    engine: ::String,
                                                    ?engine_version: ::String,
                                                    ?db_instance_class: ::String,
                                                    ?license_model: ::String,
                                                    ?availability_zone_group: ::String,
                                                    ?vpc: bool,
                                                    ?filters: Array[
                                                      {
                                                        name: ::String,
                                                        values: Array[::String]
                                                      },
                                                    ],
                                                    ?max_records: ::Integer,
                                                    ?marker: ::String
                                                  ) -> _DescribeOrderableDBInstanceOptionsResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOrderableDBInstanceOptionsResponseSuccess

      interface _DescribePendingMaintenanceActionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PendingMaintenanceActionsMessage]
        def pending_maintenance_actions: () -> ::Array[Types::ResourcePendingMaintenanceActions]
        def marker: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_pending_maintenance_actions-instance_method
      def describe_pending_maintenance_actions: (
                                                  ?resource_identifier: ::String,
                                                  ?filters: Array[
                                                    {
                                                      name: ::String,
                                                      values: Array[::String]
                                                    },
                                                  ],
                                                  ?marker: ::String,
                                                  ?max_records: ::Integer
                                                ) -> _DescribePendingMaintenanceActionsResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePendingMaintenanceActionsResponseSuccess

      interface _DescribeReservedDBInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReservedDBInstanceMessage]
        def marker: () -> ::String
        def reserved_db_instances: () -> ::Array[Types::ReservedDBInstance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_reserved_db_instances-instance_method
      def describe_reserved_db_instances: (
                                            ?reserved_db_instance_id: ::String,
                                            ?reserved_db_instances_offering_id: ::String,
                                            ?db_instance_class: ::String,
                                            ?duration: ::String,
                                            ?product_description: ::String,
                                            ?offering_type: ::String,
                                            ?multi_az: bool,
                                            ?lease_id: ::String,
                                            ?filters: Array[
                                              {
                                                name: ::String,
                                                values: Array[::String]
                                              },
                                            ],
                                            ?max_records: ::Integer,
                                            ?marker: ::String
                                          ) -> _DescribeReservedDBInstancesResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservedDBInstancesResponseSuccess

      interface _DescribeReservedDBInstancesOfferingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReservedDBInstancesOfferingMessage]
        def marker: () -> ::String
        def reserved_db_instances_offerings: () -> ::Array[Types::ReservedDBInstancesOffering]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_reserved_db_instances_offerings-instance_method
      def describe_reserved_db_instances_offerings: (
                                                      ?reserved_db_instances_offering_id: ::String,
                                                      ?db_instance_class: ::String,
                                                      ?duration: ::String,
                                                      ?product_description: ::String,
                                                      ?offering_type: ::String,
                                                      ?multi_az: bool,
                                                      ?filters: Array[
                                                        {
                                                          name: ::String,
                                                          values: Array[::String]
                                                        },
                                                      ],
                                                      ?max_records: ::Integer,
                                                      ?marker: ::String
                                                    ) -> _DescribeReservedDBInstancesOfferingsResponseSuccess
                                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservedDBInstancesOfferingsResponseSuccess

      interface _DescribeSourceRegionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SourceRegionMessage]
        def marker: () -> ::String
        def source_regions: () -> ::Array[Types::SourceRegion]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_source_regions-instance_method
      def describe_source_regions: (
                                     ?region_name: ::String,
                                     ?max_records: ::Integer,
                                     ?marker: ::String,
                                     ?filters: Array[
                                       {
                                         name: ::String,
                                         values: Array[::String]
                                       },
                                     ]
                                   ) -> _DescribeSourceRegionsResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSourceRegionsResponseSuccess

      interface _DescribeTenantDatabasesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TenantDatabasesMessage]
        def marker: () -> ::String
        def tenant_databases: () -> ::Array[Types::TenantDatabase]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_tenant_databases-instance_method
      def describe_tenant_databases: (
                                       ?db_instance_identifier: ::String,
                                       ?tenant_db_name: ::String,
                                       ?filters: Array[
                                         {
                                           name: ::String,
                                           values: Array[::String]
                                         },
                                       ],
                                       ?marker: ::String,
                                       ?max_records: ::Integer
                                     ) -> _DescribeTenantDatabasesResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTenantDatabasesResponseSuccess

      interface _DescribeValidDBInstanceModificationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeValidDBInstanceModificationsResult]
        def valid_db_instance_modifications_message: () -> Types::ValidDBInstanceModificationsMessage
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#describe_valid_db_instance_modifications-instance_method
      def describe_valid_db_instance_modifications: (
                                                      db_instance_identifier: ::String
                                                    ) -> _DescribeValidDBInstanceModificationsResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeValidDBInstanceModificationsResponseSuccess

      interface _DisableHttpEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableHttpEndpointResponse]
        def resource_arn: () -> ::String
        def http_endpoint_enabled: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#disable_http_endpoint-instance_method
      def disable_http_endpoint: (
                                   resource_arn: ::String
                                 ) -> _DisableHttpEndpointResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableHttpEndpointResponseSuccess

      interface _DownloadDBLogFilePortionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DownloadDBLogFilePortionDetails]
        def log_file_data: () -> ::String
        def marker: () -> ::String
        def additional_data_pending: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#download_db_log_file_portion-instance_method
      def download_db_log_file_portion: (
                                          db_instance_identifier: ::String,
                                          log_file_name: ::String,
                                          ?marker: ::String,
                                          ?number_of_lines: ::Integer
                                        ) -> _DownloadDBLogFilePortionResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DownloadDBLogFilePortionResponseSuccess

      interface _EnableHttpEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableHttpEndpointResponse]
        def resource_arn: () -> ::String
        def http_endpoint_enabled: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#enable_http_endpoint-instance_method
      def enable_http_endpoint: (
                                  resource_arn: ::String
                                ) -> _EnableHttpEndpointResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableHttpEndpointResponseSuccess

      interface _FailoverDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::FailoverDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#failover_db_cluster-instance_method
      def failover_db_cluster: (
                                 db_cluster_identifier: ::String,
                                 ?target_db_instance_identifier: ::String
                               ) -> _FailoverDBClusterResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _FailoverDBClusterResponseSuccess

      interface _FailoverGlobalClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::FailoverGlobalClusterResult]
        def global_cluster: () -> Types::GlobalCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#failover_global_cluster-instance_method
      def failover_global_cluster: (
                                     global_cluster_identifier: ::String,
                                     target_db_cluster_identifier: ::String,
                                     ?allow_data_loss: bool,
                                     ?switchover: bool
                                   ) -> _FailoverGlobalClusterResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _FailoverGlobalClusterResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagListMessage]
        def tag_list: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_name: ::String,
                                    ?filters: Array[
                                      {
                                        name: ::String,
                                        values: Array[::String]
                                      },
                                    ]
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ModifyActivityStreamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyActivityStreamResponse]
        def kms_key_id: () -> ::String
        def kinesis_stream_name: () -> ::String
        def status: () -> ("stopped" | "starting" | "started" | "stopping")
        def mode: () -> ("sync" | "async")
        def engine_native_audit_fields_included: () -> bool
        def policy_status: () -> ("locked" | "unlocked" | "locking-policy" | "unlocking-policy")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_activity_stream-instance_method
      def modify_activity_stream: (
                                    ?resource_arn: ::String,
                                    ?audit_policy_state: ("locked" | "unlocked")
                                  ) -> _ModifyActivityStreamResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyActivityStreamResponseSuccess

      interface _ModifyCertificatesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyCertificatesResult]
        def certificate: () -> Types::Certificate
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_certificates-instance_method
      def modify_certificates: (
                                 ?certificate_identifier: ::String,
                                 ?remove_customer_override: bool
                               ) -> _ModifyCertificatesResponseSuccess
                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyCertificatesResponseSuccess

      interface _ModifyCurrentDBClusterCapacityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterCapacityInfo]
        def db_cluster_identifier: () -> ::String
        def pending_capacity: () -> ::Integer
        def current_capacity: () -> ::Integer
        def seconds_before_timeout: () -> ::Integer
        def timeout_action: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_current_db_cluster_capacity-instance_method
      def modify_current_db_cluster_capacity: (
                                                db_cluster_identifier: ::String,
                                                ?capacity: ::Integer,
                                                ?seconds_before_timeout: ::Integer,
                                                ?timeout_action: ::String
                                              ) -> _ModifyCurrentDBClusterCapacityResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyCurrentDBClusterCapacityResponseSuccess

      interface _ModifyCustomDBEngineVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBEngineVersion]
        def engine: () -> ::String
        def engine_version: () -> ::String
        def db_parameter_group_family: () -> ::String
        def db_engine_description: () -> ::String
        def db_engine_version_description: () -> ::String
        def default_character_set: () -> Types::CharacterSet
        def image: () -> Types::CustomDBEngineVersionAMI
        def db_engine_media_type: () -> ::String
        def supported_character_sets: () -> ::Array[Types::CharacterSet]
        def supported_nchar_character_sets: () -> ::Array[Types::CharacterSet]
        def valid_upgrade_target: () -> ::Array[Types::UpgradeTarget]
        def supported_timezones: () -> ::Array[Types::Timezone]
        def exportable_log_types: () -> ::Array[::String]
        def supports_log_exports_to_cloudwatch_logs: () -> bool
        def supports_read_replica: () -> bool
        def supported_engine_modes: () -> ::Array[::String]
        def supported_feature_names: () -> ::Array[::String]
        def status: () -> ::String
        def supports_parallel_query: () -> bool
        def supports_global_databases: () -> bool
        def major_engine_version: () -> ::String
        def database_installation_files_s3_bucket_name: () -> ::String
        def database_installation_files_s3_prefix: () -> ::String
        def db_engine_version_arn: () -> ::String
        def kms_key_id: () -> ::String
        def create_time: () -> ::Time
        def tag_list: () -> ::Array[Types::Tag]
        def supports_babelfish: () -> bool
        def custom_db_engine_version_manifest: () -> ::String
        def supports_certificate_rotation_without_restart: () -> bool
        def supported_ca_certificate_identifiers: () -> ::Array[::String]
        def supports_local_write_forwarding: () -> bool
        def supports_integrations: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_custom_db_engine_version-instance_method
      def modify_custom_db_engine_version: (
                                             engine: ::String,
                                             engine_version: ::String,
                                             ?description: ::String,
                                             ?status: ("available" | "inactive" | "inactive-except-restore")
                                           ) -> _ModifyCustomDBEngineVersionResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyCustomDBEngineVersionResponseSuccess

      interface _ModifyDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_cluster-instance_method
      def modify_db_cluster: (
                               db_cluster_identifier: ::String,
                               ?new_db_cluster_identifier: ::String,
                               ?apply_immediately: bool,
                               ?backup_retention_period: ::Integer,
                               ?db_cluster_parameter_group_name: ::String,
                               ?vpc_security_group_ids: Array[::String],
                               ?port: ::Integer,
                               ?master_user_password: ::String,
                               ?option_group_name: ::String,
                               ?preferred_backup_window: ::String,
                               ?preferred_maintenance_window: ::String,
                               ?enable_iam_database_authentication: bool,
                               ?backtrack_window: ::Integer,
                               ?cloudwatch_logs_export_configuration: {
                                 enable_log_types: Array[::String]?,
                                 disable_log_types: Array[::String]?
                               },
                               ?engine_version: ::String,
                               ?allow_major_version_upgrade: bool,
                               ?db_instance_parameter_group_name: ::String,
                               ?domain: ::String,
                               ?domain_iam_role_name: ::String,
                               ?scaling_configuration: {
                                 min_capacity: ::Integer?,
                                 max_capacity: ::Integer?,
                                 auto_pause: bool?,
                                 seconds_until_auto_pause: ::Integer?,
                                 timeout_action: ::String?,
                                 seconds_before_timeout: ::Integer?
                               },
                               ?deletion_protection: bool,
                               ?enable_http_endpoint: bool,
                               ?copy_tags_to_snapshot: bool,
                               ?enable_global_write_forwarding: bool,
                               ?db_cluster_instance_class: ::String,
                               ?allocated_storage: ::Integer,
                               ?storage_type: ::String,
                               ?iops: ::Integer,
                               ?auto_minor_version_upgrade: bool,
                               ?monitoring_interval: ::Integer,
                               ?monitoring_role_arn: ::String,
                               ?enable_performance_insights: bool,
                               ?performance_insights_kms_key_id: ::String,
                               ?performance_insights_retention_period: ::Integer,
                               ?serverless_v2_scaling_configuration: {
                                 min_capacity: ::Float?,
                                 max_capacity: ::Float?
                               },
                               ?network_type: ::String,
                               ?manage_master_user_password: bool,
                               ?rotate_master_user_password: bool,
                               ?master_user_secret_kms_key_id: ::String,
                               ?engine_mode: ::String,
                               ?allow_engine_mode_change: bool,
                               ?enable_local_write_forwarding: bool,
                               ?aws_backup_recovery_point_arn: ::String,
                               ?enable_limitless_database: bool
                             ) -> _ModifyDBClusterResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBClusterResponseSuccess

      interface _ModifyDBClusterEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterEndpoint]
        def db_cluster_endpoint_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def db_cluster_endpoint_resource_identifier: () -> ::String
        def endpoint: () -> ::String
        def status: () -> ::String
        def endpoint_type: () -> ::String
        def custom_endpoint_type: () -> ::String
        def static_members: () -> ::Array[::String]
        def excluded_members: () -> ::Array[::String]
        def db_cluster_endpoint_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_cluster_endpoint-instance_method
      def modify_db_cluster_endpoint: (
                                        db_cluster_endpoint_identifier: ::String,
                                        ?endpoint_type: ::String,
                                        ?static_members: Array[::String],
                                        ?excluded_members: Array[::String]
                                      ) -> _ModifyDBClusterEndpointResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBClusterEndpointResponseSuccess

      interface _ModifyDBClusterParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterParameterGroupNameMessage]
        def db_cluster_parameter_group_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_cluster_parameter_group-instance_method
      def modify_db_cluster_parameter_group: (
                                               db_cluster_parameter_group_name: ::String,
                                               parameters: Array[
                                                 {
                                                   parameter_name: ::String?,
                                                   parameter_value: ::String?,
                                                   description: ::String?,
                                                   source: ::String?,
                                                   apply_type: ::String?,
                                                   data_type: ::String?,
                                                   allowed_values: ::String?,
                                                   is_modifiable: bool?,
                                                   minimum_engine_version: ::String?,
                                                   apply_method: ("immediate" | "pending-reboot")?,
                                                   supported_engine_modes: Array[::String]?
                                                 },
                                               ]
                                             ) -> _ModifyDBClusterParameterGroupResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBClusterParameterGroupResponseSuccess

      interface _ModifyDBClusterSnapshotAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBClusterSnapshotAttributeResult]
        def db_cluster_snapshot_attributes_result: () -> Types::DBClusterSnapshotAttributesResult
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_cluster_snapshot_attribute-instance_method
      def modify_db_cluster_snapshot_attribute: (
                                                  db_cluster_snapshot_identifier: ::String,
                                                  attribute_name: ::String,
                                                  ?values_to_add: Array[::String],
                                                  ?values_to_remove: Array[::String]
                                                ) -> _ModifyDBClusterSnapshotAttributeResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBClusterSnapshotAttributeResponseSuccess

      interface _ModifyDBInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBInstanceResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_instance-instance_method
      def modify_db_instance: (
                                db_instance_identifier: ::String,
                                ?allocated_storage: ::Integer,
                                ?db_instance_class: ::String,
                                ?db_subnet_group_name: ::String,
                                ?db_security_groups: Array[::String],
                                ?vpc_security_group_ids: Array[::String],
                                ?apply_immediately: bool,
                                ?master_user_password: ::String,
                                ?db_parameter_group_name: ::String,
                                ?backup_retention_period: ::Integer,
                                ?preferred_backup_window: ::String,
                                ?preferred_maintenance_window: ::String,
                                ?multi_az: bool,
                                ?engine_version: ::String,
                                ?allow_major_version_upgrade: bool,
                                ?auto_minor_version_upgrade: bool,
                                ?license_model: ::String,
                                ?iops: ::Integer,
                                ?option_group_name: ::String,
                                ?new_db_instance_identifier: ::String,
                                ?storage_type: ::String,
                                ?tde_credential_arn: ::String,
                                ?tde_credential_password: ::String,
                                ?ca_certificate_identifier: ::String,
                                ?domain: ::String,
                                ?domain_fqdn: ::String,
                                ?domain_ou: ::String,
                                ?domain_auth_secret_arn: ::String,
                                ?domain_dns_ips: Array[::String],
                                ?copy_tags_to_snapshot: bool,
                                ?monitoring_interval: ::Integer,
                                ?db_port_number: ::Integer,
                                ?publicly_accessible: bool,
                                ?monitoring_role_arn: ::String,
                                ?domain_iam_role_name: ::String,
                                ?disable_domain: bool,
                                ?promotion_tier: ::Integer,
                                ?enable_iam_database_authentication: bool,
                                ?enable_performance_insights: bool,
                                ?performance_insights_kms_key_id: ::String,
                                ?performance_insights_retention_period: ::Integer,
                                ?cloudwatch_logs_export_configuration: {
                                  enable_log_types: Array[::String]?,
                                  disable_log_types: Array[::String]?
                                },
                                ?processor_features: Array[
                                  {
                                    name: ::String?,
                                    value: ::String?
                                  },
                                ],
                                ?use_default_processor_features: bool,
                                ?deletion_protection: bool,
                                ?max_allocated_storage: ::Integer,
                                ?certificate_rotation_restart: bool,
                                ?replica_mode: ("open-read-only" | "mounted"),
                                ?enable_customer_owned_ip: bool,
                                ?aws_backup_recovery_point_arn: ::String,
                                ?automation_mode: ("full" | "all-paused"),
                                ?resume_full_automation_mode_minutes: ::Integer,
                                ?network_type: ::String,
                                ?storage_throughput: ::Integer,
                                ?manage_master_user_password: bool,
                                ?rotate_master_user_password: bool,
                                ?master_user_secret_kms_key_id: ::String,
                                ?engine: ::String,
                                ?dedicated_log_volume: bool,
                                ?multi_tenant: bool
                              ) -> _ModifyDBInstanceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBInstanceResponseSuccess

      interface _ModifyDBParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBParameterGroupNameMessage]
        def db_parameter_group_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_parameter_group-instance_method
      def modify_db_parameter_group: (
                                       db_parameter_group_name: ::String,
                                       parameters: Array[
                                         {
                                           parameter_name: ::String?,
                                           parameter_value: ::String?,
                                           description: ::String?,
                                           source: ::String?,
                                           apply_type: ::String?,
                                           data_type: ::String?,
                                           allowed_values: ::String?,
                                           is_modifiable: bool?,
                                           minimum_engine_version: ::String?,
                                           apply_method: ("immediate" | "pending-reboot")?,
                                           supported_engine_modes: Array[::String]?
                                         },
                                       ]
                                     ) -> _ModifyDBParameterGroupResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBParameterGroupResponseSuccess

      interface _ModifyDBProxyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBProxyResponse]
        def db_proxy: () -> Types::DBProxy
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_proxy-instance_method
      def modify_db_proxy: (
                             db_proxy_name: ::String,
                             ?new_db_proxy_name: ::String,
                             ?auth: Array[
                               {
                                 description: ::String?,
                                 user_name: ::String?,
                                 auth_scheme: ("SECRETS")?,
                                 secret_arn: ::String?,
                                 iam_auth: ("DISABLED" | "REQUIRED" | "ENABLED")?,
                                 client_password_auth_type: ("MYSQL_NATIVE_PASSWORD" | "POSTGRES_SCRAM_SHA_256" | "POSTGRES_MD5" | "SQL_SERVER_AUTHENTICATION")?
                               },
                             ],
                             ?require_tls: bool,
                             ?idle_client_timeout: ::Integer,
                             ?debug_logging: bool,
                             ?role_arn: ::String,
                             ?security_groups: Array[::String]
                           ) -> _ModifyDBProxyResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBProxyResponseSuccess

      interface _ModifyDBProxyEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBProxyEndpointResponse]
        def db_proxy_endpoint: () -> Types::DBProxyEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_proxy_endpoint-instance_method
      def modify_db_proxy_endpoint: (
                                      db_proxy_endpoint_name: ::String,
                                      ?new_db_proxy_endpoint_name: ::String,
                                      ?vpc_security_group_ids: Array[::String]
                                    ) -> _ModifyDBProxyEndpointResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBProxyEndpointResponseSuccess

      interface _ModifyDBProxyTargetGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBProxyTargetGroupResponse]
        def db_proxy_target_group: () -> Types::DBProxyTargetGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_proxy_target_group-instance_method
      def modify_db_proxy_target_group: (
                                          target_group_name: ::String,
                                          db_proxy_name: ::String,
                                          ?connection_pool_config: {
                                            max_connections_percent: ::Integer?,
                                            max_idle_connections_percent: ::Integer?,
                                            connection_borrow_timeout: ::Integer?,
                                            session_pinning_filters: Array[::String]?,
                                            init_query: ::String?
                                          },
                                          ?new_name: ::String
                                        ) -> _ModifyDBProxyTargetGroupResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBProxyTargetGroupResponseSuccess

      interface _ModifyDBRecommendationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBRecommendationMessage]
        def db_recommendation: () -> Types::DBRecommendation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_recommendation-instance_method
      def modify_db_recommendation: (
                                      recommendation_id: ::String,
                                      ?locale: ::String,
                                      ?status: ::String,
                                      ?recommended_action_updates: Array[
                                        {
                                          action_id: ::String,
                                          status: ::String
                                        },
                                      ]
                                    ) -> _ModifyDBRecommendationResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBRecommendationResponseSuccess

      interface _ModifyDBShardGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBShardGroup]
        def db_shard_group_resource_id: () -> ::String
        def db_shard_group_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def max_acu: () -> ::Float
        def compute_redundancy: () -> ::Integer
        def status: () -> ::String
        def publicly_accessible: () -> bool
        def endpoint: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_shard_group-instance_method
      def modify_db_shard_group: (
                                   db_shard_group_identifier: ::String,
                                   ?max_acu: ::Float
                                 ) -> _ModifyDBShardGroupResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBShardGroupResponseSuccess

      interface _ModifyDBSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBSnapshotResult]
        def db_snapshot: () -> Types::DBSnapshot
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_snapshot-instance_method
      def modify_db_snapshot: (
                                db_snapshot_identifier: ::String,
                                ?engine_version: ::String,
                                ?option_group_name: ::String
                              ) -> _ModifyDBSnapshotResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBSnapshotResponseSuccess

      interface _ModifyDBSnapshotAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBSnapshotAttributeResult]
        def db_snapshot_attributes_result: () -> Types::DBSnapshotAttributesResult
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_snapshot_attribute-instance_method
      def modify_db_snapshot_attribute: (
                                          db_snapshot_identifier: ::String,
                                          attribute_name: ::String,
                                          ?values_to_add: Array[::String],
                                          ?values_to_remove: Array[::String]
                                        ) -> _ModifyDBSnapshotAttributeResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBSnapshotAttributeResponseSuccess

      interface _ModifyDBSubnetGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDBSubnetGroupResult]
        def db_subnet_group: () -> Types::DBSubnetGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_db_subnet_group-instance_method
      def modify_db_subnet_group: (
                                    db_subnet_group_name: ::String,
                                    ?db_subnet_group_description: ::String,
                                    subnet_ids: Array[::String]
                                  ) -> _ModifyDBSubnetGroupResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDBSubnetGroupResponseSuccess

      interface _ModifyEventSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyEventSubscriptionResult]
        def event_subscription: () -> Types::EventSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_event_subscription-instance_method
      def modify_event_subscription: (
                                       subscription_name: ::String,
                                       ?sns_topic_arn: ::String,
                                       ?source_type: ::String,
                                       ?event_categories: Array[::String],
                                       ?enabled: bool
                                     ) -> _ModifyEventSubscriptionResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyEventSubscriptionResponseSuccess

      interface _ModifyGlobalClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyGlobalClusterResult]
        def global_cluster: () -> Types::GlobalCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_global_cluster-instance_method
      def modify_global_cluster: (
                                   ?global_cluster_identifier: ::String,
                                   ?new_global_cluster_identifier: ::String,
                                   ?deletion_protection: bool,
                                   ?engine_version: ::String,
                                   ?allow_major_version_upgrade: bool
                                 ) -> _ModifyGlobalClusterResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyGlobalClusterResponseSuccess

      interface _ModifyOptionGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyOptionGroupResult]
        def option_group: () -> Types::OptionGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_option_group-instance_method
      def modify_option_group: (
                                 option_group_name: ::String,
                                 ?options_to_include: Array[
                                   {
                                     option_name: ::String,
                                     port: ::Integer?,
                                     option_version: ::String?,
                                     db_security_group_memberships: Array[::String]?,
                                     vpc_security_group_memberships: Array[::String]?,
                                     option_settings: Array[
                                       {
                                         name: ::String?,
                                         value: ::String?,
                                         default_value: ::String?,
                                         description: ::String?,
                                         apply_type: ::String?,
                                         data_type: ::String?,
                                         allowed_values: ::String?,
                                         is_modifiable: bool?,
                                         is_collection: bool?
                                       },
                                     ]?
                                   },
                                 ],
                                 ?options_to_remove: Array[::String],
                                 ?apply_immediately: bool
                               ) -> _ModifyOptionGroupResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyOptionGroupResponseSuccess

      interface _ModifyTenantDatabaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTenantDatabaseResult]
        def tenant_database: () -> Types::TenantDatabase
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#modify_tenant_database-instance_method
      def modify_tenant_database: (
                                    db_instance_identifier: ::String,
                                    tenant_db_name: ::String,
                                    ?master_user_password: ::String,
                                    ?new_tenant_db_name: ::String
                                  ) -> _ModifyTenantDatabaseResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTenantDatabaseResponseSuccess

      interface _PromoteReadReplicaResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PromoteReadReplicaResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#promote_read_replica-instance_method
      def promote_read_replica: (
                                  db_instance_identifier: ::String,
                                  ?backup_retention_period: ::Integer,
                                  ?preferred_backup_window: ::String
                                ) -> _PromoteReadReplicaResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PromoteReadReplicaResponseSuccess

      interface _PromoteReadReplicaDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PromoteReadReplicaDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#promote_read_replica_db_cluster-instance_method
      def promote_read_replica_db_cluster: (
                                             db_cluster_identifier: ::String
                                           ) -> _PromoteReadReplicaDBClusterResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PromoteReadReplicaDBClusterResponseSuccess

      interface _PurchaseReservedDBInstancesOfferingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PurchaseReservedDBInstancesOfferingResult]
        def reserved_db_instance: () -> Types::ReservedDBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#purchase_reserved_db_instances_offering-instance_method
      def purchase_reserved_db_instances_offering: (
                                                     reserved_db_instances_offering_id: ::String,
                                                     ?reserved_db_instance_id: ::String,
                                                     ?db_instance_count: ::Integer,
                                                     ?tags: Array[
                                                       {
                                                         key: ::String?,
                                                         value: ::String?
                                                       },
                                                     ]
                                                   ) -> _PurchaseReservedDBInstancesOfferingResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PurchaseReservedDBInstancesOfferingResponseSuccess

      interface _RebootDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RebootDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#reboot_db_cluster-instance_method
      def reboot_db_cluster: (
                               db_cluster_identifier: ::String
                             ) -> _RebootDBClusterResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RebootDBClusterResponseSuccess

      interface _RebootDBInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RebootDBInstanceResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#reboot_db_instance-instance_method
      def reboot_db_instance: (
                                db_instance_identifier: ::String,
                                ?force_failover: bool
                              ) -> _RebootDBInstanceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RebootDBInstanceResponseSuccess

      interface _RebootDBShardGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBShardGroup]
        def db_shard_group_resource_id: () -> ::String
        def db_shard_group_identifier: () -> ::String
        def db_cluster_identifier: () -> ::String
        def max_acu: () -> ::Float
        def compute_redundancy: () -> ::Integer
        def status: () -> ::String
        def publicly_accessible: () -> bool
        def endpoint: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#reboot_db_shard_group-instance_method
      def reboot_db_shard_group: (
                                   db_shard_group_identifier: ::String
                                 ) -> _RebootDBShardGroupResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RebootDBShardGroupResponseSuccess

      interface _RegisterDBProxyTargetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterDBProxyTargetsResponse]
        def db_proxy_targets: () -> ::Array[Types::DBProxyTarget]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#register_db_proxy_targets-instance_method
      def register_db_proxy_targets: (
                                       db_proxy_name: ::String,
                                       ?target_group_name: ::String,
                                       ?db_instance_identifiers: Array[::String],
                                       ?db_cluster_identifiers: Array[::String]
                                     ) -> _RegisterDBProxyTargetsResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterDBProxyTargetsResponseSuccess

      interface _RemoveFromGlobalClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RemoveFromGlobalClusterResult]
        def global_cluster: () -> Types::GlobalCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#remove_from_global_cluster-instance_method
      def remove_from_global_cluster: (
                                        ?global_cluster_identifier: ::String,
                                        ?db_cluster_identifier: ::String
                                      ) -> _RemoveFromGlobalClusterResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RemoveFromGlobalClusterResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#remove_role_from_db_cluster-instance_method
      def remove_role_from_db_cluster: (
                                         db_cluster_identifier: ::String,
                                         role_arn: ::String,
                                         ?feature_name: ::String
                                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#remove_role_from_db_instance-instance_method
      def remove_role_from_db_instance: (
                                          db_instance_identifier: ::String,
                                          role_arn: ::String,
                                          feature_name: ::String
                                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _RemoveSourceIdentifierFromSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RemoveSourceIdentifierFromSubscriptionResult]
        def event_subscription: () -> Types::EventSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#remove_source_identifier_from_subscription-instance_method
      def remove_source_identifier_from_subscription: (
                                                        subscription_name: ::String,
                                                        source_identifier: ::String
                                                      ) -> _RemoveSourceIdentifierFromSubscriptionResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RemoveSourceIdentifierFromSubscriptionResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#remove_tags_from_resource-instance_method
      def remove_tags_from_resource: (
                                       resource_name: ::String,
                                       tag_keys: Array[::String]
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ResetDBClusterParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBClusterParameterGroupNameMessage]
        def db_cluster_parameter_group_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#reset_db_cluster_parameter_group-instance_method
      def reset_db_cluster_parameter_group: (
                                              db_cluster_parameter_group_name: ::String,
                                              ?reset_all_parameters: bool,
                                              ?parameters: Array[
                                                {
                                                  parameter_name: ::String?,
                                                  parameter_value: ::String?,
                                                  description: ::String?,
                                                  source: ::String?,
                                                  apply_type: ::String?,
                                                  data_type: ::String?,
                                                  allowed_values: ::String?,
                                                  is_modifiable: bool?,
                                                  minimum_engine_version: ::String?,
                                                  apply_method: ("immediate" | "pending-reboot")?,
                                                  supported_engine_modes: Array[::String]?
                                                },
                                              ]
                                            ) -> _ResetDBClusterParameterGroupResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ResetDBClusterParameterGroupResponseSuccess

      interface _ResetDBParameterGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DBParameterGroupNameMessage]
        def db_parameter_group_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#reset_db_parameter_group-instance_method
      def reset_db_parameter_group: (
                                      db_parameter_group_name: ::String,
                                      ?reset_all_parameters: bool,
                                      ?parameters: Array[
                                        {
                                          parameter_name: ::String?,
                                          parameter_value: ::String?,
                                          description: ::String?,
                                          source: ::String?,
                                          apply_type: ::String?,
                                          data_type: ::String?,
                                          allowed_values: ::String?,
                                          is_modifiable: bool?,
                                          minimum_engine_version: ::String?,
                                          apply_method: ("immediate" | "pending-reboot")?,
                                          supported_engine_modes: Array[::String]?
                                        },
                                      ]
                                    ) -> _ResetDBParameterGroupResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ResetDBParameterGroupResponseSuccess

      interface _RestoreDBClusterFromS3ResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreDBClusterFromS3Result]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#restore_db_cluster_from_s3-instance_method
      def restore_db_cluster_from_s3: (
                                        ?availability_zones: Array[::String],
                                        ?backup_retention_period: ::Integer,
                                        ?character_set_name: ::String,
                                        ?database_name: ::String,
                                        db_cluster_identifier: ::String,
                                        ?db_cluster_parameter_group_name: ::String,
                                        ?vpc_security_group_ids: Array[::String],
                                        ?db_subnet_group_name: ::String,
                                        engine: ::String,
                                        ?engine_version: ::String,
                                        ?port: ::Integer,
                                        master_username: ::String,
                                        ?master_user_password: ::String,
                                        ?option_group_name: ::String,
                                        ?preferred_backup_window: ::String,
                                        ?preferred_maintenance_window: ::String,
                                        ?tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ],
                                        ?storage_encrypted: bool,
                                        ?kms_key_id: ::String,
                                        ?enable_iam_database_authentication: bool,
                                        source_engine: ::String,
                                        source_engine_version: ::String,
                                        s3_bucket_name: ::String,
                                        ?s3_prefix: ::String,
                                        s3_ingestion_role_arn: ::String,
                                        ?backtrack_window: ::Integer,
                                        ?enable_cloudwatch_logs_exports: Array[::String],
                                        ?deletion_protection: bool,
                                        ?copy_tags_to_snapshot: bool,
                                        ?domain: ::String,
                                        ?domain_iam_role_name: ::String,
                                        ?serverless_v2_scaling_configuration: {
                                          min_capacity: ::Float?,
                                          max_capacity: ::Float?
                                        },
                                        ?network_type: ::String,
                                        ?manage_master_user_password: bool,
                                        ?master_user_secret_kms_key_id: ::String,
                                        ?storage_type: ::String
                                      ) -> _RestoreDBClusterFromS3ResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreDBClusterFromS3ResponseSuccess

      interface _RestoreDBClusterFromSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreDBClusterFromSnapshotResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#restore_db_cluster_from_snapshot-instance_method
      def restore_db_cluster_from_snapshot: (
                                              ?availability_zones: Array[::String],
                                              db_cluster_identifier: ::String,
                                              snapshot_identifier: ::String,
                                              engine: ::String,
                                              ?engine_version: ::String,
                                              ?port: ::Integer,
                                              ?db_subnet_group_name: ::String,
                                              ?database_name: ::String,
                                              ?option_group_name: ::String,
                                              ?vpc_security_group_ids: Array[::String],
                                              ?tags: Array[
                                                {
                                                  key: ::String?,
                                                  value: ::String?
                                                },
                                              ],
                                              ?kms_key_id: ::String,
                                              ?enable_iam_database_authentication: bool,
                                              ?backtrack_window: ::Integer,
                                              ?enable_cloudwatch_logs_exports: Array[::String],
                                              ?engine_mode: ::String,
                                              ?scaling_configuration: {
                                                min_capacity: ::Integer?,
                                                max_capacity: ::Integer?,
                                                auto_pause: bool?,
                                                seconds_until_auto_pause: ::Integer?,
                                                timeout_action: ::String?,
                                                seconds_before_timeout: ::Integer?
                                              },
                                              ?db_cluster_parameter_group_name: ::String,
                                              ?deletion_protection: bool,
                                              ?copy_tags_to_snapshot: bool,
                                              ?domain: ::String,
                                              ?domain_iam_role_name: ::String,
                                              ?db_cluster_instance_class: ::String,
                                              ?storage_type: ::String,
                                              ?iops: ::Integer,
                                              ?publicly_accessible: bool,
                                              ?serverless_v2_scaling_configuration: {
                                                min_capacity: ::Float?,
                                                max_capacity: ::Float?
                                              },
                                              ?network_type: ::String,
                                              ?rds_custom_cluster_configuration: {
                                                interconnect_subnet_id: ::String?,
                                                transit_gateway_multicast_domain_id: ::String?,
                                                replica_mode: ("open-read-only" | "mounted")?
                                              }
                                            ) -> _RestoreDBClusterFromSnapshotResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreDBClusterFromSnapshotResponseSuccess

      interface _RestoreDBClusterToPointInTimeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreDBClusterToPointInTimeResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#restore_db_cluster_to_point_in_time-instance_method
      def restore_db_cluster_to_point_in_time: (
                                                 db_cluster_identifier: ::String,
                                                 ?restore_type: ::String,
                                                 ?source_db_cluster_identifier: ::String,
                                                 ?restore_to_time: ::Time,
                                                 ?use_latest_restorable_time: bool,
                                                 ?port: ::Integer,
                                                 ?db_subnet_group_name: ::String,
                                                 ?option_group_name: ::String,
                                                 ?vpc_security_group_ids: Array[::String],
                                                 ?tags: Array[
                                                   {
                                                     key: ::String?,
                                                     value: ::String?
                                                   },
                                                 ],
                                                 ?kms_key_id: ::String,
                                                 ?enable_iam_database_authentication: bool,
                                                 ?backtrack_window: ::Integer,
                                                 ?enable_cloudwatch_logs_exports: Array[::String],
                                                 ?db_cluster_parameter_group_name: ::String,
                                                 ?deletion_protection: bool,
                                                 ?copy_tags_to_snapshot: bool,
                                                 ?domain: ::String,
                                                 ?domain_iam_role_name: ::String,
                                                 ?scaling_configuration: {
                                                   min_capacity: ::Integer?,
                                                   max_capacity: ::Integer?,
                                                   auto_pause: bool?,
                                                   seconds_until_auto_pause: ::Integer?,
                                                   timeout_action: ::String?,
                                                   seconds_before_timeout: ::Integer?
                                                 },
                                                 ?engine_mode: ::String,
                                                 ?db_cluster_instance_class: ::String,
                                                 ?storage_type: ::String,
                                                 ?publicly_accessible: bool,
                                                 ?iops: ::Integer,
                                                 ?serverless_v2_scaling_configuration: {
                                                   min_capacity: ::Float?,
                                                   max_capacity: ::Float?
                                                 },
                                                 ?network_type: ::String,
                                                 ?source_db_cluster_resource_id: ::String,
                                                 ?rds_custom_cluster_configuration: {
                                                   interconnect_subnet_id: ::String?,
                                                   transit_gateway_multicast_domain_id: ::String?,
                                                   replica_mode: ("open-read-only" | "mounted")?
                                                 }
                                               ) -> _RestoreDBClusterToPointInTimeResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreDBClusterToPointInTimeResponseSuccess

      interface _RestoreDBInstanceFromDBSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreDBInstanceFromDBSnapshotResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#restore_db_instance_from_db_snapshot-instance_method
      def restore_db_instance_from_db_snapshot: (
                                                  db_instance_identifier: ::String,
                                                  ?db_snapshot_identifier: ::String,
                                                  ?db_instance_class: ::String,
                                                  ?port: ::Integer,
                                                  ?availability_zone: ::String,
                                                  ?db_subnet_group_name: ::String,
                                                  ?multi_az: bool,
                                                  ?publicly_accessible: bool,
                                                  ?auto_minor_version_upgrade: bool,
                                                  ?license_model: ::String,
                                                  ?db_name: ::String,
                                                  ?engine: ::String,
                                                  ?iops: ::Integer,
                                                  ?option_group_name: ::String,
                                                  ?tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ],
                                                  ?storage_type: ::String,
                                                  ?tde_credential_arn: ::String,
                                                  ?tde_credential_password: ::String,
                                                  ?vpc_security_group_ids: Array[::String],
                                                  ?domain: ::String,
                                                  ?domain_fqdn: ::String,
                                                  ?domain_ou: ::String,
                                                  ?domain_auth_secret_arn: ::String,
                                                  ?domain_dns_ips: Array[::String],
                                                  ?copy_tags_to_snapshot: bool,
                                                  ?domain_iam_role_name: ::String,
                                                  ?enable_iam_database_authentication: bool,
                                                  ?enable_cloudwatch_logs_exports: Array[::String],
                                                  ?processor_features: Array[
                                                    {
                                                      name: ::String?,
                                                      value: ::String?
                                                    },
                                                  ],
                                                  ?use_default_processor_features: bool,
                                                  ?db_parameter_group_name: ::String,
                                                  ?deletion_protection: bool,
                                                  ?enable_customer_owned_ip: bool,
                                                  ?custom_iam_instance_profile: ::String,
                                                  ?backup_target: ::String,
                                                  ?network_type: ::String,
                                                  ?storage_throughput: ::Integer,
                                                  ?db_cluster_snapshot_identifier: ::String,
                                                  ?allocated_storage: ::Integer,
                                                  ?dedicated_log_volume: bool
                                                ) -> _RestoreDBInstanceFromDBSnapshotResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreDBInstanceFromDBSnapshotResponseSuccess

      interface _RestoreDBInstanceFromS3ResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreDBInstanceFromS3Result]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#restore_db_instance_from_s3-instance_method
      def restore_db_instance_from_s3: (
                                         ?db_name: ::String,
                                         db_instance_identifier: ::String,
                                         ?allocated_storage: ::Integer,
                                         db_instance_class: ::String,
                                         engine: ::String,
                                         ?master_username: ::String,
                                         ?master_user_password: ::String,
                                         ?db_security_groups: Array[::String],
                                         ?vpc_security_group_ids: Array[::String],
                                         ?availability_zone: ::String,
                                         ?db_subnet_group_name: ::String,
                                         ?preferred_maintenance_window: ::String,
                                         ?db_parameter_group_name: ::String,
                                         ?backup_retention_period: ::Integer,
                                         ?preferred_backup_window: ::String,
                                         ?port: ::Integer,
                                         ?multi_az: bool,
                                         ?engine_version: ::String,
                                         ?auto_minor_version_upgrade: bool,
                                         ?license_model: ::String,
                                         ?iops: ::Integer,
                                         ?option_group_name: ::String,
                                         ?publicly_accessible: bool,
                                         ?tags: Array[
                                           {
                                             key: ::String?,
                                             value: ::String?
                                           },
                                         ],
                                         ?storage_type: ::String,
                                         ?storage_encrypted: bool,
                                         ?kms_key_id: ::String,
                                         ?copy_tags_to_snapshot: bool,
                                         ?monitoring_interval: ::Integer,
                                         ?monitoring_role_arn: ::String,
                                         ?enable_iam_database_authentication: bool,
                                         source_engine: ::String,
                                         source_engine_version: ::String,
                                         s3_bucket_name: ::String,
                                         ?s3_prefix: ::String,
                                         s3_ingestion_role_arn: ::String,
                                         ?enable_performance_insights: bool,
                                         ?performance_insights_kms_key_id: ::String,
                                         ?performance_insights_retention_period: ::Integer,
                                         ?enable_cloudwatch_logs_exports: Array[::String],
                                         ?processor_features: Array[
                                           {
                                             name: ::String?,
                                             value: ::String?
                                           },
                                         ],
                                         ?use_default_processor_features: bool,
                                         ?deletion_protection: bool,
                                         ?max_allocated_storage: ::Integer,
                                         ?network_type: ::String,
                                         ?storage_throughput: ::Integer,
                                         ?manage_master_user_password: bool,
                                         ?master_user_secret_kms_key_id: ::String,
                                         ?dedicated_log_volume: bool
                                       ) -> _RestoreDBInstanceFromS3ResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreDBInstanceFromS3ResponseSuccess

      interface _RestoreDBInstanceToPointInTimeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreDBInstanceToPointInTimeResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#restore_db_instance_to_point_in_time-instance_method
      def restore_db_instance_to_point_in_time: (
                                                  ?source_db_instance_identifier: ::String,
                                                  target_db_instance_identifier: ::String,
                                                  ?restore_time: ::Time,
                                                  ?use_latest_restorable_time: bool,
                                                  ?db_instance_class: ::String,
                                                  ?port: ::Integer,
                                                  ?availability_zone: ::String,
                                                  ?db_subnet_group_name: ::String,
                                                  ?multi_az: bool,
                                                  ?publicly_accessible: bool,
                                                  ?auto_minor_version_upgrade: bool,
                                                  ?license_model: ::String,
                                                  ?db_name: ::String,
                                                  ?engine: ::String,
                                                  ?iops: ::Integer,
                                                  ?option_group_name: ::String,
                                                  ?copy_tags_to_snapshot: bool,
                                                  ?tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ],
                                                  ?storage_type: ::String,
                                                  ?tde_credential_arn: ::String,
                                                  ?tde_credential_password: ::String,
                                                  ?vpc_security_group_ids: Array[::String],
                                                  ?domain: ::String,
                                                  ?domain_iam_role_name: ::String,
                                                  ?domain_fqdn: ::String,
                                                  ?domain_ou: ::String,
                                                  ?domain_auth_secret_arn: ::String,
                                                  ?domain_dns_ips: Array[::String],
                                                  ?enable_iam_database_authentication: bool,
                                                  ?enable_cloudwatch_logs_exports: Array[::String],
                                                  ?processor_features: Array[
                                                    {
                                                      name: ::String?,
                                                      value: ::String?
                                                    },
                                                  ],
                                                  ?use_default_processor_features: bool,
                                                  ?db_parameter_group_name: ::String,
                                                  ?deletion_protection: bool,
                                                  ?source_dbi_resource_id: ::String,
                                                  ?max_allocated_storage: ::Integer,
                                                  ?source_db_instance_automated_backups_arn: ::String,
                                                  ?enable_customer_owned_ip: bool,
                                                  ?custom_iam_instance_profile: ::String,
                                                  ?backup_target: ::String,
                                                  ?network_type: ::String,
                                                  ?storage_throughput: ::Integer,
                                                  ?allocated_storage: ::Integer,
                                                  ?dedicated_log_volume: bool
                                                ) -> _RestoreDBInstanceToPointInTimeResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreDBInstanceToPointInTimeResponseSuccess

      interface _RevokeDBSecurityGroupIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RevokeDBSecurityGroupIngressResult]
        def db_security_group: () -> Types::DBSecurityGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#revoke_db_security_group_ingress-instance_method
      def revoke_db_security_group_ingress: (
                                              db_security_group_name: ::String,
                                              ?cidrip: ::String,
                                              ?ec2_security_group_name: ::String,
                                              ?ec2_security_group_id: ::String,
                                              ?ec2_security_group_owner_id: ::String
                                            ) -> _RevokeDBSecurityGroupIngressResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RevokeDBSecurityGroupIngressResponseSuccess

      interface _StartActivityStreamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartActivityStreamResponse]
        def kms_key_id: () -> ::String
        def kinesis_stream_name: () -> ::String
        def status: () -> ("stopped" | "starting" | "started" | "stopping")
        def mode: () -> ("sync" | "async")
        def apply_immediately: () -> bool
        def engine_native_audit_fields_included: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#start_activity_stream-instance_method
      def start_activity_stream: (
                                   resource_arn: ::String,
                                   mode: ("sync" | "async"),
                                   kms_key_id: ::String,
                                   ?apply_immediately: bool,
                                   ?engine_native_audit_fields_included: bool
                                 ) -> _StartActivityStreamResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartActivityStreamResponseSuccess

      interface _StartDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#start_db_cluster-instance_method
      def start_db_cluster: (
                              db_cluster_identifier: ::String
                            ) -> _StartDBClusterResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartDBClusterResponseSuccess

      interface _StartDBInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartDBInstanceResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#start_db_instance-instance_method
      def start_db_instance: (
                               db_instance_identifier: ::String
                             ) -> _StartDBInstanceResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartDBInstanceResponseSuccess

      interface _StartDBInstanceAutomatedBackupsReplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartDBInstanceAutomatedBackupsReplicationResult]
        def db_instance_automated_backup: () -> Types::DBInstanceAutomatedBackup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#start_db_instance_automated_backups_replication-instance_method
      def start_db_instance_automated_backups_replication: (
                                                             source_db_instance_arn: ::String,
                                                             ?backup_retention_period: ::Integer,
                                                             ?kms_key_id: ::String,
                                                             ?pre_signed_url: ::String,
                                                             ?source_region: ::String
                                                           ) -> _StartDBInstanceAutomatedBackupsReplicationResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartDBInstanceAutomatedBackupsReplicationResponseSuccess

      interface _StartExportTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportTask]
        def export_task_identifier: () -> ::String
        def source_arn: () -> ::String
        def export_only: () -> ::Array[::String]
        def snapshot_time: () -> ::Time
        def task_start_time: () -> ::Time
        def task_end_time: () -> ::Time
        def s3_bucket: () -> ::String
        def s3_prefix: () -> ::String
        def iam_role_arn: () -> ::String
        def kms_key_id: () -> ::String
        def status: () -> ::String
        def percent_progress: () -> ::Integer
        def total_extracted_data_in_gb: () -> ::Integer
        def failure_cause: () -> ::String
        def warning_message: () -> ::String
        def source_type: () -> ("SNAPSHOT" | "CLUSTER")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#start_export_task-instance_method
      def start_export_task: (
                               export_task_identifier: ::String,
                               source_arn: ::String,
                               s3_bucket_name: ::String,
                               iam_role_arn: ::String,
                               kms_key_id: ::String,
                               ?s3_prefix: ::String,
                               ?export_only: Array[::String]
                             ) -> _StartExportTaskResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartExportTaskResponseSuccess

      interface _StopActivityStreamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopActivityStreamResponse]
        def kms_key_id: () -> ::String
        def kinesis_stream_name: () -> ::String
        def status: () -> ("stopped" | "starting" | "started" | "stopping")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#stop_activity_stream-instance_method
      def stop_activity_stream: (
                                  resource_arn: ::String,
                                  ?apply_immediately: bool
                                ) -> _StopActivityStreamResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopActivityStreamResponseSuccess

      interface _StopDBClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopDBClusterResult]
        def db_cluster: () -> Types::DBCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#stop_db_cluster-instance_method
      def stop_db_cluster: (
                             db_cluster_identifier: ::String
                           ) -> _StopDBClusterResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopDBClusterResponseSuccess

      interface _StopDBInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopDBInstanceResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#stop_db_instance-instance_method
      def stop_db_instance: (
                              db_instance_identifier: ::String,
                              ?db_snapshot_identifier: ::String
                            ) -> _StopDBInstanceResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopDBInstanceResponseSuccess

      interface _StopDBInstanceAutomatedBackupsReplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopDBInstanceAutomatedBackupsReplicationResult]
        def db_instance_automated_backup: () -> Types::DBInstanceAutomatedBackup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#stop_db_instance_automated_backups_replication-instance_method
      def stop_db_instance_automated_backups_replication: (
                                                            source_db_instance_arn: ::String
                                                          ) -> _StopDBInstanceAutomatedBackupsReplicationResponseSuccess
                                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopDBInstanceAutomatedBackupsReplicationResponseSuccess

      interface _SwitchoverBlueGreenDeploymentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SwitchoverBlueGreenDeploymentResponse]
        def blue_green_deployment: () -> Types::BlueGreenDeployment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#switchover_blue_green_deployment-instance_method
      def switchover_blue_green_deployment: (
                                              blue_green_deployment_identifier: ::String,
                                              ?switchover_timeout: ::Integer
                                            ) -> _SwitchoverBlueGreenDeploymentResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SwitchoverBlueGreenDeploymentResponseSuccess

      interface _SwitchoverGlobalClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SwitchoverGlobalClusterResult]
        def global_cluster: () -> Types::GlobalCluster
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#switchover_global_cluster-instance_method
      def switchover_global_cluster: (
                                       global_cluster_identifier: ::String,
                                       target_db_cluster_identifier: ::String
                                     ) -> _SwitchoverGlobalClusterResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SwitchoverGlobalClusterResponseSuccess

      interface _SwitchoverReadReplicaResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SwitchoverReadReplicaResult]
        def db_instance: () -> Types::DBInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#switchover_read_replica-instance_method
      def switchover_read_replica: (
                                     db_instance_identifier: ::String
                                   ) -> _SwitchoverReadReplicaResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SwitchoverReadReplicaResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RDS/Client.html#wait_until-instance_method
      def wait_until: (:db_cluster_available waiter_name, 
                    ?db_cluster_identifier: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String,
                    ?include_shared: bool
                  ) -> Client::_DescribeDBClustersResponseSuccess
                    | (:db_cluster_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBClustersResponseSuccess
                    | (:db_cluster_deleted waiter_name, 
                    ?db_cluster_identifier: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String,
                    ?include_shared: bool
                  ) -> Client::_DescribeDBClustersResponseSuccess
                    | (:db_cluster_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBClustersResponseSuccess
                    | (:db_cluster_snapshot_available waiter_name, 
                    ?db_cluster_identifier: ::String,
                    ?db_cluster_snapshot_identifier: ::String,
                    ?snapshot_type: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String,
                    ?include_shared: bool,
                    ?include_public: bool,
                    ?db_cluster_resource_id: ::String
                  ) -> Client::_DescribeDBClusterSnapshotsResponseSuccess
                    | (:db_cluster_snapshot_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBClusterSnapshotsResponseSuccess
                    | (:db_cluster_snapshot_deleted waiter_name, 
                    ?db_cluster_identifier: ::String,
                    ?db_cluster_snapshot_identifier: ::String,
                    ?snapshot_type: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String,
                    ?include_shared: bool,
                    ?include_public: bool,
                    ?db_cluster_resource_id: ::String
                  ) -> Client::_DescribeDBClusterSnapshotsResponseSuccess
                    | (:db_cluster_snapshot_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBClusterSnapshotsResponseSuccess
                    | (:db_instance_available waiter_name, 
                    ?db_instance_identifier: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String
                  ) -> Client::_DescribeDBInstancesResponseSuccess
                    | (:db_instance_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBInstancesResponseSuccess
                    | (:db_instance_deleted waiter_name, 
                    ?db_instance_identifier: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String
                  ) -> Client::_DescribeDBInstancesResponseSuccess
                    | (:db_instance_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBInstancesResponseSuccess
                    | (:db_snapshot_available waiter_name, 
                    ?db_instance_identifier: ::String,
                    ?db_snapshot_identifier: ::String,
                    ?snapshot_type: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String,
                    ?include_shared: bool,
                    ?include_public: bool,
                    ?dbi_resource_id: ::String
                  ) -> Client::_DescribeDBSnapshotsResponseSuccess
                    | (:db_snapshot_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBSnapshotsResponseSuccess
                    | (:db_snapshot_deleted waiter_name, 
                    ?db_instance_identifier: ::String,
                    ?db_snapshot_identifier: ::String,
                    ?snapshot_type: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?max_records: ::Integer,
                    ?marker: ::String,
                    ?include_shared: bool,
                    ?include_public: bool,
                    ?dbi_resource_id: ::String
                  ) -> Client::_DescribeDBSnapshotsResponseSuccess
                    | (:db_snapshot_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDBSnapshotsResponseSuccess
                    | (:tenant_database_available waiter_name, 
                    ?db_instance_identifier: ::String,
                    ?tenant_db_name: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?marker: ::String,
                    ?max_records: ::Integer
                  ) -> Client::_DescribeTenantDatabasesResponseSuccess
                    | (:tenant_database_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeTenantDatabasesResponseSuccess
                    | (:tenant_database_deleted waiter_name, 
                    ?db_instance_identifier: ::String,
                    ?tenant_db_name: ::String,
                    ?filters: Array[
                      {
                        name: ::String,
                        values: Array[::String]
                      },
                    ],
                    ?marker: ::String,
                    ?max_records: ::Integer
                  ) -> Client::_DescribeTenantDatabasesResponseSuccess
                    | (:tenant_database_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeTenantDatabasesResponseSuccess
    end
  end
end

