# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module MediaLive
    module Waiters

      class ChannelCreated
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelResponseSuccess
      end

      class ChannelDeleted
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelResponseSuccess
      end

      class ChannelPlacementGroupAssigned
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_placement_group_id: ::String,
                    cluster_id: ::String
                  ) -> Client::_DescribeChannelPlacementGroupResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelPlacementGroupResponseSuccess
      end

      class ChannelPlacementGroupDeleted
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_placement_group_id: ::String,
                    cluster_id: ::String
                  ) -> Client::_DescribeChannelPlacementGroupResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelPlacementGroupResponseSuccess
      end

      class ChannelPlacementGroupUnassigned
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_placement_group_id: ::String,
                    cluster_id: ::String
                  ) -> Client::_DescribeChannelPlacementGroupResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelPlacementGroupResponseSuccess
      end

      class ChannelRunning
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelResponseSuccess
      end

      class ChannelStopped
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeChannelResponseSuccess
      end

      class ClusterCreated
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    cluster_id: ::String
                  ) -> Client::_DescribeClusterResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeClusterResponseSuccess
      end

      class ClusterDeleted
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    cluster_id: ::String
                  ) -> Client::_DescribeClusterResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeClusterResponseSuccess
      end

      class InputAttached
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    input_id: ::String
                  ) -> Client::_DescribeInputResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeInputResponseSuccess
      end

      class InputDeleted
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    input_id: ::String
                  ) -> Client::_DescribeInputResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeInputResponseSuccess
      end

      class InputDetached
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    input_id: ::String
                  ) -> Client::_DescribeInputResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeInputResponseSuccess
      end

      class MultiplexCreated
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeMultiplexResponseSuccess
      end

      class MultiplexDeleted
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeMultiplexResponseSuccess
      end

      class MultiplexRunning
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeMultiplexResponseSuccess
      end

      class MultiplexStopped
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeMultiplexResponseSuccess
      end

      class NodeDeregistered
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    cluster_id: ::String,
                    node_id: ::String
                  ) -> Client::_DescribeNodeResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeNodeResponseSuccess
      end

      class NodeRegistered
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    cluster_id: ::String,
                    node_id: ::String
                  ) -> Client::_DescribeNodeResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_DescribeNodeResponseSuccess
      end

      class SignalMapCreated
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    identifier: ::String
                  ) -> Client::_GetSignalMapResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_GetSignalMapResponseSuccess
      end

      class SignalMapMonitorDeleted
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    identifier: ::String
                  ) -> Client::_GetSignalMapResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_GetSignalMapResponseSuccess
      end

      class SignalMapMonitorDeployed
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    identifier: ::String
                  ) -> Client::_GetSignalMapResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_GetSignalMapResponseSuccess
      end

      class SignalMapUpdated
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    identifier: ::String
                  ) -> Client::_GetSignalMapResponseSuccess
                | (Hash[Symbol, untyped]) -> Client::_GetSignalMapResponseSuccess
      end
    end
  end
end
