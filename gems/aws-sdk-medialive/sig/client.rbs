# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module MediaLive
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _AcceptInputDeviceTransferResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptInputDeviceTransferResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#accept_input_device_transfer-instance_method
      def accept_input_device_transfer: (
                                          input_device_id: ::String
                                        ) -> _AcceptInputDeviceTransferResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptInputDeviceTransferResponseSuccess

      interface _BatchDeleteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchDeleteResponse]
        def failed: () -> ::Array[Types::BatchFailedResultModel]
        def successful: () -> ::Array[Types::BatchSuccessfulResultModel]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#batch_delete-instance_method
      def batch_delete: (
                          ?channel_ids: Array[::String],
                          ?input_ids: Array[::String],
                          ?input_security_group_ids: Array[::String],
                          ?multiplex_ids: Array[::String]
                        ) -> _BatchDeleteResponseSuccess
                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchDeleteResponseSuccess

      interface _BatchStartResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchStartResponse]
        def failed: () -> ::Array[Types::BatchFailedResultModel]
        def successful: () -> ::Array[Types::BatchSuccessfulResultModel]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#batch_start-instance_method
      def batch_start: (
                         ?channel_ids: Array[::String],
                         ?multiplex_ids: Array[::String]
                       ) -> _BatchStartResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchStartResponseSuccess

      interface _BatchStopResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchStopResponse]
        def failed: () -> ::Array[Types::BatchFailedResultModel]
        def successful: () -> ::Array[Types::BatchSuccessfulResultModel]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#batch_stop-instance_method
      def batch_stop: (
                        ?channel_ids: Array[::String],
                        ?multiplex_ids: Array[::String]
                      ) -> _BatchStopResponseSuccess
                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchStopResponseSuccess

      interface _BatchUpdateScheduleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchUpdateScheduleResponse]
        def creates: () -> Types::BatchScheduleActionCreateResult
        def deletes: () -> Types::BatchScheduleActionDeleteResult
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#batch_update_schedule-instance_method
      def batch_update_schedule: (
                                   channel_id: ::String,
                                   ?creates: {
                                     schedule_actions: Array[
                                       {
                                         action_name: ::String,
                                         schedule_action_settings: {
                                           hls_id_3_segment_tagging_settings: {
                                             tag: ::String?,
                                             id_3: ::String?
                                           }?,
                                           hls_timed_metadata_settings: {
                                             id_3: ::String
                                           }?,
                                           input_prepare_settings: {
                                             input_attachment_name_reference: ::String?,
                                             input_clipping_settings: {
                                               input_timecode_source: ("ZEROBASED" | "EMBEDDED"),
                                               start_timecode: {
                                                 timecode: ::String?
                                               }?,
                                               stop_timecode: {
                                                 last_frame_clipping_behavior: ("EXCLUDE_LAST_FRAME" | "INCLUDE_LAST_FRAME")?,
                                                 timecode: ::String?
                                               }?
                                             }?,
                                             url_path: Array[::String]?
                                           }?,
                                           input_switch_settings: {
                                             input_attachment_name_reference: ::String,
                                             input_clipping_settings: {
                                               input_timecode_source: ("ZEROBASED" | "EMBEDDED"),
                                               start_timecode: {
                                                 timecode: ::String?
                                               }?,
                                               stop_timecode: {
                                                 last_frame_clipping_behavior: ("EXCLUDE_LAST_FRAME" | "INCLUDE_LAST_FRAME")?,
                                                 timecode: ::String?
                                               }?
                                             }?,
                                             url_path: Array[::String]?
                                           }?,
                                           motion_graphics_image_activate_settings: {
                                             duration: ::Integer?,
                                             password_param: ::String?,
                                             url: ::String?,
                                             username: ::String?
                                           }?,
                                           motion_graphics_image_deactivate_settings: {
                                           }?,
                                           pause_state_settings: {
                                             pipelines: Array[
                                               {
                                                 pipeline_id: ("PIPELINE_0" | "PIPELINE_1")
                                               },
                                             ]?
                                           }?,
                                           scte_35_input_settings: {
                                             input_attachment_name_reference: ::String?,
                                             mode: ("FIXED" | "FOLLOW_ACTIVE")
                                           }?,
                                           scte_35_return_to_network_settings: {
                                             splice_event_id: ::Integer
                                           }?,
                                           scte_35_splice_insert_settings: {
                                             duration: ::Integer?,
                                             splice_event_id: ::Integer
                                           }?,
                                           scte_35_time_signal_settings: {
                                             scte_35_descriptors: Array[
                                               {
                                                 scte_35_descriptor_settings: {
                                                   segmentation_descriptor_scte_35_descriptor_settings: {
                                                     delivery_restrictions: {
                                                       archive_allowed_flag: ("ARCHIVE_NOT_ALLOWED" | "ARCHIVE_ALLOWED"),
                                                       device_restrictions: ("NONE" | "RESTRICT_GROUP0" | "RESTRICT_GROUP1" | "RESTRICT_GROUP2"),
                                                       no_regional_blackout_flag: ("REGIONAL_BLACKOUT" | "NO_REGIONAL_BLACKOUT"),
                                                       web_delivery_allowed_flag: ("WEB_DELIVERY_NOT_ALLOWED" | "WEB_DELIVERY_ALLOWED")
                                                     }?,
                                                     segment_num: ::Integer?,
                                                     segmentation_cancel_indicator: ("SEGMENTATION_EVENT_NOT_CANCELED" | "SEGMENTATION_EVENT_CANCELED"),
                                                     segmentation_duration: ::Integer?,
                                                     segmentation_event_id: ::Integer,
                                                     segmentation_type_id: ::Integer?,
                                                     segmentation_upid: ::String?,
                                                     segmentation_upid_type: ::Integer?,
                                                     segments_expected: ::Integer?,
                                                     sub_segment_num: ::Integer?,
                                                     sub_segments_expected: ::Integer?
                                                   }
                                                 }
                                               },
                                             ]
                                           }?,
                                           static_image_activate_settings: {
                                             duration: ::Integer?,
                                             fade_in: ::Integer?,
                                             fade_out: ::Integer?,
                                             height: ::Integer?,
                                             image: {
                                               password_param: ::String?,
                                               uri: ::String,
                                               username: ::String?
                                             },
                                             image_x: ::Integer?,
                                             image_y: ::Integer?,
                                             layer: ::Integer?,
                                             opacity: ::Integer?,
                                             width: ::Integer?
                                           }?,
                                           static_image_deactivate_settings: {
                                             fade_out: ::Integer?,
                                             layer: ::Integer?
                                           }?,
                                           static_image_output_activate_settings: {
                                             duration: ::Integer?,
                                             fade_in: ::Integer?,
                                             fade_out: ::Integer?,
                                             height: ::Integer?,
                                             image: {
                                               password_param: ::String?,
                                               uri: ::String,
                                               username: ::String?
                                             },
                                             image_x: ::Integer?,
                                             image_y: ::Integer?,
                                             layer: ::Integer?,
                                             opacity: ::Integer?,
                                             output_names: Array[::String],
                                             width: ::Integer?
                                           }?,
                                           static_image_output_deactivate_settings: {
                                             fade_out: ::Integer?,
                                             layer: ::Integer?,
                                             output_names: Array[::String]
                                           }?
                                         },
                                         schedule_action_start_settings: {
                                           fixed_mode_schedule_action_start_settings: {
                                             time: ::String
                                           }?,
                                           follow_mode_schedule_action_start_settings: {
                                             follow_point: ("END" | "START"),
                                             reference_action_name: ::String
                                           }?,
                                           immediate_mode_schedule_action_start_settings: {
                                           }?
                                         }
                                       },
                                     ]
                                   },
                                   ?deletes: {
                                     action_names: Array[::String]
                                   }
                                 ) -> _BatchUpdateScheduleResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchUpdateScheduleResponseSuccess

      interface _CancelInputDeviceTransferResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelInputDeviceTransferResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#cancel_input_device_transfer-instance_method
      def cancel_input_device_transfer: (
                                          input_device_id: ::String
                                        ) -> _CancelInputDeviceTransferResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelInputDeviceTransferResponseSuccess

      interface _ClaimDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ClaimDeviceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#claim_device-instance_method
      def claim_device: (
                          ?id: ::String
                        ) -> _ClaimDeviceResponseSuccess
                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ClaimDeviceResponseSuccess

      interface _CreateChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateChannelResponse]
        def channel: () -> Types::Channel
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_channel-instance_method
      def create_channel: (
                            ?cdi_input_specification: {
                              resolution: ("SD" | "HD" | "FHD" | "UHD")?
                            },
                            ?channel_class: ("STANDARD" | "SINGLE_PIPELINE"),
                            ?destinations: Array[
                              {
                                id: ::String?,
                                media_package_settings: Array[
                                  {
                                    channel_id: ::String?
                                  },
                                ]?,
                                multiplex_settings: {
                                  multiplex_id: ::String?,
                                  program_name: ::String?
                                }?,
                                settings: Array[
                                  {
                                    password_param: ::String?,
                                    stream_name: ::String?,
                                    url: ::String?,
                                    username: ::String?
                                  },
                                ]?
                              },
                            ],
                            ?encoder_settings: {
                              audio_descriptions: Array[
                                {
                                  audio_normalization_settings: {
                                    algorithm: ("ITU_1770_1" | "ITU_1770_2")?,
                                    algorithm_control: ("CORRECT_AUDIO")?,
                                    target_lkfs: ::Float?
                                  }?,
                                  audio_selector_name: ::String,
                                  audio_type: ("CLEAN_EFFECTS" | "HEARING_IMPAIRED" | "UNDEFINED" | "VISUAL_IMPAIRED_COMMENTARY")?,
                                  audio_type_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                  audio_watermarking_settings: {
                                    nielsen_watermarks_settings: {
                                      nielsen_cbet_settings: {
                                        cbet_check_digit_string: ::String,
                                        cbet_stepaside: ("DISABLED" | "ENABLED"),
                                        csid: ::String
                                      }?,
                                      nielsen_distribution_type: ("FINAL_DISTRIBUTOR" | "PROGRAM_CONTENT")?,
                                      nielsen_naes_ii_nw_settings: {
                                        check_digit_string: ::String,
                                        sid: ::Float,
                                        timezone: ("AMERICA_PUERTO_RICO" | "US_ALASKA" | "US_ARIZONA" | "US_CENTRAL" | "US_EASTERN" | "US_HAWAII" | "US_MOUNTAIN" | "US_PACIFIC" | "US_SAMOA" | "UTC")?
                                      }?
                                    }?
                                  }?,
                                  codec_settings: {
                                    aac_settings: {
                                      bitrate: ::Float?,
                                      coding_mode: ("AD_RECEIVER_MIX" | "CODING_MODE_1_0" | "CODING_MODE_1_1" | "CODING_MODE_2_0" | "CODING_MODE_5_1")?,
                                      input_type: ("BROADCASTER_MIXED_AD" | "NORMAL")?,
                                      profile: ("HEV1" | "HEV2" | "LC")?,
                                      rate_control_mode: ("CBR" | "VBR")?,
                                      raw_format: ("LATM_LOAS" | "NONE")?,
                                      sample_rate: ::Float?,
                                      spec: ("MPEG2" | "MPEG4")?,
                                      vbr_quality: ("HIGH" | "LOW" | "MEDIUM_HIGH" | "MEDIUM_LOW")?
                                    }?,
                                    ac_3_settings: {
                                      bitrate: ::Float?,
                                      bitstream_mode: ("COMMENTARY" | "COMPLETE_MAIN" | "DIALOGUE" | "EMERGENCY" | "HEARING_IMPAIRED" | "MUSIC_AND_EFFECTS" | "VISUALLY_IMPAIRED" | "VOICE_OVER")?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_1_1" | "CODING_MODE_2_0" | "CODING_MODE_3_2_LFE")?,
                                      dialnorm: ::Integer?,
                                      drc_profile: ("FILM_STANDARD" | "NONE")?,
                                      lfe_filter: ("DISABLED" | "ENABLED")?,
                                      metadata_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                      attenuation_control: ("ATTENUATE_3_DB" | "NONE")?
                                    }?,
                                    eac_3_atmos_settings: {
                                      bitrate: ::Float?,
                                      coding_mode: ("CODING_MODE_5_1_4" | "CODING_MODE_7_1_4" | "CODING_MODE_9_1_6")?,
                                      dialnorm: ::Integer?,
                                      drc_line: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      drc_rf: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      height_trim: ::Float?,
                                      surround_trim: ::Float?
                                    }?,
                                    eac_3_settings: {
                                      attenuation_control: ("ATTENUATE_3_DB" | "NONE")?,
                                      bitrate: ::Float?,
                                      bitstream_mode: ("COMMENTARY" | "COMPLETE_MAIN" | "EMERGENCY" | "HEARING_IMPAIRED" | "VISUALLY_IMPAIRED")?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_2_0" | "CODING_MODE_3_2")?,
                                      dc_filter: ("DISABLED" | "ENABLED")?,
                                      dialnorm: ::Integer?,
                                      drc_line: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      drc_rf: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      lfe_control: ("LFE" | "NO_LFE")?,
                                      lfe_filter: ("DISABLED" | "ENABLED")?,
                                      lo_ro_center_mix_level: ::Float?,
                                      lo_ro_surround_mix_level: ::Float?,
                                      lt_rt_center_mix_level: ::Float?,
                                      lt_rt_surround_mix_level: ::Float?,
                                      metadata_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                      passthrough_control: ("NO_PASSTHROUGH" | "WHEN_POSSIBLE")?,
                                      phase_control: ("NO_SHIFT" | "SHIFT_90_DEGREES")?,
                                      stereo_downmix: ("DPL2" | "LO_RO" | "LT_RT" | "NOT_INDICATED")?,
                                      surround_ex_mode: ("DISABLED" | "ENABLED" | "NOT_INDICATED")?,
                                      surround_mode: ("DISABLED" | "ENABLED" | "NOT_INDICATED")?
                                    }?,
                                    mp_2_settings: {
                                      bitrate: ::Float?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_2_0")?,
                                      sample_rate: ::Float?
                                    }?,
                                    pass_through_settings: {
                                    }?,
                                    wav_settings: {
                                      bit_depth: ::Float?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_2_0" | "CODING_MODE_4_0" | "CODING_MODE_8_0")?,
                                      sample_rate: ::Float?
                                    }?
                                  }?,
                                  language_code: ::String?,
                                  language_code_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                  name: ::String,
                                  remix_settings: {
                                    channel_mappings: Array[
                                      {
                                        input_channel_levels: Array[
                                          {
                                            gain: ::Integer,
                                            input_channel: ::Integer
                                          },
                                        ],
                                        output_channel: ::Integer
                                      },
                                    ],
                                    channels_in: ::Integer?,
                                    channels_out: ::Integer?
                                  }?,
                                  stream_name: ::String?
                                },
                              ],
                              avail_blanking: {
                                avail_blanking_image: {
                                  password_param: ::String?,
                                  uri: ::String,
                                  username: ::String?
                                }?,
                                state: ("DISABLED" | "ENABLED")?
                              }?,
                              avail_configuration: {
                                avail_settings: {
                                  esam: {
                                    acquisition_point_id: ::String,
                                    ad_avail_offset: ::Integer?,
                                    password_param: ::String?,
                                    pois_endpoint: ::String,
                                    username: ::String?,
                                    zone_identity: ::String?
                                  }?,
                                  scte_35_splice_insert: {
                                    ad_avail_offset: ::Integer?,
                                    no_regional_blackout_flag: ("FOLLOW" | "IGNORE")?,
                                    web_delivery_allowed_flag: ("FOLLOW" | "IGNORE")?
                                  }?,
                                  scte_35_time_signal_apos: {
                                    ad_avail_offset: ::Integer?,
                                    no_regional_blackout_flag: ("FOLLOW" | "IGNORE")?,
                                    web_delivery_allowed_flag: ("FOLLOW" | "IGNORE")?
                                  }?
                                }?
                              }?,
                              blackout_slate: {
                                blackout_slate_image: {
                                  password_param: ::String?,
                                  uri: ::String,
                                  username: ::String?
                                }?,
                                network_end_blackout: ("DISABLED" | "ENABLED")?,
                                network_end_blackout_image: {
                                  password_param: ::String?,
                                  uri: ::String,
                                  username: ::String?
                                }?,
                                network_id: ::String?,
                                state: ("DISABLED" | "ENABLED")?
                              }?,
                              caption_descriptions: Array[
                                {
                                  accessibility: ("DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES" | "IMPLEMENTS_ACCESSIBILITY_FEATURES")?,
                                  caption_selector_name: ::String,
                                  destination_settings: {
                                    arib_destination_settings: {
                                    }?,
                                    burn_in_destination_settings: {
                                      alignment: ("CENTERED" | "LEFT" | "SMART")?,
                                      background_color: ("BLACK" | "NONE" | "WHITE")?,
                                      background_opacity: ::Integer?,
                                      font: {
                                        password_param: ::String?,
                                        uri: ::String,
                                        username: ::String?
                                      }?,
                                      font_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      font_opacity: ::Integer?,
                                      font_resolution: ::Integer?,
                                      font_size: ::String?,
                                      outline_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      outline_size: ::Integer?,
                                      shadow_color: ("BLACK" | "NONE" | "WHITE")?,
                                      shadow_opacity: ::Integer?,
                                      shadow_x_offset: ::Integer?,
                                      shadow_y_offset: ::Integer?,
                                      teletext_grid_control: ("FIXED" | "SCALED")?,
                                      x_position: ::Integer?,
                                      y_position: ::Integer?
                                    }?,
                                    dvb_sub_destination_settings: {
                                      alignment: ("CENTERED" | "LEFT" | "SMART")?,
                                      background_color: ("BLACK" | "NONE" | "WHITE")?,
                                      background_opacity: ::Integer?,
                                      font: {
                                        password_param: ::String?,
                                        uri: ::String,
                                        username: ::String?
                                      }?,
                                      font_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      font_opacity: ::Integer?,
                                      font_resolution: ::Integer?,
                                      font_size: ::String?,
                                      outline_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      outline_size: ::Integer?,
                                      shadow_color: ("BLACK" | "NONE" | "WHITE")?,
                                      shadow_opacity: ::Integer?,
                                      shadow_x_offset: ::Integer?,
                                      shadow_y_offset: ::Integer?,
                                      teletext_grid_control: ("FIXED" | "SCALED")?,
                                      x_position: ::Integer?,
                                      y_position: ::Integer?
                                    }?,
                                    ebu_tt_d_destination_settings: {
                                      copyright_holder: ::String?,
                                      fill_line_gap: ("DISABLED" | "ENABLED")?,
                                      font_family: ::String?,
                                      style_control: ("EXCLUDE" | "INCLUDE")?
                                    }?,
                                    embedded_destination_settings: {
                                    }?,
                                    embedded_plus_scte_20_destination_settings: {
                                    }?,
                                    rtmp_caption_info_destination_settings: {
                                    }?,
                                    scte_20_plus_embedded_destination_settings: {
                                    }?,
                                    scte_27_destination_settings: {
                                    }?,
                                    smpte_tt_destination_settings: {
                                    }?,
                                    teletext_destination_settings: {
                                    }?,
                                    ttml_destination_settings: {
                                      style_control: ("PASSTHROUGH" | "USE_CONFIGURED")?
                                    }?,
                                    webvtt_destination_settings: {
                                      style_control: ("NO_STYLE_DATA" | "PASSTHROUGH")?
                                    }?
                                  }?,
                                  language_code: ::String?,
                                  language_description: ::String?,
                                  name: ::String
                                },
                              ]?,
                              feature_activations: {
                                input_prepare_schedule_actions: ("DISABLED" | "ENABLED")?,
                                output_static_image_overlay_schedule_actions: ("DISABLED" | "ENABLED")?
                              }?,
                              global_configuration: {
                                initial_audio_gain: ::Integer?,
                                input_end_action: ("NONE" | "SWITCH_AND_LOOP_INPUTS")?,
                                input_loss_behavior: {
                                  black_frame_msec: ::Integer?,
                                  input_loss_image_color: ::String?,
                                  input_loss_image_slate: {
                                    password_param: ::String?,
                                    uri: ::String,
                                    username: ::String?
                                  }?,
                                  input_loss_image_type: ("COLOR" | "SLATE")?,
                                  repeat_frame_msec: ::Integer?
                                }?,
                                output_locking_mode: ("EPOCH_LOCKING" | "PIPELINE_LOCKING")?,
                                output_timing_source: ("INPUT_CLOCK" | "SYSTEM_CLOCK")?,
                                support_low_framerate_inputs: ("DISABLED" | "ENABLED")?,
                                output_locking_settings: {
                                  epoch_locking_settings: {
                                    custom_epoch: ::String?,
                                    jam_sync_time: ::String?
                                  }?,
                                  pipeline_locking_settings: {
                                  }?
                                }?
                              }?,
                              motion_graphics_configuration: {
                                motion_graphics_insertion: ("DISABLED" | "ENABLED")?,
                                motion_graphics_settings: {
                                  html_motion_graphics_settings: {
                                  }?
                                }
                              }?,
                              nielsen_configuration: {
                                distributor_id: ::String?,
                                nielsen_pcm_to_id_3_tagging: ("DISABLED" | "ENABLED")?
                              }?,
                              output_groups: Array[
                                {
                                  name: ::String?,
                                  output_group_settings: {
                                    archive_group_settings: {
                                      archive_cdn_settings: {
                                        archive_s3_settings: {
                                          canned_acl: ("AUTHENTICATED_READ" | "BUCKET_OWNER_FULL_CONTROL" | "BUCKET_OWNER_READ" | "PUBLIC_READ")?
                                        }?
                                      }?,
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      rollover_interval: ::Integer?
                                    }?,
                                    frame_capture_group_settings: {
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      frame_capture_cdn_settings: {
                                        frame_capture_s3_settings: {
                                          canned_acl: ("AUTHENTICATED_READ" | "BUCKET_OWNER_FULL_CONTROL" | "BUCKET_OWNER_READ" | "PUBLIC_READ")?
                                        }?
                                      }?
                                    }?,
                                    hls_group_settings: {
                                      ad_markers: Array[("ADOBE" | "ELEMENTAL" | "ELEMENTAL_SCTE35")]?,
                                      base_url_content: ::String?,
                                      base_url_content_1: ::String?,
                                      base_url_manifest: ::String?,
                                      base_url_manifest_1: ::String?,
                                      caption_language_mappings: Array[
                                        {
                                          caption_channel: ::Integer,
                                          language_code: ::String,
                                          language_description: ::String
                                        },
                                      ]?,
                                      caption_language_setting: ("INSERT" | "NONE" | "OMIT")?,
                                      client_cache: ("DISABLED" | "ENABLED")?,
                                      codec_specification: ("RFC_4281" | "RFC_6381")?,
                                      constant_iv: ::String?,
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      directory_structure: ("SINGLE_DIRECTORY" | "SUBDIRECTORY_PER_STREAM")?,
                                      discontinuity_tags: ("INSERT" | "NEVER_INSERT")?,
                                      encryption_type: ("AES128" | "SAMPLE_AES")?,
                                      hls_cdn_settings: {
                                        hls_akamai_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          http_transfer_mode: ("CHUNKED" | "NON_CHUNKED")?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?,
                                          salt: ::String?,
                                          token: ::String?
                                        }?,
                                        hls_basic_put_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?
                                        }?,
                                        hls_media_store_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          media_store_storage_class: ("TEMPORAL")?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?
                                        }?,
                                        hls_s3_settings: {
                                          canned_acl: ("AUTHENTICATED_READ" | "BUCKET_OWNER_FULL_CONTROL" | "BUCKET_OWNER_READ" | "PUBLIC_READ")?
                                        }?,
                                        hls_webdav_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          http_transfer_mode: ("CHUNKED" | "NON_CHUNKED")?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?
                                        }?
                                      }?,
                                      hls_id_3_segment_tagging: ("DISABLED" | "ENABLED")?,
                                      i_frame_only_playlists: ("DISABLED" | "STANDARD")?,
                                      incomplete_segment_behavior: ("AUTO" | "SUPPRESS")?,
                                      index_n_segments: ::Integer?,
                                      input_loss_action: ("EMIT_OUTPUT" | "PAUSE_OUTPUT")?,
                                      iv_in_manifest: ("EXCLUDE" | "INCLUDE")?,
                                      iv_source: ("EXPLICIT" | "FOLLOWS_SEGMENT_NUMBER")?,
                                      keep_segments: ::Integer?,
                                      key_format: ::String?,
                                      key_format_versions: ::String?,
                                      key_provider_settings: {
                                        static_key_settings: {
                                          key_provider_server: {
                                            password_param: ::String?,
                                            uri: ::String,
                                            username: ::String?
                                          }?,
                                          static_key_value: ::String
                                        }?
                                      }?,
                                      manifest_compression: ("GZIP" | "NONE")?,
                                      manifest_duration_format: ("FLOATING_POINT" | "INTEGER")?,
                                      min_segment_length: ::Integer?,
                                      mode: ("LIVE" | "VOD")?,
                                      output_selection: ("MANIFESTS_AND_SEGMENTS" | "SEGMENTS_ONLY" | "VARIANT_MANIFESTS_AND_SEGMENTS")?,
                                      program_date_time: ("EXCLUDE" | "INCLUDE")?,
                                      program_date_time_clock: ("INITIALIZE_FROM_OUTPUT_TIMECODE" | "SYSTEM_CLOCK")?,
                                      program_date_time_period: ::Integer?,
                                      redundant_manifest: ("DISABLED" | "ENABLED")?,
                                      segment_length: ::Integer?,
                                      segmentation_mode: ("USE_INPUT_SEGMENTATION" | "USE_SEGMENT_DURATION")?,
                                      segments_per_subdirectory: ::Integer?,
                                      stream_inf_resolution: ("EXCLUDE" | "INCLUDE")?,
                                      timed_metadata_id_3_frame: ("NONE" | "PRIV" | "TDRL")?,
                                      timed_metadata_id_3_period: ::Integer?,
                                      timestamp_delta_milliseconds: ::Integer?,
                                      ts_file_mode: ("SEGMENTED_FILES" | "SINGLE_FILE")?
                                    }?,
                                    media_package_group_settings: {
                                      destination: {
                                        destination_ref_id: ::String?
                                      }
                                    }?,
                                    ms_smooth_group_settings: {
                                      acquisition_point_id: ::String?,
                                      audio_only_timecode_control: ("PASSTHROUGH" | "USE_CONFIGURED_CLOCK")?,
                                      certificate_mode: ("SELF_SIGNED" | "VERIFY_AUTHENTICITY")?,
                                      connection_retry_interval: ::Integer?,
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      event_id: ::String?,
                                      event_id_mode: ("NO_EVENT_ID" | "USE_CONFIGURED" | "USE_TIMESTAMP")?,
                                      event_stop_behavior: ("NONE" | "SEND_EOS")?,
                                      filecache_duration: ::Integer?,
                                      fragment_length: ::Integer?,
                                      input_loss_action: ("EMIT_OUTPUT" | "PAUSE_OUTPUT")?,
                                      num_retries: ::Integer?,
                                      restart_delay: ::Integer?,
                                      segmentation_mode: ("USE_INPUT_SEGMENTATION" | "USE_SEGMENT_DURATION")?,
                                      send_delay_ms: ::Integer?,
                                      sparse_track_type: ("NONE" | "SCTE_35" | "SCTE_35_WITHOUT_SEGMENTATION")?,
                                      stream_manifest_behavior: ("DO_NOT_SEND" | "SEND")?,
                                      timestamp_offset: ::String?,
                                      timestamp_offset_mode: ("USE_CONFIGURED_OFFSET" | "USE_EVENT_START_DATE")?
                                    }?,
                                    multiplex_group_settings: {
                                    }?,
                                    rtmp_group_settings: {
                                      ad_markers: Array[("ON_CUE_POINT_SCTE35")]?,
                                      authentication_scheme: ("AKAMAI" | "COMMON")?,
                                      cache_full_behavior: ("DISCONNECT_IMMEDIATELY" | "WAIT_FOR_SERVER")?,
                                      cache_length: ::Integer?,
                                      caption_data: ("ALL" | "FIELD1_608" | "FIELD1_AND_FIELD2_608")?,
                                      input_loss_action: ("EMIT_OUTPUT" | "PAUSE_OUTPUT")?,
                                      restart_delay: ::Integer?,
                                      include_filler_nal_units: ("AUTO" | "DROP" | "INCLUDE")?
                                    }?,
                                    udp_group_settings: {
                                      input_loss_action: ("DROP_PROGRAM" | "DROP_TS" | "EMIT_PROGRAM")?,
                                      timed_metadata_id_3_frame: ("NONE" | "PRIV" | "TDRL")?,
                                      timed_metadata_id_3_period: ::Integer?
                                    }?
                                  },
                                  outputs: Array[
                                    {
                                      audio_description_names: Array[::String]?,
                                      caption_description_names: Array[::String]?,
                                      output_name: ::String?,
                                      output_settings: {
                                        archive_output_settings: {
                                          container_settings: {
                                            m2ts_settings: {
                                              absent_input_audio_behavior: ("DROP" | "ENCODE_SILENCE")?,
                                              arib: ("DISABLED" | "ENABLED")?,
                                              arib_captions_pid: ::String?,
                                              arib_captions_pid_control: ("AUTO" | "USE_CONFIGURED")?,
                                              audio_buffer_model: ("ATSC" | "DVB")?,
                                              audio_frames_per_pes: ::Integer?,
                                              audio_pids: ::String?,
                                              audio_stream_type: ("ATSC" | "DVB")?,
                                              bitrate: ::Integer?,
                                              buffer_model: ("MULTIPLEX" | "NONE")?,
                                              cc_descriptor: ("DISABLED" | "ENABLED")?,
                                              dvb_nit_settings: {
                                                network_id: ::Integer,
                                                network_name: ::String,
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_sdt_settings: {
                                                output_sdt: ("SDT_FOLLOW" | "SDT_FOLLOW_IF_PRESENT" | "SDT_MANUAL" | "SDT_NONE")?,
                                                rep_interval: ::Integer?,
                                                service_name: ::String?,
                                                service_provider_name: ::String?
                                              }?,
                                              dvb_sub_pids: ::String?,
                                              dvb_tdt_settings: {
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_teletext_pid: ::String?,
                                              ebif: ("NONE" | "PASSTHROUGH")?,
                                              ebp_audio_interval: ("VIDEO_AND_FIXED_INTERVALS" | "VIDEO_INTERVAL")?,
                                              ebp_lookahead_ms: ::Integer?,
                                              ebp_placement: ("VIDEO_AND_AUDIO_PIDS" | "VIDEO_PID")?,
                                              ecm_pid: ::String?,
                                              es_rate_in_pes: ("EXCLUDE" | "INCLUDE")?,
                                              etv_platform_pid: ::String?,
                                              etv_signal_pid: ::String?,
                                              fragment_time: ::Float?,
                                              klv: ("NONE" | "PASSTHROUGH")?,
                                              klv_data_pids: ::String?,
                                              nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              null_packet_bitrate: ::Float?,
                                              pat_interval: ::Integer?,
                                              pcr_control: ("CONFIGURED_PCR_PERIOD" | "PCR_EVERY_PES_PACKET")?,
                                              pcr_period: ::Integer?,
                                              pcr_pid: ::String?,
                                              pmt_interval: ::Integer?,
                                              pmt_pid: ::String?,
                                              program_num: ::Integer?,
                                              rate_mode: ("CBR" | "VBR")?,
                                              scte_27_pids: ::String?,
                                              scte_35_control: ("NONE" | "PASSTHROUGH")?,
                                              scte_35_pid: ::String?,
                                              scte_35_preroll_pullup_milliseconds: ::Float?,
                                              segmentation_markers: ("EBP" | "EBP_LEGACY" | "NONE" | "PSI_SEGSTART" | "RAI_ADAPT" | "RAI_SEGSTART")?,
                                              segmentation_style: ("MAINTAIN_CADENCE" | "RESET_CADENCE")?,
                                              segmentation_time: ::Float?,
                                              timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              timed_metadata_pid: ::String?,
                                              transport_stream_id: ::Integer?,
                                              video_pid: ::String?
                                            }?,
                                            raw_settings: {
                                            }?
                                          },
                                          extension: ::String?,
                                          name_modifier: ::String?
                                        }?,
                                        frame_capture_output_settings: {
                                          name_modifier: ::String?
                                        }?,
                                        hls_output_settings: {
                                          h265_packaging_type: ("HEV1" | "HVC1")?,
                                          hls_settings: {
                                            audio_only_hls_settings: {
                                              audio_group_id: ::String?,
                                              audio_only_image: {
                                                password_param: ::String?,
                                                uri: ::String,
                                                username: ::String?
                                              }?,
                                              audio_track_type: ("ALTERNATE_AUDIO_AUTO_SELECT" | "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT" | "ALTERNATE_AUDIO_NOT_AUTO_SELECT" | "AUDIO_ONLY_VARIANT_STREAM")?,
                                              segment_type: ("AAC" | "FMP4")?
                                            }?,
                                            fmp_4_hls_settings: {
                                              audio_rendition_sets: ::String?,
                                              nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?
                                            }?,
                                            frame_capture_hls_settings: {
                                            }?,
                                            standard_hls_settings: {
                                              audio_rendition_sets: ::String?,
                                              m3u_8_settings: {
                                                audio_frames_per_pes: ::Integer?,
                                                audio_pids: ::String?,
                                                ecm_pid: ::String?,
                                                nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                pat_interval: ::Integer?,
                                                pcr_control: ("CONFIGURED_PCR_PERIOD" | "PCR_EVERY_PES_PACKET")?,
                                                pcr_period: ::Integer?,
                                                pcr_pid: ::String?,
                                                pmt_interval: ::Integer?,
                                                pmt_pid: ::String?,
                                                program_num: ::Integer?,
                                                scte_35_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                scte_35_pid: ::String?,
                                                timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                timed_metadata_pid: ::String?,
                                                transport_stream_id: ::Integer?,
                                                video_pid: ::String?,
                                                klv_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                klv_data_pids: ::String?
                                              }
                                            }?
                                          },
                                          name_modifier: ::String?,
                                          segment_modifier: ::String?
                                        }?,
                                        media_package_output_settings: {
                                        }?,
                                        ms_smooth_output_settings: {
                                          h265_packaging_type: ("HEV1" | "HVC1")?,
                                          name_modifier: ::String?
                                        }?,
                                        multiplex_output_settings: {
                                          destination: {
                                            destination_ref_id: ::String?
                                          }
                                        }?,
                                        rtmp_output_settings: {
                                          certificate_mode: ("SELF_SIGNED" | "VERIFY_AUTHENTICITY")?,
                                          connection_retry_interval: ::Integer?,
                                          destination: {
                                            destination_ref_id: ::String?
                                          },
                                          num_retries: ::Integer?
                                        }?,
                                        udp_output_settings: {
                                          buffer_msec: ::Integer?,
                                          container_settings: {
                                            m2ts_settings: {
                                              absent_input_audio_behavior: ("DROP" | "ENCODE_SILENCE")?,
                                              arib: ("DISABLED" | "ENABLED")?,
                                              arib_captions_pid: ::String?,
                                              arib_captions_pid_control: ("AUTO" | "USE_CONFIGURED")?,
                                              audio_buffer_model: ("ATSC" | "DVB")?,
                                              audio_frames_per_pes: ::Integer?,
                                              audio_pids: ::String?,
                                              audio_stream_type: ("ATSC" | "DVB")?,
                                              bitrate: ::Integer?,
                                              buffer_model: ("MULTIPLEX" | "NONE")?,
                                              cc_descriptor: ("DISABLED" | "ENABLED")?,
                                              dvb_nit_settings: {
                                                network_id: ::Integer,
                                                network_name: ::String,
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_sdt_settings: {
                                                output_sdt: ("SDT_FOLLOW" | "SDT_FOLLOW_IF_PRESENT" | "SDT_MANUAL" | "SDT_NONE")?,
                                                rep_interval: ::Integer?,
                                                service_name: ::String?,
                                                service_provider_name: ::String?
                                              }?,
                                              dvb_sub_pids: ::String?,
                                              dvb_tdt_settings: {
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_teletext_pid: ::String?,
                                              ebif: ("NONE" | "PASSTHROUGH")?,
                                              ebp_audio_interval: ("VIDEO_AND_FIXED_INTERVALS" | "VIDEO_INTERVAL")?,
                                              ebp_lookahead_ms: ::Integer?,
                                              ebp_placement: ("VIDEO_AND_AUDIO_PIDS" | "VIDEO_PID")?,
                                              ecm_pid: ::String?,
                                              es_rate_in_pes: ("EXCLUDE" | "INCLUDE")?,
                                              etv_platform_pid: ::String?,
                                              etv_signal_pid: ::String?,
                                              fragment_time: ::Float?,
                                              klv: ("NONE" | "PASSTHROUGH")?,
                                              klv_data_pids: ::String?,
                                              nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              null_packet_bitrate: ::Float?,
                                              pat_interval: ::Integer?,
                                              pcr_control: ("CONFIGURED_PCR_PERIOD" | "PCR_EVERY_PES_PACKET")?,
                                              pcr_period: ::Integer?,
                                              pcr_pid: ::String?,
                                              pmt_interval: ::Integer?,
                                              pmt_pid: ::String?,
                                              program_num: ::Integer?,
                                              rate_mode: ("CBR" | "VBR")?,
                                              scte_27_pids: ::String?,
                                              scte_35_control: ("NONE" | "PASSTHROUGH")?,
                                              scte_35_pid: ::String?,
                                              scte_35_preroll_pullup_milliseconds: ::Float?,
                                              segmentation_markers: ("EBP" | "EBP_LEGACY" | "NONE" | "PSI_SEGSTART" | "RAI_ADAPT" | "RAI_SEGSTART")?,
                                              segmentation_style: ("MAINTAIN_CADENCE" | "RESET_CADENCE")?,
                                              segmentation_time: ::Float?,
                                              timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              timed_metadata_pid: ::String?,
                                              transport_stream_id: ::Integer?,
                                              video_pid: ::String?
                                            }?
                                          },
                                          destination: {
                                            destination_ref_id: ::String?
                                          },
                                          fec_output_settings: {
                                            column_depth: ::Integer?,
                                            include_fec: ("COLUMN" | "COLUMN_AND_ROW")?,
                                            row_length: ::Integer?
                                          }?
                                        }?
                                      },
                                      video_description_name: ::String?
                                    },
                                  ]
                                },
                              ],
                              timecode_config: {
                                source: ("EMBEDDED" | "SYSTEMCLOCK" | "ZEROBASED"),
                                sync_threshold: ::Integer?
                              },
                              video_descriptions: Array[
                                {
                                  codec_settings: {
                                    frame_capture_settings: {
                                      capture_interval: ::Integer?,
                                      capture_interval_units: ("MILLISECONDS" | "SECONDS")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?,
                                    h264_settings: {
                                      adaptive_quantization: ("AUTO" | "HIGH" | "HIGHER" | "LOW" | "MAX" | "MEDIUM" | "OFF")?,
                                      afd_signaling: ("AUTO" | "FIXED" | "NONE")?,
                                      bitrate: ::Integer?,
                                      buf_fill_pct: ::Integer?,
                                      buf_size: ::Integer?,
                                      color_metadata: ("IGNORE" | "INSERT")?,
                                      color_space_settings: {
                                        color_space_passthrough_settings: {
                                        }?,
                                        rec_601_settings: {
                                        }?,
                                        rec_709_settings: {
                                        }?
                                      }?,
                                      entropy_encoding: ("CABAC" | "CAVLC")?,
                                      filter_settings: {
                                        temporal_filter_settings: {
                                          post_filter_sharpening: ("AUTO" | "DISABLED" | "ENABLED")?,
                                          strength: ("AUTO" | "STRENGTH_1" | "STRENGTH_2" | "STRENGTH_3" | "STRENGTH_4" | "STRENGTH_5" | "STRENGTH_6" | "STRENGTH_7" | "STRENGTH_8" | "STRENGTH_9" | "STRENGTH_10" | "STRENGTH_11" | "STRENGTH_12" | "STRENGTH_13" | "STRENGTH_14" | "STRENGTH_15" | "STRENGTH_16")?
                                        }?
                                      }?,
                                      fixed_afd: ("AFD_0000" | "AFD_0010" | "AFD_0011" | "AFD_0100" | "AFD_1000" | "AFD_1001" | "AFD_1010" | "AFD_1011" | "AFD_1101" | "AFD_1110" | "AFD_1111")?,
                                      flicker_aq: ("DISABLED" | "ENABLED")?,
                                      force_field_pictures: ("DISABLED" | "ENABLED")?,
                                      framerate_control: ("INITIALIZE_FROM_SOURCE" | "SPECIFIED")?,
                                      framerate_denominator: ::Integer?,
                                      framerate_numerator: ::Integer?,
                                      gop_b_reference: ("DISABLED" | "ENABLED")?,
                                      gop_closed_cadence: ::Integer?,
                                      gop_num_b_frames: ::Integer?,
                                      gop_size: ::Float?,
                                      gop_size_units: ("FRAMES" | "SECONDS")?,
                                      level: ("H264_LEVEL_1" | "H264_LEVEL_1_1" | "H264_LEVEL_1_2" | "H264_LEVEL_1_3" | "H264_LEVEL_2" | "H264_LEVEL_2_1" | "H264_LEVEL_2_2" | "H264_LEVEL_3" | "H264_LEVEL_3_1" | "H264_LEVEL_3_2" | "H264_LEVEL_4" | "H264_LEVEL_4_1" | "H264_LEVEL_4_2" | "H264_LEVEL_5" | "H264_LEVEL_5_1" | "H264_LEVEL_5_2" | "H264_LEVEL_AUTO")?,
                                      look_ahead_rate_control: ("HIGH" | "LOW" | "MEDIUM")?,
                                      max_bitrate: ::Integer?,
                                      min_i_interval: ::Integer?,
                                      num_ref_frames: ::Integer?,
                                      par_control: ("INITIALIZE_FROM_SOURCE" | "SPECIFIED")?,
                                      par_denominator: ::Integer?,
                                      par_numerator: ::Integer?,
                                      profile: ("BASELINE" | "HIGH" | "HIGH_10BIT" | "HIGH_422" | "HIGH_422_10BIT" | "MAIN")?,
                                      quality_level: ("ENHANCED_QUALITY" | "STANDARD_QUALITY")?,
                                      qvbr_quality_level: ::Integer?,
                                      rate_control_mode: ("CBR" | "MULTIPLEX" | "QVBR" | "VBR")?,
                                      scan_type: ("INTERLACED" | "PROGRESSIVE")?,
                                      scene_change_detect: ("DISABLED" | "ENABLED")?,
                                      slices: ::Integer?,
                                      softness: ::Integer?,
                                      spatial_aq: ("DISABLED" | "ENABLED")?,
                                      subgop_length: ("DYNAMIC" | "FIXED")?,
                                      syntax: ("DEFAULT" | "RP2027")?,
                                      temporal_aq: ("DISABLED" | "ENABLED")?,
                                      timecode_insertion: ("DISABLED" | "PIC_TIMING_SEI")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?,
                                    h265_settings: {
                                      adaptive_quantization: ("AUTO" | "HIGH" | "HIGHER" | "LOW" | "MAX" | "MEDIUM" | "OFF")?,
                                      afd_signaling: ("AUTO" | "FIXED" | "NONE")?,
                                      alternative_transfer_function: ("INSERT" | "OMIT")?,
                                      bitrate: ::Integer?,
                                      buf_size: ::Integer?,
                                      color_metadata: ("IGNORE" | "INSERT")?,
                                      color_space_settings: {
                                        color_space_passthrough_settings: {
                                        }?,
                                        dolby_vision_81_settings: {
                                        }?,
                                        hdr_10_settings: {
                                          max_cll: ::Integer?,
                                          max_fall: ::Integer?
                                        }?,
                                        rec_601_settings: {
                                        }?,
                                        rec_709_settings: {
                                        }?
                                      }?,
                                      filter_settings: {
                                        temporal_filter_settings: {
                                          post_filter_sharpening: ("AUTO" | "DISABLED" | "ENABLED")?,
                                          strength: ("AUTO" | "STRENGTH_1" | "STRENGTH_2" | "STRENGTH_3" | "STRENGTH_4" | "STRENGTH_5" | "STRENGTH_6" | "STRENGTH_7" | "STRENGTH_8" | "STRENGTH_9" | "STRENGTH_10" | "STRENGTH_11" | "STRENGTH_12" | "STRENGTH_13" | "STRENGTH_14" | "STRENGTH_15" | "STRENGTH_16")?
                                        }?
                                      }?,
                                      fixed_afd: ("AFD_0000" | "AFD_0010" | "AFD_0011" | "AFD_0100" | "AFD_1000" | "AFD_1001" | "AFD_1010" | "AFD_1011" | "AFD_1101" | "AFD_1110" | "AFD_1111")?,
                                      flicker_aq: ("DISABLED" | "ENABLED")?,
                                      framerate_denominator: ::Integer,
                                      framerate_numerator: ::Integer,
                                      gop_closed_cadence: ::Integer?,
                                      gop_size: ::Float?,
                                      gop_size_units: ("FRAMES" | "SECONDS")?,
                                      level: ("H265_LEVEL_1" | "H265_LEVEL_2" | "H265_LEVEL_2_1" | "H265_LEVEL_3" | "H265_LEVEL_3_1" | "H265_LEVEL_4" | "H265_LEVEL_4_1" | "H265_LEVEL_5" | "H265_LEVEL_5_1" | "H265_LEVEL_5_2" | "H265_LEVEL_6" | "H265_LEVEL_6_1" | "H265_LEVEL_6_2" | "H265_LEVEL_AUTO")?,
                                      look_ahead_rate_control: ("HIGH" | "LOW" | "MEDIUM")?,
                                      max_bitrate: ::Integer?,
                                      min_i_interval: ::Integer?,
                                      par_denominator: ::Integer?,
                                      par_numerator: ::Integer?,
                                      profile: ("MAIN" | "MAIN_10BIT")?,
                                      qvbr_quality_level: ::Integer?,
                                      rate_control_mode: ("CBR" | "MULTIPLEX" | "QVBR")?,
                                      scan_type: ("INTERLACED" | "PROGRESSIVE")?,
                                      scene_change_detect: ("DISABLED" | "ENABLED")?,
                                      slices: ::Integer?,
                                      tier: ("HIGH" | "MAIN")?,
                                      timecode_insertion: ("DISABLED" | "PIC_TIMING_SEI")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?,
                                    mpeg_2_settings: {
                                      adaptive_quantization: ("AUTO" | "HIGH" | "LOW" | "MEDIUM" | "OFF")?,
                                      afd_signaling: ("AUTO" | "FIXED" | "NONE")?,
                                      color_metadata: ("IGNORE" | "INSERT")?,
                                      color_space: ("AUTO" | "PASSTHROUGH")?,
                                      display_aspect_ratio: ("DISPLAYRATIO16X9" | "DISPLAYRATIO4X3")?,
                                      filter_settings: {
                                        temporal_filter_settings: {
                                          post_filter_sharpening: ("AUTO" | "DISABLED" | "ENABLED")?,
                                          strength: ("AUTO" | "STRENGTH_1" | "STRENGTH_2" | "STRENGTH_3" | "STRENGTH_4" | "STRENGTH_5" | "STRENGTH_6" | "STRENGTH_7" | "STRENGTH_8" | "STRENGTH_9" | "STRENGTH_10" | "STRENGTH_11" | "STRENGTH_12" | "STRENGTH_13" | "STRENGTH_14" | "STRENGTH_15" | "STRENGTH_16")?
                                        }?
                                      }?,
                                      fixed_afd: ("AFD_0000" | "AFD_0010" | "AFD_0011" | "AFD_0100" | "AFD_1000" | "AFD_1001" | "AFD_1010" | "AFD_1011" | "AFD_1101" | "AFD_1110" | "AFD_1111")?,
                                      framerate_denominator: ::Integer,
                                      framerate_numerator: ::Integer,
                                      gop_closed_cadence: ::Integer?,
                                      gop_num_b_frames: ::Integer?,
                                      gop_size: ::Float?,
                                      gop_size_units: ("FRAMES" | "SECONDS")?,
                                      scan_type: ("INTERLACED" | "PROGRESSIVE")?,
                                      subgop_length: ("DYNAMIC" | "FIXED")?,
                                      timecode_insertion: ("DISABLED" | "GOP_TIMECODE")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?
                                  }?,
                                  height: ::Integer?,
                                  name: ::String,
                                  respond_to_afd: ("NONE" | "PASSTHROUGH" | "RESPOND")?,
                                  scaling_behavior: ("DEFAULT" | "STRETCH_TO_OUTPUT")?,
                                  sharpness: ::Integer?,
                                  width: ::Integer?
                                },
                              ],
                              thumbnail_configuration: {
                                state: ("AUTO" | "DISABLED")
                              }?,
                              color_correction_settings: {
                                global_color_corrections: Array[
                                  {
                                    input_color_space: ("HDR10" | "HLG_2020" | "REC_601" | "REC_709"),
                                    output_color_space: ("HDR10" | "HLG_2020" | "REC_601" | "REC_709"),
                                    uri: ::String
                                  },
                                ]
                              }?
                            },
                            ?input_attachments: Array[
                              {
                                automatic_input_failover_settings: {
                                  error_clear_time_msec: ::Integer?,
                                  failover_conditions: Array[
                                    {
                                      failover_condition_settings: {
                                        audio_silence_settings: {
                                          audio_selector_name: ::String,
                                          audio_silence_threshold_msec: ::Integer?
                                        }?,
                                        input_loss_settings: {
                                          input_loss_threshold_msec: ::Integer?
                                        }?,
                                        video_black_settings: {
                                          black_detect_threshold: ::Float?,
                                          video_black_threshold_msec: ::Integer?
                                        }?
                                      }?
                                    },
                                  ]?,
                                  input_preference: ("EQUAL_INPUT_PREFERENCE" | "PRIMARY_INPUT_PREFERRED")?,
                                  secondary_input_id: ::String
                                }?,
                                input_attachment_name: ::String?,
                                input_id: ::String?,
                                input_settings: {
                                  audio_selectors: Array[
                                    {
                                      name: ::String,
                                      selector_settings: {
                                        audio_hls_rendition_selection: {
                                          group_id: ::String,
                                          name: ::String
                                        }?,
                                        audio_language_selection: {
                                          language_code: ::String,
                                          language_selection_policy: ("LOOSE" | "STRICT")?
                                        }?,
                                        audio_pid_selection: {
                                          pid: ::Integer
                                        }?,
                                        audio_track_selection: {
                                          tracks: Array[
                                            {
                                              track: ::Integer
                                            },
                                          ],
                                          dolby_e_decode: {
                                            program_selection: ("ALL_CHANNELS" | "PROGRAM_1" | "PROGRAM_2" | "PROGRAM_3" | "PROGRAM_4" | "PROGRAM_5" | "PROGRAM_6" | "PROGRAM_7" | "PROGRAM_8")
                                          }?
                                        }?
                                      }?
                                    },
                                  ]?,
                                  caption_selectors: Array[
                                    {
                                      language_code: ::String?,
                                      name: ::String,
                                      selector_settings: {
                                        ancillary_source_settings: {
                                          source_ancillary_channel_number: ::Integer?
                                        }?,
                                        arib_source_settings: {
                                        }?,
                                        dvb_sub_source_settings: {
                                          ocr_language: ("DEU" | "ENG" | "FRA" | "NLD" | "POR" | "SPA")?,
                                          pid: ::Integer?
                                        }?,
                                        embedded_source_settings: {
                                          convert_608_to_708: ("DISABLED" | "UPCONVERT")?,
                                          scte_20_detection: ("AUTO" | "OFF")?,
                                          source_608_channel_number: ::Integer?,
                                          source_608_track_number: ::Integer?
                                        }?,
                                        scte_20_source_settings: {
                                          convert_608_to_708: ("DISABLED" | "UPCONVERT")?,
                                          source_608_channel_number: ::Integer?
                                        }?,
                                        scte_27_source_settings: {
                                          ocr_language: ("DEU" | "ENG" | "FRA" | "NLD" | "POR" | "SPA")?,
                                          pid: ::Integer?
                                        }?,
                                        teletext_source_settings: {
                                          output_rectangle: {
                                            height: ::Float,
                                            left_offset: ::Float,
                                            top_offset: ::Float,
                                            width: ::Float
                                          }?,
                                          page_number: ::String?
                                        }?
                                      }?
                                    },
                                  ]?,
                                  deblock_filter: ("DISABLED" | "ENABLED")?,
                                  denoise_filter: ("DISABLED" | "ENABLED")?,
                                  filter_strength: ::Integer?,
                                  input_filter: ("AUTO" | "DISABLED" | "FORCED")?,
                                  network_input_settings: {
                                    hls_input_settings: {
                                      bandwidth: ::Integer?,
                                      buffer_segments: ::Integer?,
                                      retries: ::Integer?,
                                      retry_interval: ::Integer?,
                                      scte_35_source: ("MANIFEST" | "SEGMENTS")?
                                    }?,
                                    server_validation: ("CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME" | "CHECK_CRYPTOGRAPHY_ONLY")?
                                  }?,
                                  scte_35_pid: ::Integer?,
                                  smpte_2038_data_preference: ("IGNORE" | "PREFER")?,
                                  source_end_behavior: ("CONTINUE" | "LOOP")?,
                                  video_selector: {
                                    color_space: ("FOLLOW" | "HDR10" | "HLG_2020" | "REC_601" | "REC_709")?,
                                    color_space_settings: {
                                      hdr_10_settings: {
                                        max_cll: ::Integer?,
                                        max_fall: ::Integer?
                                      }?
                                    }?,
                                    color_space_usage: ("FALLBACK" | "FORCE")?,
                                    selector_settings: {
                                      video_selector_pid: {
                                        pid: ::Integer?
                                      }?,
                                      video_selector_program_id: {
                                        program_id: ::Integer?
                                      }?
                                    }?
                                  }?
                                }?
                              },
                            ],
                            ?input_specification: {
                              codec: ("MPEG2" | "AVC" | "HEVC")?,
                              maximum_bitrate: ("MAX_10_MBPS" | "MAX_20_MBPS" | "MAX_50_MBPS")?,
                              resolution: ("SD" | "HD" | "UHD")?
                            },
                            ?log_level: ("ERROR" | "WARNING" | "INFO" | "DEBUG" | "DISABLED"),
                            ?maintenance: {
                              maintenance_day: ("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY")?,
                              maintenance_start_time: ::String?
                            },
                            ?name: ::String,
                            ?request_id: ::String,
                            ?reserved: ::String,
                            ?role_arn: ::String,
                            ?tags: Hash[::String, ::String],
                            ?vpc: {
                              public_address_allocation_ids: Array[::String]?,
                              security_group_ids: Array[::String]?,
                              subnet_ids: Array[::String]
                            }
                          ) -> _CreateChannelResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateChannelResponseSuccess

      interface _CreateInputResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInputResponse]
        def input: () -> Types::Input
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_input-instance_method
      def create_input: (
                          ?destinations: Array[
                            {
                              stream_name: ::String?
                            },
                          ],
                          ?input_devices: Array[
                            {
                              id: ::String?
                            },
                          ],
                          ?input_security_groups: Array[::String],
                          ?media_connect_flows: Array[
                            {
                              flow_arn: ::String?
                            },
                          ],
                          ?name: ::String,
                          ?request_id: ::String,
                          ?role_arn: ::String,
                          ?sources: Array[
                            {
                              password_param: ::String?,
                              url: ::String?,
                              username: ::String?
                            },
                          ],
                          ?tags: Hash[::String, ::String],
                          ?type: ("UDP_PUSH" | "RTP_PUSH" | "RTMP_PUSH" | "RTMP_PULL" | "URL_PULL" | "MP4_FILE" | "MEDIACONNECT" | "INPUT_DEVICE" | "AWS_CDI" | "TS_FILE"),
                          ?vpc: {
                            security_group_ids: Array[::String]?,
                            subnet_ids: Array[::String]
                          }
                        ) -> _CreateInputResponseSuccess
                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInputResponseSuccess

      interface _CreateInputSecurityGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInputSecurityGroupResponse]
        def security_group: () -> Types::InputSecurityGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_input_security_group-instance_method
      def create_input_security_group: (
                                         ?tags: Hash[::String, ::String],
                                         ?whitelist_rules: Array[
                                           {
                                             cidr: ::String?
                                           },
                                         ]
                                       ) -> _CreateInputSecurityGroupResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInputSecurityGroupResponseSuccess

      interface _CreateMultiplexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateMultiplexResponse]
        def multiplex: () -> Types::Multiplex
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_multiplex-instance_method
      def create_multiplex: (
                              availability_zones: Array[::String],
                              multiplex_settings: {
                                maximum_video_buffer_delay_milliseconds: ::Integer?,
                                transport_stream_bitrate: ::Integer,
                                transport_stream_id: ::Integer,
                                transport_stream_reserved_bitrate: ::Integer?
                              },
                              name: ::String,
                              request_id: ::String,
                              ?tags: Hash[::String, ::String]
                            ) -> _CreateMultiplexResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateMultiplexResponseSuccess

      interface _CreateMultiplexProgramResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateMultiplexProgramResponse]
        def multiplex_program: () -> Types::MultiplexProgram
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_multiplex_program-instance_method
      def create_multiplex_program: (
                                      multiplex_id: ::String,
                                      multiplex_program_settings: {
                                        preferred_channel_pipeline: ("CURRENTLY_ACTIVE" | "PIPELINE_0" | "PIPELINE_1")?,
                                        program_number: ::Integer,
                                        service_descriptor: {
                                          provider_name: ::String,
                                          service_name: ::String
                                        }?,
                                        video_settings: {
                                          constant_bitrate: ::Integer?,
                                          statmux_settings: {
                                            maximum_bitrate: ::Integer?,
                                            minimum_bitrate: ::Integer?,
                                            priority: ::Integer?
                                          }?
                                        }?
                                      },
                                      program_name: ::String,
                                      request_id: ::String
                                    ) -> _CreateMultiplexProgramResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateMultiplexProgramResponseSuccess

      interface _CreatePartnerInputResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreatePartnerInputResponse]
        def input: () -> Types::Input
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_partner_input-instance_method
      def create_partner_input: (
                                  input_id: ::String,
                                  ?request_id: ::String,
                                  ?tags: Hash[::String, ::String]
                                ) -> _CreatePartnerInputResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreatePartnerInputResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#create_tags-instance_method
      def create_tags: (
                         resource_arn: ::String,
                         ?tags: Hash[::String, ::String]
                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteChannelResponse]
        def arn: () -> ::String
        def cdi_input_specification: () -> Types::CdiInputSpecification
        def channel_class: () -> ("STANDARD" | "SINGLE_PIPELINE")
        def destinations: () -> ::Array[Types::OutputDestination]
        def egress_endpoints: () -> ::Array[Types::ChannelEgressEndpoint]
        def encoder_settings: () -> Types::EncoderSettings
        def id: () -> ::String
        def input_attachments: () -> ::Array[Types::InputAttachment]
        def input_specification: () -> Types::InputSpecification
        def log_level: () -> ("ERROR" | "WARNING" | "INFO" | "DEBUG" | "DISABLED")
        def maintenance: () -> Types::MaintenanceStatus
        def name: () -> ::String
        def pipeline_details: () -> ::Array[Types::PipelineDetail]
        def pipelines_running_count: () -> ::Integer
        def role_arn: () -> ::String
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED" | "UPDATING" | "UPDATE_FAILED")
        def tags: () -> ::Hash[::String, ::String]
        def vpc: () -> Types::VpcOutputSettingsDescription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_channel-instance_method
      def delete_channel: (
                            channel_id: ::String
                          ) -> _DeleteChannelResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteChannelResponseSuccess

      interface _DeleteInputResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteInputResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_input-instance_method
      def delete_input: (
                          input_id: ::String
                        ) -> _DeleteInputResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteInputResponseSuccess

      interface _DeleteInputSecurityGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteInputSecurityGroupResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_input_security_group-instance_method
      def delete_input_security_group: (
                                         input_security_group_id: ::String
                                       ) -> _DeleteInputSecurityGroupResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteInputSecurityGroupResponseSuccess

      interface _DeleteMultiplexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteMultiplexResponse]
        def arn: () -> ::String
        def availability_zones: () -> ::Array[::String]
        def destinations: () -> ::Array[Types::MultiplexOutputDestination]
        def id: () -> ::String
        def multiplex_settings: () -> Types::MultiplexSettings
        def name: () -> ::String
        def pipelines_running_count: () -> ::Integer
        def program_count: () -> ::Integer
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_multiplex-instance_method
      def delete_multiplex: (
                              multiplex_id: ::String
                            ) -> _DeleteMultiplexResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteMultiplexResponseSuccess

      interface _DeleteMultiplexProgramResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteMultiplexProgramResponse]
        def channel_id: () -> ::String
        def multiplex_program_settings: () -> Types::MultiplexProgramSettings
        def packet_identifiers_map: () -> Types::MultiplexProgramPacketIdentifiersMap
        def pipeline_details: () -> ::Array[Types::MultiplexProgramPipelineDetail]
        def program_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_multiplex_program-instance_method
      def delete_multiplex_program: (
                                      multiplex_id: ::String,
                                      program_name: ::String
                                    ) -> _DeleteMultiplexProgramResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteMultiplexProgramResponseSuccess

      interface _DeleteReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteReservationResponse]
        def arn: () -> ::String
        def count: () -> ::Integer
        def currency_code: () -> ::String
        def duration: () -> ::Integer
        def duration_units: () -> ("MONTHS")
        def end: () -> ::String
        def fixed_price: () -> ::Float
        def name: () -> ::String
        def offering_description: () -> ::String
        def offering_id: () -> ::String
        def offering_type: () -> ("NO_UPFRONT")
        def region: () -> ::String
        def renewal_settings: () -> Types::RenewalSettings
        def reservation_id: () -> ::String
        def resource_specification: () -> Types::ReservationResourceSpecification
        def start: () -> ::String
        def state: () -> ("ACTIVE" | "EXPIRED" | "CANCELED" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
        def usage_price: () -> ::Float
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_reservation-instance_method
      def delete_reservation: (
                                reservation_id: ::String
                              ) -> _DeleteReservationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteReservationResponseSuccess

      interface _DeleteScheduleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteScheduleResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_schedule-instance_method
      def delete_schedule: (
                             channel_id: ::String
                           ) -> _DeleteScheduleResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteScheduleResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#delete_tags-instance_method
      def delete_tags: (
                         resource_arn: ::String,
                         tag_keys: Array[::String]
                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DescribeAccountConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAccountConfigurationResponse]
        def account_configuration: () -> Types::AccountConfiguration
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_account_configuration-instance_method
      def describe_account_configuration: (
                                          ) -> _DescribeAccountConfigurationResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAccountConfigurationResponseSuccess

      interface _DescribeChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeChannelResponse]
        def arn: () -> ::String
        def cdi_input_specification: () -> Types::CdiInputSpecification
        def channel_class: () -> ("STANDARD" | "SINGLE_PIPELINE")
        def destinations: () -> ::Array[Types::OutputDestination]
        def egress_endpoints: () -> ::Array[Types::ChannelEgressEndpoint]
        def encoder_settings: () -> Types::EncoderSettings
        def id: () -> ::String
        def input_attachments: () -> ::Array[Types::InputAttachment]
        def input_specification: () -> Types::InputSpecification
        def log_level: () -> ("ERROR" | "WARNING" | "INFO" | "DEBUG" | "DISABLED")
        def maintenance: () -> Types::MaintenanceStatus
        def name: () -> ::String
        def pipeline_details: () -> ::Array[Types::PipelineDetail]
        def pipelines_running_count: () -> ::Integer
        def role_arn: () -> ::String
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED" | "UPDATING" | "UPDATE_FAILED")
        def tags: () -> ::Hash[::String, ::String]
        def vpc: () -> Types::VpcOutputSettingsDescription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_channel-instance_method
      def describe_channel: (
                              channel_id: ::String
                            ) -> _DescribeChannelResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeChannelResponseSuccess

      interface _DescribeInputResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInputResponse]
        def arn: () -> ::String
        def attached_channels: () -> ::Array[::String]
        def destinations: () -> ::Array[Types::InputDestination]
        def id: () -> ::String
        def input_class: () -> ("STANDARD" | "SINGLE_PIPELINE")
        def input_devices: () -> ::Array[Types::InputDeviceSettings]
        def input_partner_ids: () -> ::Array[::String]
        def input_source_type: () -> ("STATIC" | "DYNAMIC")
        def media_connect_flows: () -> ::Array[Types::MediaConnectFlow]
        def name: () -> ::String
        def role_arn: () -> ::String
        def security_groups: () -> ::Array[::String]
        def sources: () -> ::Array[Types::InputSource]
        def state: () -> ("CREATING" | "DETACHED" | "ATTACHED" | "DELETING" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
        def type: () -> ("UDP_PUSH" | "RTP_PUSH" | "RTMP_PUSH" | "RTMP_PULL" | "URL_PULL" | "MP4_FILE" | "MEDIACONNECT" | "INPUT_DEVICE" | "AWS_CDI" | "TS_FILE")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_input-instance_method
      def describe_input: (
                            input_id: ::String
                          ) -> _DescribeInputResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInputResponseSuccess

      interface _DescribeInputDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInputDeviceResponse]
        def arn: () -> ::String
        def connection_state: () -> ("DISCONNECTED" | "CONNECTED")
        def device_settings_sync_state: () -> ("SYNCED" | "SYNCING")
        def device_update_status: () -> ("UP_TO_DATE" | "NOT_UP_TO_DATE" | "UPDATING")
        def hd_device_settings: () -> Types::InputDeviceHdSettings
        def id: () -> ::String
        def mac_address: () -> ::String
        def name: () -> ::String
        def network_settings: () -> Types::InputDeviceNetworkSettings
        def serial_number: () -> ::String
        def type: () -> ("HD" | "UHD")
        def uhd_device_settings: () -> Types::InputDeviceUhdSettings
        def tags: () -> ::Hash[::String, ::String]
        def availability_zone: () -> ::String
        def medialive_input_arns: () -> ::Array[::String]
        def output_type: () -> ("NONE" | "MEDIALIVE_INPUT" | "MEDIACONNECT_FLOW")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_input_device-instance_method
      def describe_input_device: (
                                   input_device_id: ::String
                                 ) -> _DescribeInputDeviceResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInputDeviceResponseSuccess

      interface _DescribeInputDeviceThumbnailResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInputDeviceThumbnailResponse]
        def body: () -> ::IO
        def content_type: () -> ("image/jpeg")
        def content_length: () -> ::Integer
        def etag: () -> ::String
        def last_modified: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_input_device_thumbnail-instance_method
      def describe_input_device_thumbnail: (
                                             input_device_id: ::String,
                                             accept: ("image/jpeg")
                                           ) ?{ (*untyped) -> void } -> _DescribeInputDeviceThumbnailResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _DescribeInputDeviceThumbnailResponseSuccess

      interface _DescribeInputSecurityGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInputSecurityGroupResponse]
        def arn: () -> ::String
        def id: () -> ::String
        def inputs: () -> ::Array[::String]
        def state: () -> ("IDLE" | "IN_USE" | "UPDATING" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
        def whitelist_rules: () -> ::Array[Types::InputWhitelistRule]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_input_security_group-instance_method
      def describe_input_security_group: (
                                           input_security_group_id: ::String
                                         ) -> _DescribeInputSecurityGroupResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInputSecurityGroupResponseSuccess

      interface _DescribeMultiplexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeMultiplexResponse]
        def arn: () -> ::String
        def availability_zones: () -> ::Array[::String]
        def destinations: () -> ::Array[Types::MultiplexOutputDestination]
        def id: () -> ::String
        def multiplex_settings: () -> Types::MultiplexSettings
        def name: () -> ::String
        def pipelines_running_count: () -> ::Integer
        def program_count: () -> ::Integer
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_multiplex-instance_method
      def describe_multiplex: (
                                multiplex_id: ::String
                              ) -> _DescribeMultiplexResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeMultiplexResponseSuccess

      interface _DescribeMultiplexProgramResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeMultiplexProgramResponse]
        def channel_id: () -> ::String
        def multiplex_program_settings: () -> Types::MultiplexProgramSettings
        def packet_identifiers_map: () -> Types::MultiplexProgramPacketIdentifiersMap
        def pipeline_details: () -> ::Array[Types::MultiplexProgramPipelineDetail]
        def program_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_multiplex_program-instance_method
      def describe_multiplex_program: (
                                        multiplex_id: ::String,
                                        program_name: ::String
                                      ) -> _DescribeMultiplexProgramResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeMultiplexProgramResponseSuccess

      interface _DescribeOfferingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeOfferingResponse]
        def arn: () -> ::String
        def currency_code: () -> ::String
        def duration: () -> ::Integer
        def duration_units: () -> ("MONTHS")
        def fixed_price: () -> ::Float
        def offering_description: () -> ::String
        def offering_id: () -> ::String
        def offering_type: () -> ("NO_UPFRONT")
        def region: () -> ::String
        def resource_specification: () -> Types::ReservationResourceSpecification
        def usage_price: () -> ::Float
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_offering-instance_method
      def describe_offering: (
                               offering_id: ::String
                             ) -> _DescribeOfferingResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOfferingResponseSuccess

      interface _DescribeReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeReservationResponse]
        def arn: () -> ::String
        def count: () -> ::Integer
        def currency_code: () -> ::String
        def duration: () -> ::Integer
        def duration_units: () -> ("MONTHS")
        def end: () -> ::String
        def fixed_price: () -> ::Float
        def name: () -> ::String
        def offering_description: () -> ::String
        def offering_id: () -> ::String
        def offering_type: () -> ("NO_UPFRONT")
        def region: () -> ::String
        def renewal_settings: () -> Types::RenewalSettings
        def reservation_id: () -> ::String
        def resource_specification: () -> Types::ReservationResourceSpecification
        def start: () -> ::String
        def state: () -> ("ACTIVE" | "EXPIRED" | "CANCELED" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
        def usage_price: () -> ::Float
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_reservation-instance_method
      def describe_reservation: (
                                  reservation_id: ::String
                                ) -> _DescribeReservationResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservationResponseSuccess

      interface _DescribeScheduleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeScheduleResponse]
        def next_token: () -> ::String
        def schedule_actions: () -> ::Array[Types::ScheduleAction]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_schedule-instance_method
      def describe_schedule: (
                               channel_id: ::String,
                               ?max_results: ::Integer,
                               ?next_token: ::String
                             ) -> _DescribeScheduleResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeScheduleResponseSuccess

      interface _DescribeThumbnailsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeThumbnailsResponse]
        def thumbnail_details: () -> ::Array[Types::ThumbnailDetail]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#describe_thumbnails-instance_method
      def describe_thumbnails: (
                                 channel_id: ::String,
                                 pipeline_id: ::String,
                                 thumbnail_type: ::String
                               ) -> _DescribeThumbnailsResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeThumbnailsResponseSuccess

      interface _ListChannelsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListChannelsResponse]
        def channels: () -> ::Array[Types::ChannelSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_channels-instance_method
      def list_channels: (
                           ?max_results: ::Integer,
                           ?next_token: ::String
                         ) -> _ListChannelsResponseSuccess
                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListChannelsResponseSuccess

      interface _ListInputDeviceTransfersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListInputDeviceTransfersResponse]
        def input_device_transfers: () -> ::Array[Types::TransferringInputDeviceSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_input_device_transfers-instance_method
      def list_input_device_transfers: (
                                         ?max_results: ::Integer,
                                         ?next_token: ::String,
                                         transfer_type: ::String
                                       ) -> _ListInputDeviceTransfersResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListInputDeviceTransfersResponseSuccess

      interface _ListInputDevicesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListInputDevicesResponse]
        def input_devices: () -> ::Array[Types::InputDeviceSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_input_devices-instance_method
      def list_input_devices: (
                                ?max_results: ::Integer,
                                ?next_token: ::String
                              ) -> _ListInputDevicesResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListInputDevicesResponseSuccess

      interface _ListInputSecurityGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListInputSecurityGroupsResponse]
        def input_security_groups: () -> ::Array[Types::InputSecurityGroup]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_input_security_groups-instance_method
      def list_input_security_groups: (
                                        ?max_results: ::Integer,
                                        ?next_token: ::String
                                      ) -> _ListInputSecurityGroupsResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListInputSecurityGroupsResponseSuccess

      interface _ListInputsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListInputsResponse]
        def inputs: () -> ::Array[Types::Input]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_inputs-instance_method
      def list_inputs: (
                         ?max_results: ::Integer,
                         ?next_token: ::String
                       ) -> _ListInputsResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListInputsResponseSuccess

      interface _ListMultiplexProgramsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListMultiplexProgramsResponse]
        def multiplex_programs: () -> ::Array[Types::MultiplexProgramSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_multiplex_programs-instance_method
      def list_multiplex_programs: (
                                     ?max_results: ::Integer,
                                     multiplex_id: ::String,
                                     ?next_token: ::String
                                   ) -> _ListMultiplexProgramsResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListMultiplexProgramsResponseSuccess

      interface _ListMultiplexesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListMultiplexesResponse]
        def multiplexes: () -> ::Array[Types::MultiplexSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_multiplexes-instance_method
      def list_multiplexes: (
                              ?max_results: ::Integer,
                              ?next_token: ::String
                            ) -> _ListMultiplexesResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListMultiplexesResponseSuccess

      interface _ListOfferingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListOfferingsResponse]
        def next_token: () -> ::String
        def offerings: () -> ::Array[Types::Offering]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_offerings-instance_method
      def list_offerings: (
                            ?channel_class: ::String,
                            ?channel_configuration: ::String,
                            ?codec: ::String,
                            ?duration: ::String,
                            ?max_results: ::Integer,
                            ?maximum_bitrate: ::String,
                            ?maximum_framerate: ::String,
                            ?next_token: ::String,
                            ?resolution: ::String,
                            ?resource_type: ::String,
                            ?special_feature: ::String,
                            ?video_quality: ::String
                          ) -> _ListOfferingsResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListOfferingsResponseSuccess

      interface _ListReservationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListReservationsResponse]
        def next_token: () -> ::String
        def reservations: () -> ::Array[Types::Reservation]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_reservations-instance_method
      def list_reservations: (
                               ?channel_class: ::String,
                               ?codec: ::String,
                               ?max_results: ::Integer,
                               ?maximum_bitrate: ::String,
                               ?maximum_framerate: ::String,
                               ?next_token: ::String,
                               ?resolution: ::String,
                               ?resource_type: ::String,
                               ?special_feature: ::String,
                               ?video_quality: ::String
                             ) -> _ListReservationsResponseSuccess
                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListReservationsResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _PurchaseOfferingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PurchaseOfferingResponse]
        def reservation: () -> Types::Reservation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#purchase_offering-instance_method
      def purchase_offering: (
                               count: ::Integer,
                               ?name: ::String,
                               offering_id: ::String,
                               ?renewal_settings: {
                                 automatic_renewal: ("DISABLED" | "ENABLED" | "UNAVAILABLE")?,
                                 renewal_count: ::Integer?
                               },
                               ?request_id: ::String,
                               ?start: ::String,
                               ?tags: Hash[::String, ::String]
                             ) -> _PurchaseOfferingResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PurchaseOfferingResponseSuccess

      interface _RebootInputDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RebootInputDeviceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#reboot_input_device-instance_method
      def reboot_input_device: (
                                 ?force: ("NO" | "YES"),
                                 input_device_id: ::String
                               ) -> _RebootInputDeviceResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RebootInputDeviceResponseSuccess

      interface _RejectInputDeviceTransferResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectInputDeviceTransferResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#reject_input_device_transfer-instance_method
      def reject_input_device_transfer: (
                                          input_device_id: ::String
                                        ) -> _RejectInputDeviceTransferResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectInputDeviceTransferResponseSuccess

      interface _StartChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartChannelResponse]
        def arn: () -> ::String
        def cdi_input_specification: () -> Types::CdiInputSpecification
        def channel_class: () -> ("STANDARD" | "SINGLE_PIPELINE")
        def destinations: () -> ::Array[Types::OutputDestination]
        def egress_endpoints: () -> ::Array[Types::ChannelEgressEndpoint]
        def encoder_settings: () -> Types::EncoderSettings
        def id: () -> ::String
        def input_attachments: () -> ::Array[Types::InputAttachment]
        def input_specification: () -> Types::InputSpecification
        def log_level: () -> ("ERROR" | "WARNING" | "INFO" | "DEBUG" | "DISABLED")
        def maintenance: () -> Types::MaintenanceStatus
        def name: () -> ::String
        def pipeline_details: () -> ::Array[Types::PipelineDetail]
        def pipelines_running_count: () -> ::Integer
        def role_arn: () -> ::String
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED" | "UPDATING" | "UPDATE_FAILED")
        def tags: () -> ::Hash[::String, ::String]
        def vpc: () -> Types::VpcOutputSettingsDescription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#start_channel-instance_method
      def start_channel: (
                           channel_id: ::String
                         ) -> _StartChannelResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartChannelResponseSuccess

      interface _StartInputDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartInputDeviceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#start_input_device-instance_method
      def start_input_device: (
                                input_device_id: ::String
                              ) -> _StartInputDeviceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartInputDeviceResponseSuccess

      interface _StartInputDeviceMaintenanceWindowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartInputDeviceMaintenanceWindowResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#start_input_device_maintenance_window-instance_method
      def start_input_device_maintenance_window: (
                                                   input_device_id: ::String
                                                 ) -> _StartInputDeviceMaintenanceWindowResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartInputDeviceMaintenanceWindowResponseSuccess

      interface _StartMultiplexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartMultiplexResponse]
        def arn: () -> ::String
        def availability_zones: () -> ::Array[::String]
        def destinations: () -> ::Array[Types::MultiplexOutputDestination]
        def id: () -> ::String
        def multiplex_settings: () -> Types::MultiplexSettings
        def name: () -> ::String
        def pipelines_running_count: () -> ::Integer
        def program_count: () -> ::Integer
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#start_multiplex-instance_method
      def start_multiplex: (
                             multiplex_id: ::String
                           ) -> _StartMultiplexResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartMultiplexResponseSuccess

      interface _StopChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopChannelResponse]
        def arn: () -> ::String
        def cdi_input_specification: () -> Types::CdiInputSpecification
        def channel_class: () -> ("STANDARD" | "SINGLE_PIPELINE")
        def destinations: () -> ::Array[Types::OutputDestination]
        def egress_endpoints: () -> ::Array[Types::ChannelEgressEndpoint]
        def encoder_settings: () -> Types::EncoderSettings
        def id: () -> ::String
        def input_attachments: () -> ::Array[Types::InputAttachment]
        def input_specification: () -> Types::InputSpecification
        def log_level: () -> ("ERROR" | "WARNING" | "INFO" | "DEBUG" | "DISABLED")
        def maintenance: () -> Types::MaintenanceStatus
        def name: () -> ::String
        def pipeline_details: () -> ::Array[Types::PipelineDetail]
        def pipelines_running_count: () -> ::Integer
        def role_arn: () -> ::String
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED" | "UPDATING" | "UPDATE_FAILED")
        def tags: () -> ::Hash[::String, ::String]
        def vpc: () -> Types::VpcOutputSettingsDescription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#stop_channel-instance_method
      def stop_channel: (
                          channel_id: ::String
                        ) -> _StopChannelResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopChannelResponseSuccess

      interface _StopInputDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopInputDeviceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#stop_input_device-instance_method
      def stop_input_device: (
                               input_device_id: ::String
                             ) -> _StopInputDeviceResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopInputDeviceResponseSuccess

      interface _StopMultiplexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopMultiplexResponse]
        def arn: () -> ::String
        def availability_zones: () -> ::Array[::String]
        def destinations: () -> ::Array[Types::MultiplexOutputDestination]
        def id: () -> ::String
        def multiplex_settings: () -> Types::MultiplexSettings
        def name: () -> ::String
        def pipelines_running_count: () -> ::Integer
        def program_count: () -> ::Integer
        def state: () -> ("CREATING" | "CREATE_FAILED" | "IDLE" | "STARTING" | "RUNNING" | "RECOVERING" | "STOPPING" | "DELETING" | "DELETED")
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#stop_multiplex-instance_method
      def stop_multiplex: (
                            multiplex_id: ::String
                          ) -> _StopMultiplexResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopMultiplexResponseSuccess

      interface _TransferInputDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TransferInputDeviceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#transfer_input_device-instance_method
      def transfer_input_device: (
                                   input_device_id: ::String,
                                   ?target_customer_id: ::String,
                                   ?target_region: ::String,
                                   ?transfer_message: ::String
                                 ) -> _TransferInputDeviceResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TransferInputDeviceResponseSuccess

      interface _UpdateAccountConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateAccountConfigurationResponse]
        def account_configuration: () -> Types::AccountConfiguration
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_account_configuration-instance_method
      def update_account_configuration: (
                                          ?account_configuration: {
                                            kms_key_id: ::String?
                                          }
                                        ) -> _UpdateAccountConfigurationResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateAccountConfigurationResponseSuccess

      interface _UpdateChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateChannelResponse]
        def channel: () -> Types::Channel
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_channel-instance_method
      def update_channel: (
                            ?cdi_input_specification: {
                              resolution: ("SD" | "HD" | "FHD" | "UHD")?
                            },
                            channel_id: ::String,
                            ?destinations: Array[
                              {
                                id: ::String?,
                                media_package_settings: Array[
                                  {
                                    channel_id: ::String?
                                  },
                                ]?,
                                multiplex_settings: {
                                  multiplex_id: ::String?,
                                  program_name: ::String?
                                }?,
                                settings: Array[
                                  {
                                    password_param: ::String?,
                                    stream_name: ::String?,
                                    url: ::String?,
                                    username: ::String?
                                  },
                                ]?
                              },
                            ],
                            ?encoder_settings: {
                              audio_descriptions: Array[
                                {
                                  audio_normalization_settings: {
                                    algorithm: ("ITU_1770_1" | "ITU_1770_2")?,
                                    algorithm_control: ("CORRECT_AUDIO")?,
                                    target_lkfs: ::Float?
                                  }?,
                                  audio_selector_name: ::String,
                                  audio_type: ("CLEAN_EFFECTS" | "HEARING_IMPAIRED" | "UNDEFINED" | "VISUAL_IMPAIRED_COMMENTARY")?,
                                  audio_type_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                  audio_watermarking_settings: {
                                    nielsen_watermarks_settings: {
                                      nielsen_cbet_settings: {
                                        cbet_check_digit_string: ::String,
                                        cbet_stepaside: ("DISABLED" | "ENABLED"),
                                        csid: ::String
                                      }?,
                                      nielsen_distribution_type: ("FINAL_DISTRIBUTOR" | "PROGRAM_CONTENT")?,
                                      nielsen_naes_ii_nw_settings: {
                                        check_digit_string: ::String,
                                        sid: ::Float,
                                        timezone: ("AMERICA_PUERTO_RICO" | "US_ALASKA" | "US_ARIZONA" | "US_CENTRAL" | "US_EASTERN" | "US_HAWAII" | "US_MOUNTAIN" | "US_PACIFIC" | "US_SAMOA" | "UTC")?
                                      }?
                                    }?
                                  }?,
                                  codec_settings: {
                                    aac_settings: {
                                      bitrate: ::Float?,
                                      coding_mode: ("AD_RECEIVER_MIX" | "CODING_MODE_1_0" | "CODING_MODE_1_1" | "CODING_MODE_2_0" | "CODING_MODE_5_1")?,
                                      input_type: ("BROADCASTER_MIXED_AD" | "NORMAL")?,
                                      profile: ("HEV1" | "HEV2" | "LC")?,
                                      rate_control_mode: ("CBR" | "VBR")?,
                                      raw_format: ("LATM_LOAS" | "NONE")?,
                                      sample_rate: ::Float?,
                                      spec: ("MPEG2" | "MPEG4")?,
                                      vbr_quality: ("HIGH" | "LOW" | "MEDIUM_HIGH" | "MEDIUM_LOW")?
                                    }?,
                                    ac_3_settings: {
                                      bitrate: ::Float?,
                                      bitstream_mode: ("COMMENTARY" | "COMPLETE_MAIN" | "DIALOGUE" | "EMERGENCY" | "HEARING_IMPAIRED" | "MUSIC_AND_EFFECTS" | "VISUALLY_IMPAIRED" | "VOICE_OVER")?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_1_1" | "CODING_MODE_2_0" | "CODING_MODE_3_2_LFE")?,
                                      dialnorm: ::Integer?,
                                      drc_profile: ("FILM_STANDARD" | "NONE")?,
                                      lfe_filter: ("DISABLED" | "ENABLED")?,
                                      metadata_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                      attenuation_control: ("ATTENUATE_3_DB" | "NONE")?
                                    }?,
                                    eac_3_atmos_settings: {
                                      bitrate: ::Float?,
                                      coding_mode: ("CODING_MODE_5_1_4" | "CODING_MODE_7_1_4" | "CODING_MODE_9_1_6")?,
                                      dialnorm: ::Integer?,
                                      drc_line: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      drc_rf: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      height_trim: ::Float?,
                                      surround_trim: ::Float?
                                    }?,
                                    eac_3_settings: {
                                      attenuation_control: ("ATTENUATE_3_DB" | "NONE")?,
                                      bitrate: ::Float?,
                                      bitstream_mode: ("COMMENTARY" | "COMPLETE_MAIN" | "EMERGENCY" | "HEARING_IMPAIRED" | "VISUALLY_IMPAIRED")?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_2_0" | "CODING_MODE_3_2")?,
                                      dc_filter: ("DISABLED" | "ENABLED")?,
                                      dialnorm: ::Integer?,
                                      drc_line: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      drc_rf: ("FILM_LIGHT" | "FILM_STANDARD" | "MUSIC_LIGHT" | "MUSIC_STANDARD" | "NONE" | "SPEECH")?,
                                      lfe_control: ("LFE" | "NO_LFE")?,
                                      lfe_filter: ("DISABLED" | "ENABLED")?,
                                      lo_ro_center_mix_level: ::Float?,
                                      lo_ro_surround_mix_level: ::Float?,
                                      lt_rt_center_mix_level: ::Float?,
                                      lt_rt_surround_mix_level: ::Float?,
                                      metadata_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                      passthrough_control: ("NO_PASSTHROUGH" | "WHEN_POSSIBLE")?,
                                      phase_control: ("NO_SHIFT" | "SHIFT_90_DEGREES")?,
                                      stereo_downmix: ("DPL2" | "LO_RO" | "LT_RT" | "NOT_INDICATED")?,
                                      surround_ex_mode: ("DISABLED" | "ENABLED" | "NOT_INDICATED")?,
                                      surround_mode: ("DISABLED" | "ENABLED" | "NOT_INDICATED")?
                                    }?,
                                    mp_2_settings: {
                                      bitrate: ::Float?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_2_0")?,
                                      sample_rate: ::Float?
                                    }?,
                                    pass_through_settings: {
                                    }?,
                                    wav_settings: {
                                      bit_depth: ::Float?,
                                      coding_mode: ("CODING_MODE_1_0" | "CODING_MODE_2_0" | "CODING_MODE_4_0" | "CODING_MODE_8_0")?,
                                      sample_rate: ::Float?
                                    }?
                                  }?,
                                  language_code: ::String?,
                                  language_code_control: ("FOLLOW_INPUT" | "USE_CONFIGURED")?,
                                  name: ::String,
                                  remix_settings: {
                                    channel_mappings: Array[
                                      {
                                        input_channel_levels: Array[
                                          {
                                            gain: ::Integer,
                                            input_channel: ::Integer
                                          },
                                        ],
                                        output_channel: ::Integer
                                      },
                                    ],
                                    channels_in: ::Integer?,
                                    channels_out: ::Integer?
                                  }?,
                                  stream_name: ::String?
                                },
                              ],
                              avail_blanking: {
                                avail_blanking_image: {
                                  password_param: ::String?,
                                  uri: ::String,
                                  username: ::String?
                                }?,
                                state: ("DISABLED" | "ENABLED")?
                              }?,
                              avail_configuration: {
                                avail_settings: {
                                  esam: {
                                    acquisition_point_id: ::String,
                                    ad_avail_offset: ::Integer?,
                                    password_param: ::String?,
                                    pois_endpoint: ::String,
                                    username: ::String?,
                                    zone_identity: ::String?
                                  }?,
                                  scte_35_splice_insert: {
                                    ad_avail_offset: ::Integer?,
                                    no_regional_blackout_flag: ("FOLLOW" | "IGNORE")?,
                                    web_delivery_allowed_flag: ("FOLLOW" | "IGNORE")?
                                  }?,
                                  scte_35_time_signal_apos: {
                                    ad_avail_offset: ::Integer?,
                                    no_regional_blackout_flag: ("FOLLOW" | "IGNORE")?,
                                    web_delivery_allowed_flag: ("FOLLOW" | "IGNORE")?
                                  }?
                                }?
                              }?,
                              blackout_slate: {
                                blackout_slate_image: {
                                  password_param: ::String?,
                                  uri: ::String,
                                  username: ::String?
                                }?,
                                network_end_blackout: ("DISABLED" | "ENABLED")?,
                                network_end_blackout_image: {
                                  password_param: ::String?,
                                  uri: ::String,
                                  username: ::String?
                                }?,
                                network_id: ::String?,
                                state: ("DISABLED" | "ENABLED")?
                              }?,
                              caption_descriptions: Array[
                                {
                                  accessibility: ("DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES" | "IMPLEMENTS_ACCESSIBILITY_FEATURES")?,
                                  caption_selector_name: ::String,
                                  destination_settings: {
                                    arib_destination_settings: {
                                    }?,
                                    burn_in_destination_settings: {
                                      alignment: ("CENTERED" | "LEFT" | "SMART")?,
                                      background_color: ("BLACK" | "NONE" | "WHITE")?,
                                      background_opacity: ::Integer?,
                                      font: {
                                        password_param: ::String?,
                                        uri: ::String,
                                        username: ::String?
                                      }?,
                                      font_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      font_opacity: ::Integer?,
                                      font_resolution: ::Integer?,
                                      font_size: ::String?,
                                      outline_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      outline_size: ::Integer?,
                                      shadow_color: ("BLACK" | "NONE" | "WHITE")?,
                                      shadow_opacity: ::Integer?,
                                      shadow_x_offset: ::Integer?,
                                      shadow_y_offset: ::Integer?,
                                      teletext_grid_control: ("FIXED" | "SCALED")?,
                                      x_position: ::Integer?,
                                      y_position: ::Integer?
                                    }?,
                                    dvb_sub_destination_settings: {
                                      alignment: ("CENTERED" | "LEFT" | "SMART")?,
                                      background_color: ("BLACK" | "NONE" | "WHITE")?,
                                      background_opacity: ::Integer?,
                                      font: {
                                        password_param: ::String?,
                                        uri: ::String,
                                        username: ::String?
                                      }?,
                                      font_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      font_opacity: ::Integer?,
                                      font_resolution: ::Integer?,
                                      font_size: ::String?,
                                      outline_color: ("BLACK" | "BLUE" | "GREEN" | "RED" | "WHITE" | "YELLOW")?,
                                      outline_size: ::Integer?,
                                      shadow_color: ("BLACK" | "NONE" | "WHITE")?,
                                      shadow_opacity: ::Integer?,
                                      shadow_x_offset: ::Integer?,
                                      shadow_y_offset: ::Integer?,
                                      teletext_grid_control: ("FIXED" | "SCALED")?,
                                      x_position: ::Integer?,
                                      y_position: ::Integer?
                                    }?,
                                    ebu_tt_d_destination_settings: {
                                      copyright_holder: ::String?,
                                      fill_line_gap: ("DISABLED" | "ENABLED")?,
                                      font_family: ::String?,
                                      style_control: ("EXCLUDE" | "INCLUDE")?
                                    }?,
                                    embedded_destination_settings: {
                                    }?,
                                    embedded_plus_scte_20_destination_settings: {
                                    }?,
                                    rtmp_caption_info_destination_settings: {
                                    }?,
                                    scte_20_plus_embedded_destination_settings: {
                                    }?,
                                    scte_27_destination_settings: {
                                    }?,
                                    smpte_tt_destination_settings: {
                                    }?,
                                    teletext_destination_settings: {
                                    }?,
                                    ttml_destination_settings: {
                                      style_control: ("PASSTHROUGH" | "USE_CONFIGURED")?
                                    }?,
                                    webvtt_destination_settings: {
                                      style_control: ("NO_STYLE_DATA" | "PASSTHROUGH")?
                                    }?
                                  }?,
                                  language_code: ::String?,
                                  language_description: ::String?,
                                  name: ::String
                                },
                              ]?,
                              feature_activations: {
                                input_prepare_schedule_actions: ("DISABLED" | "ENABLED")?,
                                output_static_image_overlay_schedule_actions: ("DISABLED" | "ENABLED")?
                              }?,
                              global_configuration: {
                                initial_audio_gain: ::Integer?,
                                input_end_action: ("NONE" | "SWITCH_AND_LOOP_INPUTS")?,
                                input_loss_behavior: {
                                  black_frame_msec: ::Integer?,
                                  input_loss_image_color: ::String?,
                                  input_loss_image_slate: {
                                    password_param: ::String?,
                                    uri: ::String,
                                    username: ::String?
                                  }?,
                                  input_loss_image_type: ("COLOR" | "SLATE")?,
                                  repeat_frame_msec: ::Integer?
                                }?,
                                output_locking_mode: ("EPOCH_LOCKING" | "PIPELINE_LOCKING")?,
                                output_timing_source: ("INPUT_CLOCK" | "SYSTEM_CLOCK")?,
                                support_low_framerate_inputs: ("DISABLED" | "ENABLED")?,
                                output_locking_settings: {
                                  epoch_locking_settings: {
                                    custom_epoch: ::String?,
                                    jam_sync_time: ::String?
                                  }?,
                                  pipeline_locking_settings: {
                                  }?
                                }?
                              }?,
                              motion_graphics_configuration: {
                                motion_graphics_insertion: ("DISABLED" | "ENABLED")?,
                                motion_graphics_settings: {
                                  html_motion_graphics_settings: {
                                  }?
                                }
                              }?,
                              nielsen_configuration: {
                                distributor_id: ::String?,
                                nielsen_pcm_to_id_3_tagging: ("DISABLED" | "ENABLED")?
                              }?,
                              output_groups: Array[
                                {
                                  name: ::String?,
                                  output_group_settings: {
                                    archive_group_settings: {
                                      archive_cdn_settings: {
                                        archive_s3_settings: {
                                          canned_acl: ("AUTHENTICATED_READ" | "BUCKET_OWNER_FULL_CONTROL" | "BUCKET_OWNER_READ" | "PUBLIC_READ")?
                                        }?
                                      }?,
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      rollover_interval: ::Integer?
                                    }?,
                                    frame_capture_group_settings: {
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      frame_capture_cdn_settings: {
                                        frame_capture_s3_settings: {
                                          canned_acl: ("AUTHENTICATED_READ" | "BUCKET_OWNER_FULL_CONTROL" | "BUCKET_OWNER_READ" | "PUBLIC_READ")?
                                        }?
                                      }?
                                    }?,
                                    hls_group_settings: {
                                      ad_markers: Array[("ADOBE" | "ELEMENTAL" | "ELEMENTAL_SCTE35")]?,
                                      base_url_content: ::String?,
                                      base_url_content_1: ::String?,
                                      base_url_manifest: ::String?,
                                      base_url_manifest_1: ::String?,
                                      caption_language_mappings: Array[
                                        {
                                          caption_channel: ::Integer,
                                          language_code: ::String,
                                          language_description: ::String
                                        },
                                      ]?,
                                      caption_language_setting: ("INSERT" | "NONE" | "OMIT")?,
                                      client_cache: ("DISABLED" | "ENABLED")?,
                                      codec_specification: ("RFC_4281" | "RFC_6381")?,
                                      constant_iv: ::String?,
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      directory_structure: ("SINGLE_DIRECTORY" | "SUBDIRECTORY_PER_STREAM")?,
                                      discontinuity_tags: ("INSERT" | "NEVER_INSERT")?,
                                      encryption_type: ("AES128" | "SAMPLE_AES")?,
                                      hls_cdn_settings: {
                                        hls_akamai_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          http_transfer_mode: ("CHUNKED" | "NON_CHUNKED")?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?,
                                          salt: ::String?,
                                          token: ::String?
                                        }?,
                                        hls_basic_put_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?
                                        }?,
                                        hls_media_store_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          media_store_storage_class: ("TEMPORAL")?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?
                                        }?,
                                        hls_s3_settings: {
                                          canned_acl: ("AUTHENTICATED_READ" | "BUCKET_OWNER_FULL_CONTROL" | "BUCKET_OWNER_READ" | "PUBLIC_READ")?
                                        }?,
                                        hls_webdav_settings: {
                                          connection_retry_interval: ::Integer?,
                                          filecache_duration: ::Integer?,
                                          http_transfer_mode: ("CHUNKED" | "NON_CHUNKED")?,
                                          num_retries: ::Integer?,
                                          restart_delay: ::Integer?
                                        }?
                                      }?,
                                      hls_id_3_segment_tagging: ("DISABLED" | "ENABLED")?,
                                      i_frame_only_playlists: ("DISABLED" | "STANDARD")?,
                                      incomplete_segment_behavior: ("AUTO" | "SUPPRESS")?,
                                      index_n_segments: ::Integer?,
                                      input_loss_action: ("EMIT_OUTPUT" | "PAUSE_OUTPUT")?,
                                      iv_in_manifest: ("EXCLUDE" | "INCLUDE")?,
                                      iv_source: ("EXPLICIT" | "FOLLOWS_SEGMENT_NUMBER")?,
                                      keep_segments: ::Integer?,
                                      key_format: ::String?,
                                      key_format_versions: ::String?,
                                      key_provider_settings: {
                                        static_key_settings: {
                                          key_provider_server: {
                                            password_param: ::String?,
                                            uri: ::String,
                                            username: ::String?
                                          }?,
                                          static_key_value: ::String
                                        }?
                                      }?,
                                      manifest_compression: ("GZIP" | "NONE")?,
                                      manifest_duration_format: ("FLOATING_POINT" | "INTEGER")?,
                                      min_segment_length: ::Integer?,
                                      mode: ("LIVE" | "VOD")?,
                                      output_selection: ("MANIFESTS_AND_SEGMENTS" | "SEGMENTS_ONLY" | "VARIANT_MANIFESTS_AND_SEGMENTS")?,
                                      program_date_time: ("EXCLUDE" | "INCLUDE")?,
                                      program_date_time_clock: ("INITIALIZE_FROM_OUTPUT_TIMECODE" | "SYSTEM_CLOCK")?,
                                      program_date_time_period: ::Integer?,
                                      redundant_manifest: ("DISABLED" | "ENABLED")?,
                                      segment_length: ::Integer?,
                                      segmentation_mode: ("USE_INPUT_SEGMENTATION" | "USE_SEGMENT_DURATION")?,
                                      segments_per_subdirectory: ::Integer?,
                                      stream_inf_resolution: ("EXCLUDE" | "INCLUDE")?,
                                      timed_metadata_id_3_frame: ("NONE" | "PRIV" | "TDRL")?,
                                      timed_metadata_id_3_period: ::Integer?,
                                      timestamp_delta_milliseconds: ::Integer?,
                                      ts_file_mode: ("SEGMENTED_FILES" | "SINGLE_FILE")?
                                    }?,
                                    media_package_group_settings: {
                                      destination: {
                                        destination_ref_id: ::String?
                                      }
                                    }?,
                                    ms_smooth_group_settings: {
                                      acquisition_point_id: ::String?,
                                      audio_only_timecode_control: ("PASSTHROUGH" | "USE_CONFIGURED_CLOCK")?,
                                      certificate_mode: ("SELF_SIGNED" | "VERIFY_AUTHENTICITY")?,
                                      connection_retry_interval: ::Integer?,
                                      destination: {
                                        destination_ref_id: ::String?
                                      },
                                      event_id: ::String?,
                                      event_id_mode: ("NO_EVENT_ID" | "USE_CONFIGURED" | "USE_TIMESTAMP")?,
                                      event_stop_behavior: ("NONE" | "SEND_EOS")?,
                                      filecache_duration: ::Integer?,
                                      fragment_length: ::Integer?,
                                      input_loss_action: ("EMIT_OUTPUT" | "PAUSE_OUTPUT")?,
                                      num_retries: ::Integer?,
                                      restart_delay: ::Integer?,
                                      segmentation_mode: ("USE_INPUT_SEGMENTATION" | "USE_SEGMENT_DURATION")?,
                                      send_delay_ms: ::Integer?,
                                      sparse_track_type: ("NONE" | "SCTE_35" | "SCTE_35_WITHOUT_SEGMENTATION")?,
                                      stream_manifest_behavior: ("DO_NOT_SEND" | "SEND")?,
                                      timestamp_offset: ::String?,
                                      timestamp_offset_mode: ("USE_CONFIGURED_OFFSET" | "USE_EVENT_START_DATE")?
                                    }?,
                                    multiplex_group_settings: {
                                    }?,
                                    rtmp_group_settings: {
                                      ad_markers: Array[("ON_CUE_POINT_SCTE35")]?,
                                      authentication_scheme: ("AKAMAI" | "COMMON")?,
                                      cache_full_behavior: ("DISCONNECT_IMMEDIATELY" | "WAIT_FOR_SERVER")?,
                                      cache_length: ::Integer?,
                                      caption_data: ("ALL" | "FIELD1_608" | "FIELD1_AND_FIELD2_608")?,
                                      input_loss_action: ("EMIT_OUTPUT" | "PAUSE_OUTPUT")?,
                                      restart_delay: ::Integer?,
                                      include_filler_nal_units: ("AUTO" | "DROP" | "INCLUDE")?
                                    }?,
                                    udp_group_settings: {
                                      input_loss_action: ("DROP_PROGRAM" | "DROP_TS" | "EMIT_PROGRAM")?,
                                      timed_metadata_id_3_frame: ("NONE" | "PRIV" | "TDRL")?,
                                      timed_metadata_id_3_period: ::Integer?
                                    }?
                                  },
                                  outputs: Array[
                                    {
                                      audio_description_names: Array[::String]?,
                                      caption_description_names: Array[::String]?,
                                      output_name: ::String?,
                                      output_settings: {
                                        archive_output_settings: {
                                          container_settings: {
                                            m2ts_settings: {
                                              absent_input_audio_behavior: ("DROP" | "ENCODE_SILENCE")?,
                                              arib: ("DISABLED" | "ENABLED")?,
                                              arib_captions_pid: ::String?,
                                              arib_captions_pid_control: ("AUTO" | "USE_CONFIGURED")?,
                                              audio_buffer_model: ("ATSC" | "DVB")?,
                                              audio_frames_per_pes: ::Integer?,
                                              audio_pids: ::String?,
                                              audio_stream_type: ("ATSC" | "DVB")?,
                                              bitrate: ::Integer?,
                                              buffer_model: ("MULTIPLEX" | "NONE")?,
                                              cc_descriptor: ("DISABLED" | "ENABLED")?,
                                              dvb_nit_settings: {
                                                network_id: ::Integer,
                                                network_name: ::String,
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_sdt_settings: {
                                                output_sdt: ("SDT_FOLLOW" | "SDT_FOLLOW_IF_PRESENT" | "SDT_MANUAL" | "SDT_NONE")?,
                                                rep_interval: ::Integer?,
                                                service_name: ::String?,
                                                service_provider_name: ::String?
                                              }?,
                                              dvb_sub_pids: ::String?,
                                              dvb_tdt_settings: {
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_teletext_pid: ::String?,
                                              ebif: ("NONE" | "PASSTHROUGH")?,
                                              ebp_audio_interval: ("VIDEO_AND_FIXED_INTERVALS" | "VIDEO_INTERVAL")?,
                                              ebp_lookahead_ms: ::Integer?,
                                              ebp_placement: ("VIDEO_AND_AUDIO_PIDS" | "VIDEO_PID")?,
                                              ecm_pid: ::String?,
                                              es_rate_in_pes: ("EXCLUDE" | "INCLUDE")?,
                                              etv_platform_pid: ::String?,
                                              etv_signal_pid: ::String?,
                                              fragment_time: ::Float?,
                                              klv: ("NONE" | "PASSTHROUGH")?,
                                              klv_data_pids: ::String?,
                                              nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              null_packet_bitrate: ::Float?,
                                              pat_interval: ::Integer?,
                                              pcr_control: ("CONFIGURED_PCR_PERIOD" | "PCR_EVERY_PES_PACKET")?,
                                              pcr_period: ::Integer?,
                                              pcr_pid: ::String?,
                                              pmt_interval: ::Integer?,
                                              pmt_pid: ::String?,
                                              program_num: ::Integer?,
                                              rate_mode: ("CBR" | "VBR")?,
                                              scte_27_pids: ::String?,
                                              scte_35_control: ("NONE" | "PASSTHROUGH")?,
                                              scte_35_pid: ::String?,
                                              scte_35_preroll_pullup_milliseconds: ::Float?,
                                              segmentation_markers: ("EBP" | "EBP_LEGACY" | "NONE" | "PSI_SEGSTART" | "RAI_ADAPT" | "RAI_SEGSTART")?,
                                              segmentation_style: ("MAINTAIN_CADENCE" | "RESET_CADENCE")?,
                                              segmentation_time: ::Float?,
                                              timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              timed_metadata_pid: ::String?,
                                              transport_stream_id: ::Integer?,
                                              video_pid: ::String?
                                            }?,
                                            raw_settings: {
                                            }?
                                          },
                                          extension: ::String?,
                                          name_modifier: ::String?
                                        }?,
                                        frame_capture_output_settings: {
                                          name_modifier: ::String?
                                        }?,
                                        hls_output_settings: {
                                          h265_packaging_type: ("HEV1" | "HVC1")?,
                                          hls_settings: {
                                            audio_only_hls_settings: {
                                              audio_group_id: ::String?,
                                              audio_only_image: {
                                                password_param: ::String?,
                                                uri: ::String,
                                                username: ::String?
                                              }?,
                                              audio_track_type: ("ALTERNATE_AUDIO_AUTO_SELECT" | "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT" | "ALTERNATE_AUDIO_NOT_AUTO_SELECT" | "AUDIO_ONLY_VARIANT_STREAM")?,
                                              segment_type: ("AAC" | "FMP4")?
                                            }?,
                                            fmp_4_hls_settings: {
                                              audio_rendition_sets: ::String?,
                                              nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?
                                            }?,
                                            frame_capture_hls_settings: {
                                            }?,
                                            standard_hls_settings: {
                                              audio_rendition_sets: ::String?,
                                              m3u_8_settings: {
                                                audio_frames_per_pes: ::Integer?,
                                                audio_pids: ::String?,
                                                ecm_pid: ::String?,
                                                nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                pat_interval: ::Integer?,
                                                pcr_control: ("CONFIGURED_PCR_PERIOD" | "PCR_EVERY_PES_PACKET")?,
                                                pcr_period: ::Integer?,
                                                pcr_pid: ::String?,
                                                pmt_interval: ::Integer?,
                                                pmt_pid: ::String?,
                                                program_num: ::Integer?,
                                                scte_35_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                scte_35_pid: ::String?,
                                                timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                timed_metadata_pid: ::String?,
                                                transport_stream_id: ::Integer?,
                                                video_pid: ::String?,
                                                klv_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                                klv_data_pids: ::String?
                                              }
                                            }?
                                          },
                                          name_modifier: ::String?,
                                          segment_modifier: ::String?
                                        }?,
                                        media_package_output_settings: {
                                        }?,
                                        ms_smooth_output_settings: {
                                          h265_packaging_type: ("HEV1" | "HVC1")?,
                                          name_modifier: ::String?
                                        }?,
                                        multiplex_output_settings: {
                                          destination: {
                                            destination_ref_id: ::String?
                                          }
                                        }?,
                                        rtmp_output_settings: {
                                          certificate_mode: ("SELF_SIGNED" | "VERIFY_AUTHENTICITY")?,
                                          connection_retry_interval: ::Integer?,
                                          destination: {
                                            destination_ref_id: ::String?
                                          },
                                          num_retries: ::Integer?
                                        }?,
                                        udp_output_settings: {
                                          buffer_msec: ::Integer?,
                                          container_settings: {
                                            m2ts_settings: {
                                              absent_input_audio_behavior: ("DROP" | "ENCODE_SILENCE")?,
                                              arib: ("DISABLED" | "ENABLED")?,
                                              arib_captions_pid: ::String?,
                                              arib_captions_pid_control: ("AUTO" | "USE_CONFIGURED")?,
                                              audio_buffer_model: ("ATSC" | "DVB")?,
                                              audio_frames_per_pes: ::Integer?,
                                              audio_pids: ::String?,
                                              audio_stream_type: ("ATSC" | "DVB")?,
                                              bitrate: ::Integer?,
                                              buffer_model: ("MULTIPLEX" | "NONE")?,
                                              cc_descriptor: ("DISABLED" | "ENABLED")?,
                                              dvb_nit_settings: {
                                                network_id: ::Integer,
                                                network_name: ::String,
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_sdt_settings: {
                                                output_sdt: ("SDT_FOLLOW" | "SDT_FOLLOW_IF_PRESENT" | "SDT_MANUAL" | "SDT_NONE")?,
                                                rep_interval: ::Integer?,
                                                service_name: ::String?,
                                                service_provider_name: ::String?
                                              }?,
                                              dvb_sub_pids: ::String?,
                                              dvb_tdt_settings: {
                                                rep_interval: ::Integer?
                                              }?,
                                              dvb_teletext_pid: ::String?,
                                              ebif: ("NONE" | "PASSTHROUGH")?,
                                              ebp_audio_interval: ("VIDEO_AND_FIXED_INTERVALS" | "VIDEO_INTERVAL")?,
                                              ebp_lookahead_ms: ::Integer?,
                                              ebp_placement: ("VIDEO_AND_AUDIO_PIDS" | "VIDEO_PID")?,
                                              ecm_pid: ::String?,
                                              es_rate_in_pes: ("EXCLUDE" | "INCLUDE")?,
                                              etv_platform_pid: ::String?,
                                              etv_signal_pid: ::String?,
                                              fragment_time: ::Float?,
                                              klv: ("NONE" | "PASSTHROUGH")?,
                                              klv_data_pids: ::String?,
                                              nielsen_id_3_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              null_packet_bitrate: ::Float?,
                                              pat_interval: ::Integer?,
                                              pcr_control: ("CONFIGURED_PCR_PERIOD" | "PCR_EVERY_PES_PACKET")?,
                                              pcr_period: ::Integer?,
                                              pcr_pid: ::String?,
                                              pmt_interval: ::Integer?,
                                              pmt_pid: ::String?,
                                              program_num: ::Integer?,
                                              rate_mode: ("CBR" | "VBR")?,
                                              scte_27_pids: ::String?,
                                              scte_35_control: ("NONE" | "PASSTHROUGH")?,
                                              scte_35_pid: ::String?,
                                              scte_35_preroll_pullup_milliseconds: ::Float?,
                                              segmentation_markers: ("EBP" | "EBP_LEGACY" | "NONE" | "PSI_SEGSTART" | "RAI_ADAPT" | "RAI_SEGSTART")?,
                                              segmentation_style: ("MAINTAIN_CADENCE" | "RESET_CADENCE")?,
                                              segmentation_time: ::Float?,
                                              timed_metadata_behavior: ("NO_PASSTHROUGH" | "PASSTHROUGH")?,
                                              timed_metadata_pid: ::String?,
                                              transport_stream_id: ::Integer?,
                                              video_pid: ::String?
                                            }?
                                          },
                                          destination: {
                                            destination_ref_id: ::String?
                                          },
                                          fec_output_settings: {
                                            column_depth: ::Integer?,
                                            include_fec: ("COLUMN" | "COLUMN_AND_ROW")?,
                                            row_length: ::Integer?
                                          }?
                                        }?
                                      },
                                      video_description_name: ::String?
                                    },
                                  ]
                                },
                              ],
                              timecode_config: {
                                source: ("EMBEDDED" | "SYSTEMCLOCK" | "ZEROBASED"),
                                sync_threshold: ::Integer?
                              },
                              video_descriptions: Array[
                                {
                                  codec_settings: {
                                    frame_capture_settings: {
                                      capture_interval: ::Integer?,
                                      capture_interval_units: ("MILLISECONDS" | "SECONDS")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?,
                                    h264_settings: {
                                      adaptive_quantization: ("AUTO" | "HIGH" | "HIGHER" | "LOW" | "MAX" | "MEDIUM" | "OFF")?,
                                      afd_signaling: ("AUTO" | "FIXED" | "NONE")?,
                                      bitrate: ::Integer?,
                                      buf_fill_pct: ::Integer?,
                                      buf_size: ::Integer?,
                                      color_metadata: ("IGNORE" | "INSERT")?,
                                      color_space_settings: {
                                        color_space_passthrough_settings: {
                                        }?,
                                        rec_601_settings: {
                                        }?,
                                        rec_709_settings: {
                                        }?
                                      }?,
                                      entropy_encoding: ("CABAC" | "CAVLC")?,
                                      filter_settings: {
                                        temporal_filter_settings: {
                                          post_filter_sharpening: ("AUTO" | "DISABLED" | "ENABLED")?,
                                          strength: ("AUTO" | "STRENGTH_1" | "STRENGTH_2" | "STRENGTH_3" | "STRENGTH_4" | "STRENGTH_5" | "STRENGTH_6" | "STRENGTH_7" | "STRENGTH_8" | "STRENGTH_9" | "STRENGTH_10" | "STRENGTH_11" | "STRENGTH_12" | "STRENGTH_13" | "STRENGTH_14" | "STRENGTH_15" | "STRENGTH_16")?
                                        }?
                                      }?,
                                      fixed_afd: ("AFD_0000" | "AFD_0010" | "AFD_0011" | "AFD_0100" | "AFD_1000" | "AFD_1001" | "AFD_1010" | "AFD_1011" | "AFD_1101" | "AFD_1110" | "AFD_1111")?,
                                      flicker_aq: ("DISABLED" | "ENABLED")?,
                                      force_field_pictures: ("DISABLED" | "ENABLED")?,
                                      framerate_control: ("INITIALIZE_FROM_SOURCE" | "SPECIFIED")?,
                                      framerate_denominator: ::Integer?,
                                      framerate_numerator: ::Integer?,
                                      gop_b_reference: ("DISABLED" | "ENABLED")?,
                                      gop_closed_cadence: ::Integer?,
                                      gop_num_b_frames: ::Integer?,
                                      gop_size: ::Float?,
                                      gop_size_units: ("FRAMES" | "SECONDS")?,
                                      level: ("H264_LEVEL_1" | "H264_LEVEL_1_1" | "H264_LEVEL_1_2" | "H264_LEVEL_1_3" | "H264_LEVEL_2" | "H264_LEVEL_2_1" | "H264_LEVEL_2_2" | "H264_LEVEL_3" | "H264_LEVEL_3_1" | "H264_LEVEL_3_2" | "H264_LEVEL_4" | "H264_LEVEL_4_1" | "H264_LEVEL_4_2" | "H264_LEVEL_5" | "H264_LEVEL_5_1" | "H264_LEVEL_5_2" | "H264_LEVEL_AUTO")?,
                                      look_ahead_rate_control: ("HIGH" | "LOW" | "MEDIUM")?,
                                      max_bitrate: ::Integer?,
                                      min_i_interval: ::Integer?,
                                      num_ref_frames: ::Integer?,
                                      par_control: ("INITIALIZE_FROM_SOURCE" | "SPECIFIED")?,
                                      par_denominator: ::Integer?,
                                      par_numerator: ::Integer?,
                                      profile: ("BASELINE" | "HIGH" | "HIGH_10BIT" | "HIGH_422" | "HIGH_422_10BIT" | "MAIN")?,
                                      quality_level: ("ENHANCED_QUALITY" | "STANDARD_QUALITY")?,
                                      qvbr_quality_level: ::Integer?,
                                      rate_control_mode: ("CBR" | "MULTIPLEX" | "QVBR" | "VBR")?,
                                      scan_type: ("INTERLACED" | "PROGRESSIVE")?,
                                      scene_change_detect: ("DISABLED" | "ENABLED")?,
                                      slices: ::Integer?,
                                      softness: ::Integer?,
                                      spatial_aq: ("DISABLED" | "ENABLED")?,
                                      subgop_length: ("DYNAMIC" | "FIXED")?,
                                      syntax: ("DEFAULT" | "RP2027")?,
                                      temporal_aq: ("DISABLED" | "ENABLED")?,
                                      timecode_insertion: ("DISABLED" | "PIC_TIMING_SEI")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?,
                                    h265_settings: {
                                      adaptive_quantization: ("AUTO" | "HIGH" | "HIGHER" | "LOW" | "MAX" | "MEDIUM" | "OFF")?,
                                      afd_signaling: ("AUTO" | "FIXED" | "NONE")?,
                                      alternative_transfer_function: ("INSERT" | "OMIT")?,
                                      bitrate: ::Integer?,
                                      buf_size: ::Integer?,
                                      color_metadata: ("IGNORE" | "INSERT")?,
                                      color_space_settings: {
                                        color_space_passthrough_settings: {
                                        }?,
                                        dolby_vision_81_settings: {
                                        }?,
                                        hdr_10_settings: {
                                          max_cll: ::Integer?,
                                          max_fall: ::Integer?
                                        }?,
                                        rec_601_settings: {
                                        }?,
                                        rec_709_settings: {
                                        }?
                                      }?,
                                      filter_settings: {
                                        temporal_filter_settings: {
                                          post_filter_sharpening: ("AUTO" | "DISABLED" | "ENABLED")?,
                                          strength: ("AUTO" | "STRENGTH_1" | "STRENGTH_2" | "STRENGTH_3" | "STRENGTH_4" | "STRENGTH_5" | "STRENGTH_6" | "STRENGTH_7" | "STRENGTH_8" | "STRENGTH_9" | "STRENGTH_10" | "STRENGTH_11" | "STRENGTH_12" | "STRENGTH_13" | "STRENGTH_14" | "STRENGTH_15" | "STRENGTH_16")?
                                        }?
                                      }?,
                                      fixed_afd: ("AFD_0000" | "AFD_0010" | "AFD_0011" | "AFD_0100" | "AFD_1000" | "AFD_1001" | "AFD_1010" | "AFD_1011" | "AFD_1101" | "AFD_1110" | "AFD_1111")?,
                                      flicker_aq: ("DISABLED" | "ENABLED")?,
                                      framerate_denominator: ::Integer,
                                      framerate_numerator: ::Integer,
                                      gop_closed_cadence: ::Integer?,
                                      gop_size: ::Float?,
                                      gop_size_units: ("FRAMES" | "SECONDS")?,
                                      level: ("H265_LEVEL_1" | "H265_LEVEL_2" | "H265_LEVEL_2_1" | "H265_LEVEL_3" | "H265_LEVEL_3_1" | "H265_LEVEL_4" | "H265_LEVEL_4_1" | "H265_LEVEL_5" | "H265_LEVEL_5_1" | "H265_LEVEL_5_2" | "H265_LEVEL_6" | "H265_LEVEL_6_1" | "H265_LEVEL_6_2" | "H265_LEVEL_AUTO")?,
                                      look_ahead_rate_control: ("HIGH" | "LOW" | "MEDIUM")?,
                                      max_bitrate: ::Integer?,
                                      min_i_interval: ::Integer?,
                                      par_denominator: ::Integer?,
                                      par_numerator: ::Integer?,
                                      profile: ("MAIN" | "MAIN_10BIT")?,
                                      qvbr_quality_level: ::Integer?,
                                      rate_control_mode: ("CBR" | "MULTIPLEX" | "QVBR")?,
                                      scan_type: ("INTERLACED" | "PROGRESSIVE")?,
                                      scene_change_detect: ("DISABLED" | "ENABLED")?,
                                      slices: ::Integer?,
                                      tier: ("HIGH" | "MAIN")?,
                                      timecode_insertion: ("DISABLED" | "PIC_TIMING_SEI")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?,
                                    mpeg_2_settings: {
                                      adaptive_quantization: ("AUTO" | "HIGH" | "LOW" | "MEDIUM" | "OFF")?,
                                      afd_signaling: ("AUTO" | "FIXED" | "NONE")?,
                                      color_metadata: ("IGNORE" | "INSERT")?,
                                      color_space: ("AUTO" | "PASSTHROUGH")?,
                                      display_aspect_ratio: ("DISPLAYRATIO16X9" | "DISPLAYRATIO4X3")?,
                                      filter_settings: {
                                        temporal_filter_settings: {
                                          post_filter_sharpening: ("AUTO" | "DISABLED" | "ENABLED")?,
                                          strength: ("AUTO" | "STRENGTH_1" | "STRENGTH_2" | "STRENGTH_3" | "STRENGTH_4" | "STRENGTH_5" | "STRENGTH_6" | "STRENGTH_7" | "STRENGTH_8" | "STRENGTH_9" | "STRENGTH_10" | "STRENGTH_11" | "STRENGTH_12" | "STRENGTH_13" | "STRENGTH_14" | "STRENGTH_15" | "STRENGTH_16")?
                                        }?
                                      }?,
                                      fixed_afd: ("AFD_0000" | "AFD_0010" | "AFD_0011" | "AFD_0100" | "AFD_1000" | "AFD_1001" | "AFD_1010" | "AFD_1011" | "AFD_1101" | "AFD_1110" | "AFD_1111")?,
                                      framerate_denominator: ::Integer,
                                      framerate_numerator: ::Integer,
                                      gop_closed_cadence: ::Integer?,
                                      gop_num_b_frames: ::Integer?,
                                      gop_size: ::Float?,
                                      gop_size_units: ("FRAMES" | "SECONDS")?,
                                      scan_type: ("INTERLACED" | "PROGRESSIVE")?,
                                      subgop_length: ("DYNAMIC" | "FIXED")?,
                                      timecode_insertion: ("DISABLED" | "GOP_TIMECODE")?,
                                      timecode_burnin_settings: {
                                        font_size: ("EXTRA_SMALL_10" | "LARGE_48" | "MEDIUM_32" | "SMALL_16"),
                                        position: ("BOTTOM_CENTER" | "BOTTOM_LEFT" | "BOTTOM_RIGHT" | "MIDDLE_CENTER" | "MIDDLE_LEFT" | "MIDDLE_RIGHT" | "TOP_CENTER" | "TOP_LEFT" | "TOP_RIGHT"),
                                        prefix: ::String?
                                      }?
                                    }?
                                  }?,
                                  height: ::Integer?,
                                  name: ::String,
                                  respond_to_afd: ("NONE" | "PASSTHROUGH" | "RESPOND")?,
                                  scaling_behavior: ("DEFAULT" | "STRETCH_TO_OUTPUT")?,
                                  sharpness: ::Integer?,
                                  width: ::Integer?
                                },
                              ],
                              thumbnail_configuration: {
                                state: ("AUTO" | "DISABLED")
                              }?,
                              color_correction_settings: {
                                global_color_corrections: Array[
                                  {
                                    input_color_space: ("HDR10" | "HLG_2020" | "REC_601" | "REC_709"),
                                    output_color_space: ("HDR10" | "HLG_2020" | "REC_601" | "REC_709"),
                                    uri: ::String
                                  },
                                ]
                              }?
                            },
                            ?input_attachments: Array[
                              {
                                automatic_input_failover_settings: {
                                  error_clear_time_msec: ::Integer?,
                                  failover_conditions: Array[
                                    {
                                      failover_condition_settings: {
                                        audio_silence_settings: {
                                          audio_selector_name: ::String,
                                          audio_silence_threshold_msec: ::Integer?
                                        }?,
                                        input_loss_settings: {
                                          input_loss_threshold_msec: ::Integer?
                                        }?,
                                        video_black_settings: {
                                          black_detect_threshold: ::Float?,
                                          video_black_threshold_msec: ::Integer?
                                        }?
                                      }?
                                    },
                                  ]?,
                                  input_preference: ("EQUAL_INPUT_PREFERENCE" | "PRIMARY_INPUT_PREFERRED")?,
                                  secondary_input_id: ::String
                                }?,
                                input_attachment_name: ::String?,
                                input_id: ::String?,
                                input_settings: {
                                  audio_selectors: Array[
                                    {
                                      name: ::String,
                                      selector_settings: {
                                        audio_hls_rendition_selection: {
                                          group_id: ::String,
                                          name: ::String
                                        }?,
                                        audio_language_selection: {
                                          language_code: ::String,
                                          language_selection_policy: ("LOOSE" | "STRICT")?
                                        }?,
                                        audio_pid_selection: {
                                          pid: ::Integer
                                        }?,
                                        audio_track_selection: {
                                          tracks: Array[
                                            {
                                              track: ::Integer
                                            },
                                          ],
                                          dolby_e_decode: {
                                            program_selection: ("ALL_CHANNELS" | "PROGRAM_1" | "PROGRAM_2" | "PROGRAM_3" | "PROGRAM_4" | "PROGRAM_5" | "PROGRAM_6" | "PROGRAM_7" | "PROGRAM_8")
                                          }?
                                        }?
                                      }?
                                    },
                                  ]?,
                                  caption_selectors: Array[
                                    {
                                      language_code: ::String?,
                                      name: ::String,
                                      selector_settings: {
                                        ancillary_source_settings: {
                                          source_ancillary_channel_number: ::Integer?
                                        }?,
                                        arib_source_settings: {
                                        }?,
                                        dvb_sub_source_settings: {
                                          ocr_language: ("DEU" | "ENG" | "FRA" | "NLD" | "POR" | "SPA")?,
                                          pid: ::Integer?
                                        }?,
                                        embedded_source_settings: {
                                          convert_608_to_708: ("DISABLED" | "UPCONVERT")?,
                                          scte_20_detection: ("AUTO" | "OFF")?,
                                          source_608_channel_number: ::Integer?,
                                          source_608_track_number: ::Integer?
                                        }?,
                                        scte_20_source_settings: {
                                          convert_608_to_708: ("DISABLED" | "UPCONVERT")?,
                                          source_608_channel_number: ::Integer?
                                        }?,
                                        scte_27_source_settings: {
                                          ocr_language: ("DEU" | "ENG" | "FRA" | "NLD" | "POR" | "SPA")?,
                                          pid: ::Integer?
                                        }?,
                                        teletext_source_settings: {
                                          output_rectangle: {
                                            height: ::Float,
                                            left_offset: ::Float,
                                            top_offset: ::Float,
                                            width: ::Float
                                          }?,
                                          page_number: ::String?
                                        }?
                                      }?
                                    },
                                  ]?,
                                  deblock_filter: ("DISABLED" | "ENABLED")?,
                                  denoise_filter: ("DISABLED" | "ENABLED")?,
                                  filter_strength: ::Integer?,
                                  input_filter: ("AUTO" | "DISABLED" | "FORCED")?,
                                  network_input_settings: {
                                    hls_input_settings: {
                                      bandwidth: ::Integer?,
                                      buffer_segments: ::Integer?,
                                      retries: ::Integer?,
                                      retry_interval: ::Integer?,
                                      scte_35_source: ("MANIFEST" | "SEGMENTS")?
                                    }?,
                                    server_validation: ("CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME" | "CHECK_CRYPTOGRAPHY_ONLY")?
                                  }?,
                                  scte_35_pid: ::Integer?,
                                  smpte_2038_data_preference: ("IGNORE" | "PREFER")?,
                                  source_end_behavior: ("CONTINUE" | "LOOP")?,
                                  video_selector: {
                                    color_space: ("FOLLOW" | "HDR10" | "HLG_2020" | "REC_601" | "REC_709")?,
                                    color_space_settings: {
                                      hdr_10_settings: {
                                        max_cll: ::Integer?,
                                        max_fall: ::Integer?
                                      }?
                                    }?,
                                    color_space_usage: ("FALLBACK" | "FORCE")?,
                                    selector_settings: {
                                      video_selector_pid: {
                                        pid: ::Integer?
                                      }?,
                                      video_selector_program_id: {
                                        program_id: ::Integer?
                                      }?
                                    }?
                                  }?
                                }?
                              },
                            ],
                            ?input_specification: {
                              codec: ("MPEG2" | "AVC" | "HEVC")?,
                              maximum_bitrate: ("MAX_10_MBPS" | "MAX_20_MBPS" | "MAX_50_MBPS")?,
                              resolution: ("SD" | "HD" | "UHD")?
                            },
                            ?log_level: ("ERROR" | "WARNING" | "INFO" | "DEBUG" | "DISABLED"),
                            ?maintenance: {
                              maintenance_day: ("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY")?,
                              maintenance_scheduled_date: ::String?,
                              maintenance_start_time: ::String?
                            },
                            ?name: ::String,
                            ?role_arn: ::String
                          ) -> _UpdateChannelResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateChannelResponseSuccess

      interface _UpdateChannelClassResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateChannelClassResponse]
        def channel: () -> Types::Channel
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_channel_class-instance_method
      def update_channel_class: (
                                  channel_class: ("STANDARD" | "SINGLE_PIPELINE"),
                                  channel_id: ::String,
                                  ?destinations: Array[
                                    {
                                      id: ::String?,
                                      media_package_settings: Array[
                                        {
                                          channel_id: ::String?
                                        },
                                      ]?,
                                      multiplex_settings: {
                                        multiplex_id: ::String?,
                                        program_name: ::String?
                                      }?,
                                      settings: Array[
                                        {
                                          password_param: ::String?,
                                          stream_name: ::String?,
                                          url: ::String?,
                                          username: ::String?
                                        },
                                      ]?
                                    },
                                  ]
                                ) -> _UpdateChannelClassResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateChannelClassResponseSuccess

      interface _UpdateInputResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateInputResponse]
        def input: () -> Types::Input
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_input-instance_method
      def update_input: (
                          ?destinations: Array[
                            {
                              stream_name: ::String?
                            },
                          ],
                          ?input_devices: Array[
                            {
                              id: ::String?
                            },
                          ],
                          input_id: ::String,
                          ?input_security_groups: Array[::String],
                          ?media_connect_flows: Array[
                            {
                              flow_arn: ::String?
                            },
                          ],
                          ?name: ::String,
                          ?role_arn: ::String,
                          ?sources: Array[
                            {
                              password_param: ::String?,
                              url: ::String?,
                              username: ::String?
                            },
                          ]
                        ) -> _UpdateInputResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateInputResponseSuccess

      interface _UpdateInputDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateInputDeviceResponse]
        def arn: () -> ::String
        def connection_state: () -> ("DISCONNECTED" | "CONNECTED")
        def device_settings_sync_state: () -> ("SYNCED" | "SYNCING")
        def device_update_status: () -> ("UP_TO_DATE" | "NOT_UP_TO_DATE" | "UPDATING")
        def hd_device_settings: () -> Types::InputDeviceHdSettings
        def id: () -> ::String
        def mac_address: () -> ::String
        def name: () -> ::String
        def network_settings: () -> Types::InputDeviceNetworkSettings
        def serial_number: () -> ::String
        def type: () -> ("HD" | "UHD")
        def uhd_device_settings: () -> Types::InputDeviceUhdSettings
        def tags: () -> ::Hash[::String, ::String]
        def availability_zone: () -> ::String
        def medialive_input_arns: () -> ::Array[::String]
        def output_type: () -> ("NONE" | "MEDIALIVE_INPUT" | "MEDIACONNECT_FLOW")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_input_device-instance_method
      def update_input_device: (
                                 ?hd_device_settings: {
                                   configured_input: ("AUTO" | "HDMI" | "SDI")?,
                                   max_bitrate: ::Integer?,
                                   latency_ms: ::Integer?,
                                   codec: ("HEVC" | "AVC")?,
                                   mediaconnect_settings: {
                                     flow_arn: ::String?,
                                     role_arn: ::String?,
                                     secret_arn: ::String?,
                                     source_name: ::String?
                                   }?,
                                   audio_channel_pairs: Array[
                                     {
                                       id: ::Integer?,
                                       profile: ("DISABLED" | "VBR-AAC_HHE-16000" | "VBR-AAC_HE-64000" | "VBR-AAC_LC-128000" | "CBR-AAC_HQ-192000" | "CBR-AAC_HQ-256000" | "CBR-AAC_HQ-384000" | "CBR-AAC_HQ-512000")?
                                     },
                                   ]?
                                 },
                                 input_device_id: ::String,
                                 ?name: ::String,
                                 ?uhd_device_settings: {
                                   configured_input: ("AUTO" | "HDMI" | "SDI")?,
                                   max_bitrate: ::Integer?,
                                   latency_ms: ::Integer?,
                                   codec: ("HEVC" | "AVC")?,
                                   mediaconnect_settings: {
                                     flow_arn: ::String?,
                                     role_arn: ::String?,
                                     secret_arn: ::String?,
                                     source_name: ::String?
                                   }?,
                                   audio_channel_pairs: Array[
                                     {
                                       id: ::Integer?,
                                       profile: ("DISABLED" | "VBR-AAC_HHE-16000" | "VBR-AAC_HE-64000" | "VBR-AAC_LC-128000" | "CBR-AAC_HQ-192000" | "CBR-AAC_HQ-256000" | "CBR-AAC_HQ-384000" | "CBR-AAC_HQ-512000")?
                                     },
                                   ]?
                                 },
                                 ?availability_zone: ::String
                               ) -> _UpdateInputDeviceResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateInputDeviceResponseSuccess

      interface _UpdateInputSecurityGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateInputSecurityGroupResponse]
        def security_group: () -> Types::InputSecurityGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_input_security_group-instance_method
      def update_input_security_group: (
                                         input_security_group_id: ::String,
                                         ?tags: Hash[::String, ::String],
                                         ?whitelist_rules: Array[
                                           {
                                             cidr: ::String?
                                           },
                                         ]
                                       ) -> _UpdateInputSecurityGroupResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateInputSecurityGroupResponseSuccess

      interface _UpdateMultiplexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateMultiplexResponse]
        def multiplex: () -> Types::Multiplex
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_multiplex-instance_method
      def update_multiplex: (
                              multiplex_id: ::String,
                              ?multiplex_settings: {
                                maximum_video_buffer_delay_milliseconds: ::Integer?,
                                transport_stream_bitrate: ::Integer,
                                transport_stream_id: ::Integer,
                                transport_stream_reserved_bitrate: ::Integer?
                              },
                              ?name: ::String
                            ) -> _UpdateMultiplexResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateMultiplexResponseSuccess

      interface _UpdateMultiplexProgramResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateMultiplexProgramResponse]
        def multiplex_program: () -> Types::MultiplexProgram
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_multiplex_program-instance_method
      def update_multiplex_program: (
                                      multiplex_id: ::String,
                                      ?multiplex_program_settings: {
                                        preferred_channel_pipeline: ("CURRENTLY_ACTIVE" | "PIPELINE_0" | "PIPELINE_1")?,
                                        program_number: ::Integer,
                                        service_descriptor: {
                                          provider_name: ::String,
                                          service_name: ::String
                                        }?,
                                        video_settings: {
                                          constant_bitrate: ::Integer?,
                                          statmux_settings: {
                                            maximum_bitrate: ::Integer?,
                                            minimum_bitrate: ::Integer?,
                                            priority: ::Integer?
                                          }?
                                        }?
                                      },
                                      program_name: ::String
                                    ) -> _UpdateMultiplexProgramResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateMultiplexProgramResponseSuccess

      interface _UpdateReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateReservationResponse]
        def reservation: () -> Types::Reservation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#update_reservation-instance_method
      def update_reservation: (
                                ?name: ::String,
                                ?renewal_settings: {
                                  automatic_renewal: ("DISABLED" | "ENABLED" | "UNAVAILABLE")?,
                                  renewal_count: ::Integer?
                                },
                                reservation_id: ::String
                              ) -> _UpdateReservationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateReservationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaLive/Client.html#wait_until-instance_method
      def wait_until: (:channel_created waiter_name, 
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_created waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_deleted waiter_name, 
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_deleted waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_running waiter_name, 
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_running waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_stopped waiter_name, 
                    channel_id: ::String
                  ) -> Client::_DescribeChannelResponseSuccess
                    | (:channel_stopped waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeChannelResponseSuccess
                    | (:input_attached waiter_name, 
                    input_id: ::String
                  ) -> Client::_DescribeInputResponseSuccess
                    | (:input_attached waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInputResponseSuccess
                    | (:input_deleted waiter_name, 
                    input_id: ::String
                  ) -> Client::_DescribeInputResponseSuccess
                    | (:input_deleted waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInputResponseSuccess
                    | (:input_detached waiter_name, 
                    input_id: ::String
                  ) -> Client::_DescribeInputResponseSuccess
                    | (:input_detached waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInputResponseSuccess
                    | (:multiplex_created waiter_name, 
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_created waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_deleted waiter_name, 
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_deleted waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_running waiter_name, 
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_running waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_stopped waiter_name, 
                    multiplex_id: ::String
                  ) -> Client::_DescribeMultiplexResponseSuccess
                    | (:multiplex_stopped waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeMultiplexResponseSuccess
    end
  end
end

