# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module NetworkMonitor
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CreateMonitorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateMonitorOutput]
        def monitor_arn: () -> ::String
        def monitor_name: () -> ::String
        def state: () -> ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING")
        def aggregation_period: () -> ::Integer
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#create_monitor-instance_method
      def create_monitor: (
                            monitor_name: ::String,
                            ?probes: Array[
                              {
                                source_arn: ::String,
                                destination: ::String,
                                destination_port: ::Integer?,
                                protocol: ("TCP" | "ICMP"),
                                packet_size: ::Integer?,
                                probe_tags: Hash[::String, ::String]?
                              },
                            ],
                            ?aggregation_period: ::Integer,
                            ?client_token: ::String,
                            ?tags: Hash[::String, ::String]
                          ) -> _CreateMonitorResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateMonitorResponseSuccess

      interface _CreateProbeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateProbeOutput]
        def probe_id: () -> ::String
        def probe_arn: () -> ::String
        def source_arn: () -> ::String
        def destination: () -> ::String
        def destination_port: () -> ::Integer
        def protocol: () -> ("TCP" | "ICMP")
        def packet_size: () -> ::Integer
        def address_family: () -> ("IPV4" | "IPV6")
        def vpc_id: () -> ::String
        def state: () -> ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING" | "DELETED")
        def created_at: () -> ::Time
        def modified_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#create_probe-instance_method
      def create_probe: (
                          monitor_name: ::String,
                          probe: {
                            source_arn: ::String,
                            destination: ::String,
                            destination_port: ::Integer?,
                            protocol: ("TCP" | "ICMP"),
                            packet_size: ::Integer?,
                            tags: Hash[::String, ::String]?
                          },
                          ?client_token: ::String,
                          ?tags: Hash[::String, ::String]
                        ) -> _CreateProbeResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateProbeResponseSuccess

      interface _DeleteMonitorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteMonitorOutput]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#delete_monitor-instance_method
      def delete_monitor: (
                            monitor_name: ::String
                          ) -> _DeleteMonitorResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteMonitorResponseSuccess

      interface _DeleteProbeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteProbeOutput]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#delete_probe-instance_method
      def delete_probe: (
                          monitor_name: ::String,
                          probe_id: ::String
                        ) -> _DeleteProbeResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteProbeResponseSuccess

      interface _GetMonitorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetMonitorOutput]
        def monitor_arn: () -> ::String
        def monitor_name: () -> ::String
        def state: () -> ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING")
        def aggregation_period: () -> ::Integer
        def tags: () -> ::Hash[::String, ::String]
        def probes: () -> ::Array[Types::Probe]
        def created_at: () -> ::Time
        def modified_at: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#get_monitor-instance_method
      def get_monitor: (
                         monitor_name: ::String
                       ) -> _GetMonitorResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetMonitorResponseSuccess

      interface _GetProbeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetProbeOutput]
        def probe_id: () -> ::String
        def probe_arn: () -> ::String
        def source_arn: () -> ::String
        def destination: () -> ::String
        def destination_port: () -> ::Integer
        def protocol: () -> ("TCP" | "ICMP")
        def packet_size: () -> ::Integer
        def address_family: () -> ("IPV4" | "IPV6")
        def vpc_id: () -> ::String
        def state: () -> ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING" | "DELETED")
        def created_at: () -> ::Time
        def modified_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#get_probe-instance_method
      def get_probe: (
                       monitor_name: ::String,
                       probe_id: ::String
                     ) -> _GetProbeResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetProbeResponseSuccess

      interface _ListMonitorsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListMonitorsOutput]
        def monitors: () -> ::Array[Types::MonitorSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#list_monitors-instance_method
      def list_monitors: (
                           ?next_token: ::String,
                           ?max_results: ::Integer,
                           ?state: ::String
                         ) -> _ListMonitorsResponseSuccess
                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListMonitorsResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceOutput]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceOutput]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceOutput]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateMonitorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateMonitorOutput]
        def monitor_arn: () -> ::String
        def monitor_name: () -> ::String
        def state: () -> ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING")
        def aggregation_period: () -> ::Integer
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#update_monitor-instance_method
      def update_monitor: (
                            monitor_name: ::String,
                            aggregation_period: ::Integer
                          ) -> _UpdateMonitorResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateMonitorResponseSuccess

      interface _UpdateProbeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateProbeOutput]
        def probe_id: () -> ::String
        def probe_arn: () -> ::String
        def source_arn: () -> ::String
        def destination: () -> ::String
        def destination_port: () -> ::Integer
        def protocol: () -> ("TCP" | "ICMP")
        def packet_size: () -> ::Integer
        def address_family: () -> ("IPV4" | "IPV6")
        def vpc_id: () -> ::String
        def state: () -> ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING" | "DELETED")
        def created_at: () -> ::Time
        def modified_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/NetworkMonitor/Client.html#update_probe-instance_method
      def update_probe: (
                          monitor_name: ::String,
                          probe_id: ::String,
                          ?state: ("PENDING" | "ACTIVE" | "INACTIVE" | "ERROR" | "DELETING" | "DELETED"),
                          ?destination: ::String,
                          ?destination_port: ::Integer,
                          ?protocol: ("TCP" | "ICMP"),
                          ?packet_size: ::Integer
                        ) -> _UpdateProbeResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateProbeResponseSuccess
    end
  end
end

