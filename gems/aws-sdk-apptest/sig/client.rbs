# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module AppTest
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CreateTestCaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTestCaseResponse]
        def test_case_id: () -> ::String
        def test_case_version: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#create_test_case-instance_method
      def create_test_case: (
                              name: ::String,
                              ?description: ::String,
                              steps: Array[
                                {
                                  name: ::String,
                                  description: ::String?,
                                  action: {
                                    resource_action: {
                                      m2_managed_application_action: {
                                        resource: ::String,
                                        action_type: ("Configure" | "Deconfigure"),
                                        properties: {
                                          force_stop: bool?,
                                          import_data_set_location: ::String?
                                        }?
                                      }?,
                                      m2_non_managed_application_action: {
                                        resource: ::String,
                                        action_type: ("Configure" | "Deconfigure")
                                      }?,
                                      cloud_formation_action: {
                                        resource: ::String,
                                        action_type: ("Create" | "Delete")?
                                      }?
                                    }?,
                                    mainframe_action: {
                                      resource: ::String,
                                      action_type: {
                                        batch: {
                                          batch_job_name: ::String,
                                          batch_job_parameters: Hash[::String, ::String]?,
                                          export_data_set_names: Array[::String]?
                                        }?,
                                        tn3270: {
                                          script: {
                                            script_location: ::String,
                                            type: ("Selenium")
                                          },
                                          export_data_set_names: Array[::String]?
                                        }?
                                      },
                                      properties: {
                                        dms_task_arn: ::String?
                                      }?
                                    }?,
                                    compare_action: {
                                      input: {
                                        file: {
                                          source_location: ::String,
                                          target_location: ::String,
                                          file_metadata: {
                                            data_sets: Array[
                                              {
                                                type: ("PS"),
                                                name: ::String,
                                                ccsid: ::String,
                                                format: ("FIXED" | "VARIABLE" | "LINE_SEQUENTIAL"),
                                                length: ::Integer
                                              },
                                            ]?,
                                            database_cdc: {
                                              source_metadata: {
                                                type: ("z/OS-DB2"),
                                                capture_tool: ("Precisely" | "AWS DMS")
                                              },
                                              target_metadata: {
                                                type: ("PostgreSQL"),
                                                capture_tool: ("Precisely" | "AWS DMS")
                                              }
                                            }?
                                          }
                                        }?
                                      },
                                      output: {
                                        file: {
                                          file_location: ::String?
                                        }?
                                      }?
                                    }?
                                  }
                                },
                              ],
                              ?client_token: ::String,
                              ?tags: Hash[::String, ::String]
                            ) -> _CreateTestCaseResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTestCaseResponseSuccess

      interface _CreateTestConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTestConfigurationResponse]
        def test_configuration_id: () -> ::String
        def test_configuration_version: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#create_test_configuration-instance_method
      def create_test_configuration: (
                                       name: ::String,
                                       ?description: ::String,
                                       resources: Array[
                                         {
                                           name: ::String,
                                           type: {
                                             cloud_formation: {
                                               template_location: ::String,
                                               parameters: Hash[::String, ::String]?
                                             }?,
                                             m2_managed_application: {
                                               application_id: ::String,
                                               runtime: ("MicroFocus"),
                                               vpc_endpoint_service_name: ::String?,
                                               listener_port: ::String?
                                             }?,
                                             m2_non_managed_application: {
                                               vpc_endpoint_service_name: ::String,
                                               listener_port: ::String,
                                               runtime: ("BluAge"),
                                               web_app_name: ::String?
                                             }?
                                           }
                                         },
                                       ],
                                       ?properties: Hash[::String, ::String],
                                       ?client_token: ::String,
                                       ?tags: Hash[::String, ::String],
                                       ?service_settings: {
                                         kms_key_id: ::String?
                                       }
                                     ) -> _CreateTestConfigurationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTestConfigurationResponseSuccess

      interface _CreateTestSuiteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTestSuiteResponse]
        def test_suite_id: () -> ::String
        def test_suite_version: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#create_test_suite-instance_method
      def create_test_suite: (
                               name: ::String,
                               ?description: ::String,
                               ?before_steps: Array[
                                 {
                                   name: ::String,
                                   description: ::String?,
                                   action: {
                                     resource_action: {
                                       m2_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure"),
                                         properties: {
                                           force_stop: bool?,
                                           import_data_set_location: ::String?
                                         }?
                                       }?,
                                       m2_non_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure")
                                       }?,
                                       cloud_formation_action: {
                                         resource: ::String,
                                         action_type: ("Create" | "Delete")?
                                       }?
                                     }?,
                                     mainframe_action: {
                                       resource: ::String,
                                       action_type: {
                                         batch: {
                                           batch_job_name: ::String,
                                           batch_job_parameters: Hash[::String, ::String]?,
                                           export_data_set_names: Array[::String]?
                                         }?,
                                         tn3270: {
                                           script: {
                                             script_location: ::String,
                                             type: ("Selenium")
                                           },
                                           export_data_set_names: Array[::String]?
                                         }?
                                       },
                                       properties: {
                                         dms_task_arn: ::String?
                                       }?
                                     }?,
                                     compare_action: {
                                       input: {
                                         file: {
                                           source_location: ::String,
                                           target_location: ::String,
                                           file_metadata: {
                                             data_sets: Array[
                                               {
                                                 type: ("PS"),
                                                 name: ::String,
                                                 ccsid: ::String,
                                                 format: ("FIXED" | "VARIABLE" | "LINE_SEQUENTIAL"),
                                                 length: ::Integer
                                               },
                                             ]?,
                                             database_cdc: {
                                               source_metadata: {
                                                 type: ("z/OS-DB2"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               },
                                               target_metadata: {
                                                 type: ("PostgreSQL"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               }
                                             }?
                                           }
                                         }?
                                       },
                                       output: {
                                         file: {
                                           file_location: ::String?
                                         }?
                                       }?
                                     }?
                                   }
                                 },
                               ],
                               ?after_steps: Array[
                                 {
                                   name: ::String,
                                   description: ::String?,
                                   action: {
                                     resource_action: {
                                       m2_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure"),
                                         properties: {
                                           force_stop: bool?,
                                           import_data_set_location: ::String?
                                         }?
                                       }?,
                                       m2_non_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure")
                                       }?,
                                       cloud_formation_action: {
                                         resource: ::String,
                                         action_type: ("Create" | "Delete")?
                                       }?
                                     }?,
                                     mainframe_action: {
                                       resource: ::String,
                                       action_type: {
                                         batch: {
                                           batch_job_name: ::String,
                                           batch_job_parameters: Hash[::String, ::String]?,
                                           export_data_set_names: Array[::String]?
                                         }?,
                                         tn3270: {
                                           script: {
                                             script_location: ::String,
                                             type: ("Selenium")
                                           },
                                           export_data_set_names: Array[::String]?
                                         }?
                                       },
                                       properties: {
                                         dms_task_arn: ::String?
                                       }?
                                     }?,
                                     compare_action: {
                                       input: {
                                         file: {
                                           source_location: ::String,
                                           target_location: ::String,
                                           file_metadata: {
                                             data_sets: Array[
                                               {
                                                 type: ("PS"),
                                                 name: ::String,
                                                 ccsid: ::String,
                                                 format: ("FIXED" | "VARIABLE" | "LINE_SEQUENTIAL"),
                                                 length: ::Integer
                                               },
                                             ]?,
                                             database_cdc: {
                                               source_metadata: {
                                                 type: ("z/OS-DB2"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               },
                                               target_metadata: {
                                                 type: ("PostgreSQL"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               }
                                             }?
                                           }
                                         }?
                                       },
                                       output: {
                                         file: {
                                           file_location: ::String?
                                         }?
                                       }?
                                     }?
                                   }
                                 },
                               ],
                               test_cases: {
                                 sequential: Array[::String]?
                               },
                               ?client_token: ::String,
                               ?tags: Hash[::String, ::String]
                             ) -> _CreateTestSuiteResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTestSuiteResponseSuccess

      interface _DeleteTestCaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTestCaseResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#delete_test_case-instance_method
      def delete_test_case: (
                              test_case_id: ::String
                            ) -> _DeleteTestCaseResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTestCaseResponseSuccess

      interface _DeleteTestConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTestConfigurationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#delete_test_configuration-instance_method
      def delete_test_configuration: (
                                       test_configuration_id: ::String
                                     ) -> _DeleteTestConfigurationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTestConfigurationResponseSuccess

      interface _DeleteTestRunResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTestRunResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#delete_test_run-instance_method
      def delete_test_run: (
                             test_run_id: ::String
                           ) -> _DeleteTestRunResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTestRunResponseSuccess

      interface _DeleteTestSuiteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTestSuiteResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#delete_test_suite-instance_method
      def delete_test_suite: (
                               test_suite_id: ::String
                             ) -> _DeleteTestSuiteResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTestSuiteResponseSuccess

      interface _GetTestCaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTestCaseResponse]
        def test_case_id: () -> ::String
        def test_case_arn: () -> ::String
        def name: () -> ::String
        def description: () -> ::String
        def latest_version: () -> Types::TestCaseLatestVersion
        def test_case_version: () -> ::Integer
        def status: () -> ("Active" | "Deleting")
        def status_reason: () -> ::String
        def creation_time: () -> ::Time
        def last_update_time: () -> ::Time
        def steps: () -> ::Array[Types::Step]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#get_test_case-instance_method
      def get_test_case: (
                           test_case_id: ::String,
                           ?test_case_version: ::Integer
                         ) -> _GetTestCaseResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTestCaseResponseSuccess

      interface _GetTestConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTestConfigurationResponse]
        def test_configuration_id: () -> ::String
        def name: () -> ::String
        def test_configuration_arn: () -> ::String
        def latest_version: () -> Types::TestConfigurationLatestVersion
        def test_configuration_version: () -> ::Integer
        def status: () -> ("Active" | "Deleting")
        def status_reason: () -> ::String
        def creation_time: () -> ::Time
        def last_update_time: () -> ::Time
        def description: () -> ::String
        def resources: () -> ::Array[Types::Resource]
        def properties: () -> ::Hash[::String, ::String]
        def tags: () -> ::Hash[::String, ::String]
        def service_settings: () -> Types::ServiceSettings
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#get_test_configuration-instance_method
      def get_test_configuration: (
                                    test_configuration_id: ::String,
                                    ?test_configuration_version: ::Integer
                                  ) -> _GetTestConfigurationResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTestConfigurationResponseSuccess

      interface _GetTestRunStepResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTestRunStepResponse]
        def step_name: () -> ::String
        def test_run_id: () -> ::String
        def test_case_id: () -> ::String
        def test_case_version: () -> ::Integer
        def test_suite_id: () -> ::String
        def test_suite_version: () -> ::Integer
        def before_step: () -> bool
        def after_step: () -> bool
        def status: () -> ("Success" | "Failed" | "Running")
        def status_reason: () -> ::String
        def run_start_time: () -> ::Time
        def run_end_time: () -> ::Time
        def step_run_summary: () -> Types::StepRunSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#get_test_run_step-instance_method
      def get_test_run_step: (
                               test_run_id: ::String,
                               step_name: ::String,
                               ?test_case_id: ::String,
                               ?test_suite_id: ::String
                             ) -> _GetTestRunStepResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTestRunStepResponseSuccess

      interface _GetTestSuiteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTestSuiteResponse]
        def test_suite_id: () -> ::String
        def name: () -> ::String
        def latest_version: () -> Types::TestSuiteLatestVersion
        def test_suite_version: () -> ::Integer
        def status: () -> ("Creating" | "Updating" | "Active" | "Failed" | "Deleting")
        def status_reason: () -> ::String
        def test_suite_arn: () -> ::String
        def creation_time: () -> ::Time
        def last_update_time: () -> ::Time
        def description: () -> ::String
        def before_steps: () -> ::Array[Types::Step]
        def after_steps: () -> ::Array[Types::Step]
        def test_cases: () -> Types::TestCases
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#get_test_suite-instance_method
      def get_test_suite: (
                            test_suite_id: ::String,
                            ?test_suite_version: ::Integer
                          ) -> _GetTestSuiteResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTestSuiteResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ListTestCasesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTestCasesResponse]
        def test_cases: () -> ::Array[Types::TestCaseSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_test_cases-instance_method
      def list_test_cases: (
                             ?test_case_ids: Array[::String],
                             ?next_token: ::String,
                             ?max_results: ::Integer
                           ) -> _ListTestCasesResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTestCasesResponseSuccess

      interface _ListTestConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTestConfigurationsResponse]
        def test_configurations: () -> ::Array[Types::TestConfigurationSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_test_configurations-instance_method
      def list_test_configurations: (
                                      ?test_configuration_ids: Array[::String],
                                      ?next_token: ::String,
                                      ?max_results: ::Integer
                                    ) -> _ListTestConfigurationsResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTestConfigurationsResponseSuccess

      interface _ListTestRunStepsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTestRunStepsResponse]
        def test_run_steps: () -> ::Array[Types::TestRunStepSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_test_run_steps-instance_method
      def list_test_run_steps: (
                                 test_run_id: ::String,
                                 ?test_case_id: ::String,
                                 ?test_suite_id: ::String,
                                 ?next_token: ::String,
                                 ?max_results: ::Integer
                               ) -> _ListTestRunStepsResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTestRunStepsResponseSuccess

      interface _ListTestRunTestCasesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTestRunTestCasesResponse]
        def test_run_test_cases: () -> ::Array[Types::TestCaseRunSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_test_run_test_cases-instance_method
      def list_test_run_test_cases: (
                                      test_run_id: ::String,
                                      ?next_token: ::String,
                                      ?max_results: ::Integer
                                    ) -> _ListTestRunTestCasesResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTestRunTestCasesResponseSuccess

      interface _ListTestRunsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTestRunsResponse]
        def test_runs: () -> ::Array[Types::TestRunSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_test_runs-instance_method
      def list_test_runs: (
                            ?test_suite_id: ::String,
                            ?test_run_ids: Array[::String],
                            ?next_token: ::String,
                            ?max_results: ::Integer
                          ) -> _ListTestRunsResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTestRunsResponseSuccess

      interface _ListTestSuitesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTestSuitesResponse]
        def test_suites: () -> ::Array[Types::TestSuiteSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#list_test_suites-instance_method
      def list_test_suites: (
                              ?test_suite_ids: Array[::String],
                              ?next_token: ::String,
                              ?max_results: ::Integer
                            ) -> _ListTestSuitesResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTestSuitesResponseSuccess

      interface _StartTestRunResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartTestRunResponse]
        def test_run_id: () -> ::String
        def test_run_status: () -> ("Success" | "Running" | "Failed" | "Deleting")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#start_test_run-instance_method
      def start_test_run: (
                            test_suite_id: ::String,
                            ?test_configuration_id: ::String,
                            ?client_token: ::String,
                            ?tags: Hash[::String, ::String]
                          ) -> _StartTestRunResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartTestRunResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateTestCaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateTestCaseResponse]
        def test_case_id: () -> ::String
        def test_case_version: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#update_test_case-instance_method
      def update_test_case: (
                              test_case_id: ::String,
                              ?description: ::String,
                              ?steps: Array[
                                {
                                  name: ::String,
                                  description: ::String?,
                                  action: {
                                    resource_action: {
                                      m2_managed_application_action: {
                                        resource: ::String,
                                        action_type: ("Configure" | "Deconfigure"),
                                        properties: {
                                          force_stop: bool?,
                                          import_data_set_location: ::String?
                                        }?
                                      }?,
                                      m2_non_managed_application_action: {
                                        resource: ::String,
                                        action_type: ("Configure" | "Deconfigure")
                                      }?,
                                      cloud_formation_action: {
                                        resource: ::String,
                                        action_type: ("Create" | "Delete")?
                                      }?
                                    }?,
                                    mainframe_action: {
                                      resource: ::String,
                                      action_type: {
                                        batch: {
                                          batch_job_name: ::String,
                                          batch_job_parameters: Hash[::String, ::String]?,
                                          export_data_set_names: Array[::String]?
                                        }?,
                                        tn3270: {
                                          script: {
                                            script_location: ::String,
                                            type: ("Selenium")
                                          },
                                          export_data_set_names: Array[::String]?
                                        }?
                                      },
                                      properties: {
                                        dms_task_arn: ::String?
                                      }?
                                    }?,
                                    compare_action: {
                                      input: {
                                        file: {
                                          source_location: ::String,
                                          target_location: ::String,
                                          file_metadata: {
                                            data_sets: Array[
                                              {
                                                type: ("PS"),
                                                name: ::String,
                                                ccsid: ::String,
                                                format: ("FIXED" | "VARIABLE" | "LINE_SEQUENTIAL"),
                                                length: ::Integer
                                              },
                                            ]?,
                                            database_cdc: {
                                              source_metadata: {
                                                type: ("z/OS-DB2"),
                                                capture_tool: ("Precisely" | "AWS DMS")
                                              },
                                              target_metadata: {
                                                type: ("PostgreSQL"),
                                                capture_tool: ("Precisely" | "AWS DMS")
                                              }
                                            }?
                                          }
                                        }?
                                      },
                                      output: {
                                        file: {
                                          file_location: ::String?
                                        }?
                                      }?
                                    }?
                                  }
                                },
                              ]
                            ) -> _UpdateTestCaseResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateTestCaseResponseSuccess

      interface _UpdateTestConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateTestConfigurationResponse]
        def test_configuration_id: () -> ::String
        def test_configuration_version: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#update_test_configuration-instance_method
      def update_test_configuration: (
                                       test_configuration_id: ::String,
                                       ?description: ::String,
                                       ?resources: Array[
                                         {
                                           name: ::String,
                                           type: {
                                             cloud_formation: {
                                               template_location: ::String,
                                               parameters: Hash[::String, ::String]?
                                             }?,
                                             m2_managed_application: {
                                               application_id: ::String,
                                               runtime: ("MicroFocus"),
                                               vpc_endpoint_service_name: ::String?,
                                               listener_port: ::String?
                                             }?,
                                             m2_non_managed_application: {
                                               vpc_endpoint_service_name: ::String,
                                               listener_port: ::String,
                                               runtime: ("BluAge"),
                                               web_app_name: ::String?
                                             }?
                                           }
                                         },
                                       ],
                                       ?properties: Hash[::String, ::String],
                                       ?service_settings: {
                                         kms_key_id: ::String?
                                       }
                                     ) -> _UpdateTestConfigurationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateTestConfigurationResponseSuccess

      interface _UpdateTestSuiteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateTestSuiteResponse]
        def test_suite_id: () -> ::String
        def test_suite_version: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AppTest/Client.html#update_test_suite-instance_method
      def update_test_suite: (
                               test_suite_id: ::String,
                               ?description: ::String,
                               ?before_steps: Array[
                                 {
                                   name: ::String,
                                   description: ::String?,
                                   action: {
                                     resource_action: {
                                       m2_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure"),
                                         properties: {
                                           force_stop: bool?,
                                           import_data_set_location: ::String?
                                         }?
                                       }?,
                                       m2_non_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure")
                                       }?,
                                       cloud_formation_action: {
                                         resource: ::String,
                                         action_type: ("Create" | "Delete")?
                                       }?
                                     }?,
                                     mainframe_action: {
                                       resource: ::String,
                                       action_type: {
                                         batch: {
                                           batch_job_name: ::String,
                                           batch_job_parameters: Hash[::String, ::String]?,
                                           export_data_set_names: Array[::String]?
                                         }?,
                                         tn3270: {
                                           script: {
                                             script_location: ::String,
                                             type: ("Selenium")
                                           },
                                           export_data_set_names: Array[::String]?
                                         }?
                                       },
                                       properties: {
                                         dms_task_arn: ::String?
                                       }?
                                     }?,
                                     compare_action: {
                                       input: {
                                         file: {
                                           source_location: ::String,
                                           target_location: ::String,
                                           file_metadata: {
                                             data_sets: Array[
                                               {
                                                 type: ("PS"),
                                                 name: ::String,
                                                 ccsid: ::String,
                                                 format: ("FIXED" | "VARIABLE" | "LINE_SEQUENTIAL"),
                                                 length: ::Integer
                                               },
                                             ]?,
                                             database_cdc: {
                                               source_metadata: {
                                                 type: ("z/OS-DB2"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               },
                                               target_metadata: {
                                                 type: ("PostgreSQL"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               }
                                             }?
                                           }
                                         }?
                                       },
                                       output: {
                                         file: {
                                           file_location: ::String?
                                         }?
                                       }?
                                     }?
                                   }
                                 },
                               ],
                               ?after_steps: Array[
                                 {
                                   name: ::String,
                                   description: ::String?,
                                   action: {
                                     resource_action: {
                                       m2_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure"),
                                         properties: {
                                           force_stop: bool?,
                                           import_data_set_location: ::String?
                                         }?
                                       }?,
                                       m2_non_managed_application_action: {
                                         resource: ::String,
                                         action_type: ("Configure" | "Deconfigure")
                                       }?,
                                       cloud_formation_action: {
                                         resource: ::String,
                                         action_type: ("Create" | "Delete")?
                                       }?
                                     }?,
                                     mainframe_action: {
                                       resource: ::String,
                                       action_type: {
                                         batch: {
                                           batch_job_name: ::String,
                                           batch_job_parameters: Hash[::String, ::String]?,
                                           export_data_set_names: Array[::String]?
                                         }?,
                                         tn3270: {
                                           script: {
                                             script_location: ::String,
                                             type: ("Selenium")
                                           },
                                           export_data_set_names: Array[::String]?
                                         }?
                                       },
                                       properties: {
                                         dms_task_arn: ::String?
                                       }?
                                     }?,
                                     compare_action: {
                                       input: {
                                         file: {
                                           source_location: ::String,
                                           target_location: ::String,
                                           file_metadata: {
                                             data_sets: Array[
                                               {
                                                 type: ("PS"),
                                                 name: ::String,
                                                 ccsid: ::String,
                                                 format: ("FIXED" | "VARIABLE" | "LINE_SEQUENTIAL"),
                                                 length: ::Integer
                                               },
                                             ]?,
                                             database_cdc: {
                                               source_metadata: {
                                                 type: ("z/OS-DB2"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               },
                                               target_metadata: {
                                                 type: ("PostgreSQL"),
                                                 capture_tool: ("Precisely" | "AWS DMS")
                                               }
                                             }?
                                           }
                                         }?
                                       },
                                       output: {
                                         file: {
                                           file_location: ::String?
                                         }?
                                       }?
                                     }?
                                   }
                                 },
                               ],
                               ?test_cases: {
                                 sequential: Array[::String]?
                               }
                             ) -> _UpdateTestSuiteResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateTestSuiteResponseSuccess
    end
  end
end

