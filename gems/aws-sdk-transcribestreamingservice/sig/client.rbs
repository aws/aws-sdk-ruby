# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module TranscribeStreamingService
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TranscribeStreamingService/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?event_stream_handler: Proc,
                      ?ignore_configured_endpoint_urls: bool,
                      ?input_event_stream_handler: Proc,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?output_event_stream_handler: Proc,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _StartCallAnalyticsStreamTranscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartCallAnalyticsStreamTranscriptionResponse]
        def request_id: () -> ::String
        def language_code: () -> ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR")
        def media_sample_rate_hertz: () -> ::Integer
        def media_encoding: () -> ("pcm" | "ogg-opus" | "flac")
        def vocabulary_name: () -> ::String
        def session_id: () -> ::String
        def call_analytics_transcript_result_stream: () -> Types::CallAnalyticsTranscriptResultStream
        def vocabulary_filter_name: () -> ::String
        def vocabulary_filter_method: () -> ("remove" | "mask" | "tag")
        def language_model_name: () -> ::String
        def enable_partial_results_stabilization: () -> bool
        def partial_results_stability: () -> ("high" | "medium" | "low")
        def content_identification_type: () -> ("PII")
        def content_redaction_type: () -> ("PII")
        def pii_entity_types: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TranscribeStreamingService/Client.html#start_call_analytics_stream_transcription-instance_method
      def start_call_analytics_stream_transcription: (
                                                       language_code: ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR"),
                                                       media_sample_rate_hertz: ::Integer,
                                                       media_encoding: ("pcm" | "ogg-opus" | "flac"),
                                                       ?vocabulary_name: ::String,
                                                       ?session_id: ::String,
                                                       input_event_stream_hander: untyped,
                                                       ?vocabulary_filter_name: ::String,
                                                       ?vocabulary_filter_method: ("remove" | "mask" | "tag"),
                                                       ?language_model_name: ::String,
                                                       ?enable_partial_results_stabilization: bool,
                                                       ?partial_results_stability: ("high" | "medium" | "low"),
                                                       ?content_identification_type: ("PII"),
                                                       ?content_redaction_type: ("PII"),
                                                       ?pii_entity_types: ::String
                                                     ) ?{ (*untyped) -> void } -> _StartCallAnalyticsStreamTranscriptionResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _StartCallAnalyticsStreamTranscriptionResponseSuccess

      interface _StartMedicalStreamTranscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartMedicalStreamTranscriptionResponse]
        def request_id: () -> ::String
        def language_code: () -> ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR" | "ja-JP" | "ko-KR" | "zh-CN" | "hi-IN" | "th-TH")
        def media_sample_rate_hertz: () -> ::Integer
        def media_encoding: () -> ("pcm" | "ogg-opus" | "flac")
        def vocabulary_name: () -> ::String
        def specialty: () -> ("PRIMARYCARE" | "CARDIOLOGY" | "NEUROLOGY" | "ONCOLOGY" | "RADIOLOGY" | "UROLOGY")
        def type: () -> ("CONVERSATION" | "DICTATION")
        def show_speaker_label: () -> bool
        def session_id: () -> ::String
        def transcript_result_stream: () -> Types::MedicalTranscriptResultStream
        def enable_channel_identification: () -> bool
        def number_of_channels: () -> ::Integer
        def content_identification_type: () -> ("PHI")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TranscribeStreamingService/Client.html#start_medical_stream_transcription-instance_method
      def start_medical_stream_transcription: (
                                                language_code: ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR" | "ja-JP" | "ko-KR" | "zh-CN" | "hi-IN" | "th-TH"),
                                                media_sample_rate_hertz: ::Integer,
                                                media_encoding: ("pcm" | "ogg-opus" | "flac"),
                                                ?vocabulary_name: ::String,
                                                specialty: ("PRIMARYCARE" | "CARDIOLOGY" | "NEUROLOGY" | "ONCOLOGY" | "RADIOLOGY" | "UROLOGY"),
                                                type: ("CONVERSATION" | "DICTATION"),
                                                ?show_speaker_label: bool,
                                                ?session_id: ::String,
                                                input_event_stream_hander: untyped,
                                                ?enable_channel_identification: bool,
                                                ?number_of_channels: ::Integer,
                                                ?content_identification_type: ("PHI")
                                              ) ?{ (*untyped) -> void } -> _StartMedicalStreamTranscriptionResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _StartMedicalStreamTranscriptionResponseSuccess

      interface _StartStreamTranscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartStreamTranscriptionResponse]
        def request_id: () -> ::String
        def language_code: () -> ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR" | "ja-JP" | "ko-KR" | "zh-CN" | "hi-IN" | "th-TH")
        def media_sample_rate_hertz: () -> ::Integer
        def media_encoding: () -> ("pcm" | "ogg-opus" | "flac")
        def vocabulary_name: () -> ::String
        def session_id: () -> ::String
        def transcript_result_stream: () -> Types::TranscriptResultStream
        def vocabulary_filter_name: () -> ::String
        def vocabulary_filter_method: () -> ("remove" | "mask" | "tag")
        def show_speaker_label: () -> bool
        def enable_channel_identification: () -> bool
        def number_of_channels: () -> ::Integer
        def enable_partial_results_stabilization: () -> bool
        def partial_results_stability: () -> ("high" | "medium" | "low")
        def content_identification_type: () -> ("PII")
        def content_redaction_type: () -> ("PII")
        def pii_entity_types: () -> ::String
        def language_model_name: () -> ::String
        def identify_language: () -> bool
        def language_options: () -> ::String
        def preferred_language: () -> ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR" | "ja-JP" | "ko-KR" | "zh-CN" | "hi-IN" | "th-TH")
        def identify_multiple_languages: () -> bool
        def vocabulary_names: () -> ::String
        def vocabulary_filter_names: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TranscribeStreamingService/Client.html#start_stream_transcription-instance_method
      def start_stream_transcription: (
                                        ?language_code: ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR" | "ja-JP" | "ko-KR" | "zh-CN" | "hi-IN" | "th-TH"),
                                        media_sample_rate_hertz: ::Integer,
                                        media_encoding: ("pcm" | "ogg-opus" | "flac"),
                                        ?vocabulary_name: ::String,
                                        ?session_id: ::String,
                                        input_event_stream_hander: untyped,
                                        ?vocabulary_filter_name: ::String,
                                        ?vocabulary_filter_method: ("remove" | "mask" | "tag"),
                                        ?show_speaker_label: bool,
                                        ?enable_channel_identification: bool,
                                        ?number_of_channels: ::Integer,
                                        ?enable_partial_results_stabilization: bool,
                                        ?partial_results_stability: ("high" | "medium" | "low"),
                                        ?content_identification_type: ("PII"),
                                        ?content_redaction_type: ("PII"),
                                        ?pii_entity_types: ::String,
                                        ?language_model_name: ::String,
                                        ?identify_language: bool,
                                        ?language_options: ::String,
                                        ?preferred_language: ("en-US" | "en-GB" | "es-US" | "fr-CA" | "fr-FR" | "en-AU" | "it-IT" | "de-DE" | "pt-BR" | "ja-JP" | "ko-KR" | "zh-CN" | "hi-IN" | "th-TH"),
                                        ?identify_multiple_languages: bool,
                                        ?vocabulary_names: ::String,
                                        ?vocabulary_filter_names: ::String
                                      ) ?{ (*untyped) -> void } -> _StartStreamTranscriptionResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _StartStreamTranscriptionResponseSuccess
    end
  end
end

