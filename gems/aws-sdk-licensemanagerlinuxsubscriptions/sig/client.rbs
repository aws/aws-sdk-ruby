# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module LicenseManagerLinuxSubscriptions
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _DeregisterSubscriptionProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterSubscriptionProviderResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#deregister_subscription_provider-instance_method
      def deregister_subscription_provider: (
                                              subscription_provider_arn: ::String
                                            ) -> _DeregisterSubscriptionProviderResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterSubscriptionProviderResponseSuccess

      interface _GetRegisteredSubscriptionProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetRegisteredSubscriptionProviderResponse]
        def last_successful_data_retrieval_time: () -> ::String
        def secret_arn: () -> ::String
        def subscription_provider_arn: () -> ::String
        def subscription_provider_source: () -> ("RedHat")
        def subscription_provider_status: () -> ("ACTIVE" | "INVALID" | "PENDING")
        def subscription_provider_status_message: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#get_registered_subscription_provider-instance_method
      def get_registered_subscription_provider: (
                                                  subscription_provider_arn: ::String
                                                ) -> _GetRegisteredSubscriptionProviderResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetRegisteredSubscriptionProviderResponseSuccess

      interface _GetServiceSettingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetServiceSettingsResponse]
        def home_regions: () -> ::Array[::String]
        def linux_subscriptions_discovery: () -> ("Enabled" | "Disabled")
        def linux_subscriptions_discovery_settings: () -> Types::LinuxSubscriptionsDiscoverySettings
        def status: () -> ("InProgress" | "Completed" | "Successful" | "Failed")
        def status_message: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#get_service_settings-instance_method
      def get_service_settings: (
                                ) -> _GetServiceSettingsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetServiceSettingsResponseSuccess

      interface _ListLinuxSubscriptionInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListLinuxSubscriptionInstancesResponse]
        def instances: () -> ::Array[Types::Instance]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#list_linux_subscription_instances-instance_method
      def list_linux_subscription_instances: (
                                               ?filters: Array[
                                                 {
                                                   name: ::String?,
                                                   operator: ("Equal" | "NotEqual" | "Contains")?,
                                                   values: Array[::String]?
                                                 },
                                               ],
                                               ?max_results: ::Integer,
                                               ?next_token: ::String
                                             ) -> _ListLinuxSubscriptionInstancesResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListLinuxSubscriptionInstancesResponseSuccess

      interface _ListLinuxSubscriptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListLinuxSubscriptionsResponse]
        def next_token: () -> ::String
        def subscriptions: () -> ::Array[Types::Subscription]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#list_linux_subscriptions-instance_method
      def list_linux_subscriptions: (
                                      ?filters: Array[
                                        {
                                          name: ::String?,
                                          operator: ("Equal" | "NotEqual" | "Contains")?,
                                          values: Array[::String]?
                                        },
                                      ],
                                      ?max_results: ::Integer,
                                      ?next_token: ::String
                                    ) -> _ListLinuxSubscriptionsResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListLinuxSubscriptionsResponseSuccess

      interface _ListRegisteredSubscriptionProvidersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListRegisteredSubscriptionProvidersResponse]
        def next_token: () -> ::String
        def registered_subscription_providers: () -> ::Array[Types::RegisteredSubscriptionProvider]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#list_registered_subscription_providers-instance_method
      def list_registered_subscription_providers: (
                                                    ?max_results: ::Integer,
                                                    ?next_token: ::String,
                                                    ?subscription_provider_sources: Array[("RedHat")]
                                                  ) -> _ListRegisteredSubscriptionProvidersResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListRegisteredSubscriptionProvidersResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _RegisterSubscriptionProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterSubscriptionProviderResponse]
        def subscription_provider_arn: () -> ::String
        def subscription_provider_source: () -> ("RedHat")
        def subscription_provider_status: () -> ("ACTIVE" | "INVALID" | "PENDING")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#register_subscription_provider-instance_method
      def register_subscription_provider: (
                                            secret_arn: ::String,
                                            subscription_provider_source: ("RedHat"),
                                            ?tags: Hash[::String, ::String]
                                          ) -> _RegisterSubscriptionProviderResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterSubscriptionProviderResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateServiceSettingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateServiceSettingsResponse]
        def home_regions: () -> ::Array[::String]
        def linux_subscriptions_discovery: () -> ("Enabled" | "Disabled")
        def linux_subscriptions_discovery_settings: () -> Types::LinuxSubscriptionsDiscoverySettings
        def status: () -> ("InProgress" | "Completed" | "Successful" | "Failed")
        def status_message: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerLinuxSubscriptions/Client.html#update_service_settings-instance_method
      def update_service_settings: (
                                     ?allow_update: bool,
                                     linux_subscriptions_discovery: ("Enabled" | "Disabled"),
                                     linux_subscriptions_discovery_settings: {
                                       organization_integration: ("Enabled" | "Disabled"),
                                       source_regions: Array[::String]
                                     }
                                   ) -> _UpdateServiceSettingsResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateServiceSettingsResponseSuccess
    end
  end
end

