# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module ConfigService
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?simple_json: bool,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _BatchGetAggregateResourceConfigResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchGetAggregateResourceConfigResponse]
        def base_configuration_items: () -> ::Array[Types::BaseConfigurationItem]
        def unprocessed_resource_identifiers: () -> ::Array[Types::AggregateResourceIdentifier]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#batch_get_aggregate_resource_config-instance_method
      def batch_get_aggregate_resource_config: (
                                                 configuration_aggregator_name: ::String,
                                                 resource_identifiers: Array[
                                                   {
                                                     source_account_id: ::String,
                                                     source_region: ::String,
                                                     resource_id: ::String,
                                                     resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                                     resource_name: ::String?
                                                   },
                                                 ]
                                               ) -> _BatchGetAggregateResourceConfigResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchGetAggregateResourceConfigResponseSuccess

      interface _BatchGetResourceConfigResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchGetResourceConfigResponse]
        def base_configuration_items: () -> ::Array[Types::BaseConfigurationItem]
        def unprocessed_resource_keys: () -> ::Array[Types::ResourceKey]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#batch_get_resource_config-instance_method
      def batch_get_resource_config: (
                                       resource_keys: Array[
                                         {
                                           resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                           resource_id: ::String
                                         },
                                       ]
                                     ) -> _BatchGetResourceConfigResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchGetResourceConfigResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_aggregation_authorization-instance_method
      def delete_aggregation_authorization: (
                                              authorized_account_id: ::String,
                                              authorized_aws_region: ::String
                                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_config_rule-instance_method
      def delete_config_rule: (
                                config_rule_name: ::String
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_configuration_aggregator-instance_method
      def delete_configuration_aggregator: (
                                             configuration_aggregator_name: ::String
                                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_configuration_recorder-instance_method
      def delete_configuration_recorder: (
                                           configuration_recorder_name: ::String
                                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_conformance_pack-instance_method
      def delete_conformance_pack: (
                                     conformance_pack_name: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_delivery_channel-instance_method
      def delete_delivery_channel: (
                                     delivery_channel_name: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteEvaluationResultsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEvaluationResultsResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_evaluation_results-instance_method
      def delete_evaluation_results: (
                                       config_rule_name: ::String
                                     ) -> _DeleteEvaluationResultsResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEvaluationResultsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_organization_config_rule-instance_method
      def delete_organization_config_rule: (
                                             organization_config_rule_name: ::String
                                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_organization_conformance_pack-instance_method
      def delete_organization_conformance_pack: (
                                                  organization_conformance_pack_name: ::String
                                                ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_pending_aggregation_request-instance_method
      def delete_pending_aggregation_request: (
                                                requester_account_id: ::String,
                                                requester_aws_region: ::String
                                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteRemediationConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteRemediationConfigurationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_remediation_configuration-instance_method
      def delete_remediation_configuration: (
                                              config_rule_name: ::String,
                                              ?resource_type: ::String
                                            ) -> _DeleteRemediationConfigurationResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteRemediationConfigurationResponseSuccess

      interface _DeleteRemediationExceptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteRemediationExceptionsResponse]
        def failed_batches: () -> ::Array[Types::FailedDeleteRemediationExceptionsBatch]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_remediation_exceptions-instance_method
      def delete_remediation_exceptions: (
                                           config_rule_name: ::String,
                                           resource_keys: Array[
                                             {
                                               resource_type: ::String?,
                                               resource_id: ::String?
                                             },
                                           ]
                                         ) -> _DeleteRemediationExceptionsResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteRemediationExceptionsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_resource_config-instance_method
      def delete_resource_config: (
                                    resource_type: ::String,
                                    resource_id: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_retention_configuration-instance_method
      def delete_retention_configuration: (
                                            retention_configuration_name: ::String
                                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteStoredQueryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteStoredQueryResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#delete_stored_query-instance_method
      def delete_stored_query: (
                                 query_name: ::String
                               ) -> _DeleteStoredQueryResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteStoredQueryResponseSuccess

      interface _DeliverConfigSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeliverConfigSnapshotResponse]
        def config_snapshot_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#deliver_config_snapshot-instance_method
      def deliver_config_snapshot: (
                                     delivery_channel_name: ::String
                                   ) -> _DeliverConfigSnapshotResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeliverConfigSnapshotResponseSuccess

      interface _DescribeAggregateComplianceByConfigRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAggregateComplianceByConfigRulesResponse]
        def aggregate_compliance_by_config_rules: () -> ::Array[Types::AggregateComplianceByConfigRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_aggregate_compliance_by_config_rules-instance_method
      def describe_aggregate_compliance_by_config_rules: (
                                                           configuration_aggregator_name: ::String,
                                                           ?filters: {
                                                             config_rule_name: ::String?,
                                                             compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA")?,
                                                             account_id: ::String?,
                                                             aws_region: ::String?
                                                           },
                                                           ?limit: ::Integer,
                                                           ?next_token: ::String
                                                         ) -> _DescribeAggregateComplianceByConfigRulesResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAggregateComplianceByConfigRulesResponseSuccess

      interface _DescribeAggregateComplianceByConformancePacksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAggregateComplianceByConformancePacksResponse]
        def aggregate_compliance_by_conformance_packs: () -> ::Array[Types::AggregateComplianceByConformancePack]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_aggregate_compliance_by_conformance_packs-instance_method
      def describe_aggregate_compliance_by_conformance_packs: (
                                                                configuration_aggregator_name: ::String,
                                                                ?filters: {
                                                                  conformance_pack_name: ::String?,
                                                                  compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "INSUFFICIENT_DATA")?,
                                                                  account_id: ::String?,
                                                                  aws_region: ::String?
                                                                },
                                                                ?limit: ::Integer,
                                                                ?next_token: ::String
                                                              ) -> _DescribeAggregateComplianceByConformancePacksResponseSuccess
                                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAggregateComplianceByConformancePacksResponseSuccess

      interface _DescribeAggregationAuthorizationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAggregationAuthorizationsResponse]
        def aggregation_authorizations: () -> ::Array[Types::AggregationAuthorization]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_aggregation_authorizations-instance_method
      def describe_aggregation_authorizations: (
                                                 ?limit: ::Integer,
                                                 ?next_token: ::String
                                               ) -> _DescribeAggregationAuthorizationsResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAggregationAuthorizationsResponseSuccess

      interface _DescribeComplianceByConfigRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeComplianceByConfigRuleResponse]
        def compliance_by_config_rules: () -> ::Array[Types::ComplianceByConfigRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_compliance_by_config_rule-instance_method
      def describe_compliance_by_config_rule: (
                                                ?config_rule_names: Array[::String],
                                                ?compliance_types: Array[("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA")],
                                                ?next_token: ::String
                                              ) -> _DescribeComplianceByConfigRuleResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeComplianceByConfigRuleResponseSuccess

      interface _DescribeComplianceByResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeComplianceByResourceResponse]
        def compliance_by_resources: () -> ::Array[Types::ComplianceByResource]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_compliance_by_resource-instance_method
      def describe_compliance_by_resource: (
                                             ?resource_type: ::String,
                                             ?resource_id: ::String,
                                             ?compliance_types: Array[("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA")],
                                             ?limit: ::Integer,
                                             ?next_token: ::String
                                           ) -> _DescribeComplianceByResourceResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeComplianceByResourceResponseSuccess

      interface _DescribeConfigRuleEvaluationStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConfigRuleEvaluationStatusResponse]
        def config_rules_evaluation_status: () -> ::Array[Types::ConfigRuleEvaluationStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_config_rule_evaluation_status-instance_method
      def describe_config_rule_evaluation_status: (
                                                    ?config_rule_names: Array[::String],
                                                    ?next_token: ::String,
                                                    ?limit: ::Integer
                                                  ) -> _DescribeConfigRuleEvaluationStatusResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConfigRuleEvaluationStatusResponseSuccess

      interface _DescribeConfigRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConfigRulesResponse]
        def config_rules: () -> ::Array[Types::ConfigRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_config_rules-instance_method
      def describe_config_rules: (
                                   ?config_rule_names: Array[::String],
                                   ?next_token: ::String,
                                   ?filters: {
                                     evaluation_mode: ("DETECTIVE" | "PROACTIVE")?
                                   }
                                 ) -> _DescribeConfigRulesResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConfigRulesResponseSuccess

      interface _DescribeConfigurationAggregatorSourcesStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConfigurationAggregatorSourcesStatusResponse]
        def aggregated_source_status_list: () -> ::Array[Types::AggregatedSourceStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_configuration_aggregator_sources_status-instance_method
      def describe_configuration_aggregator_sources_status: (
                                                              configuration_aggregator_name: ::String,
                                                              ?update_status: Array[("FAILED" | "SUCCEEDED" | "OUTDATED")],
                                                              ?next_token: ::String,
                                                              ?limit: ::Integer
                                                            ) -> _DescribeConfigurationAggregatorSourcesStatusResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConfigurationAggregatorSourcesStatusResponseSuccess

      interface _DescribeConfigurationAggregatorsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConfigurationAggregatorsResponse]
        def configuration_aggregators: () -> ::Array[Types::ConfigurationAggregator]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_configuration_aggregators-instance_method
      def describe_configuration_aggregators: (
                                                ?configuration_aggregator_names: Array[::String],
                                                ?next_token: ::String,
                                                ?limit: ::Integer
                                              ) -> _DescribeConfigurationAggregatorsResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConfigurationAggregatorsResponseSuccess

      interface _DescribeConfigurationRecorderStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConfigurationRecorderStatusResponse]
        def configuration_recorders_status: () -> ::Array[Types::ConfigurationRecorderStatus]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_configuration_recorder_status-instance_method
      def describe_configuration_recorder_status: (
                                                    ?configuration_recorder_names: Array[::String]
                                                  ) -> _DescribeConfigurationRecorderStatusResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConfigurationRecorderStatusResponseSuccess

      interface _DescribeConfigurationRecordersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConfigurationRecordersResponse]
        def configuration_recorders: () -> ::Array[Types::ConfigurationRecorder]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_configuration_recorders-instance_method
      def describe_configuration_recorders: (
                                              ?configuration_recorder_names: Array[::String]
                                            ) -> _DescribeConfigurationRecordersResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConfigurationRecordersResponseSuccess

      interface _DescribeConformancePackComplianceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConformancePackComplianceResponse]
        def conformance_pack_name: () -> ::String
        def conformance_pack_rule_compliance_list: () -> ::Array[Types::ConformancePackRuleCompliance]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_conformance_pack_compliance-instance_method
      def describe_conformance_pack_compliance: (
                                                  conformance_pack_name: ::String,
                                                  ?filters: {
                                                    config_rule_names: Array[::String]?,
                                                    compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "INSUFFICIENT_DATA")?
                                                  },
                                                  ?limit: ::Integer,
                                                  ?next_token: ::String
                                                ) -> _DescribeConformancePackComplianceResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConformancePackComplianceResponseSuccess

      interface _DescribeConformancePackStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConformancePackStatusResponse]
        def conformance_pack_status_details: () -> ::Array[Types::ConformancePackStatusDetail]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_conformance_pack_status-instance_method
      def describe_conformance_pack_status: (
                                              ?conformance_pack_names: Array[::String],
                                              ?limit: ::Integer,
                                              ?next_token: ::String
                                            ) -> _DescribeConformancePackStatusResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConformancePackStatusResponseSuccess

      interface _DescribeConformancePacksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConformancePacksResponse]
        def conformance_pack_details: () -> ::Array[Types::ConformancePackDetail]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_conformance_packs-instance_method
      def describe_conformance_packs: (
                                        ?conformance_pack_names: Array[::String],
                                        ?limit: ::Integer,
                                        ?next_token: ::String
                                      ) -> _DescribeConformancePacksResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConformancePacksResponseSuccess

      interface _DescribeDeliveryChannelStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDeliveryChannelStatusResponse]
        def delivery_channels_status: () -> ::Array[Types::DeliveryChannelStatus]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_delivery_channel_status-instance_method
      def describe_delivery_channel_status: (
                                              ?delivery_channel_names: Array[::String]
                                            ) -> _DescribeDeliveryChannelStatusResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDeliveryChannelStatusResponseSuccess

      interface _DescribeDeliveryChannelsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDeliveryChannelsResponse]
        def delivery_channels: () -> ::Array[Types::DeliveryChannel]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_delivery_channels-instance_method
      def describe_delivery_channels: (
                                        ?delivery_channel_names: Array[::String]
                                      ) -> _DescribeDeliveryChannelsResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDeliveryChannelsResponseSuccess

      interface _DescribeOrganizationConfigRuleStatusesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeOrganizationConfigRuleStatusesResponse]
        def organization_config_rule_statuses: () -> ::Array[Types::OrganizationConfigRuleStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_organization_config_rule_statuses-instance_method
      def describe_organization_config_rule_statuses: (
                                                        ?organization_config_rule_names: Array[::String],
                                                        ?limit: ::Integer,
                                                        ?next_token: ::String
                                                      ) -> _DescribeOrganizationConfigRuleStatusesResponseSuccess
                                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOrganizationConfigRuleStatusesResponseSuccess

      interface _DescribeOrganizationConfigRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeOrganizationConfigRulesResponse]
        def organization_config_rules: () -> ::Array[Types::OrganizationConfigRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_organization_config_rules-instance_method
      def describe_organization_config_rules: (
                                                ?organization_config_rule_names: Array[::String],
                                                ?limit: ::Integer,
                                                ?next_token: ::String
                                              ) -> _DescribeOrganizationConfigRulesResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOrganizationConfigRulesResponseSuccess

      interface _DescribeOrganizationConformancePackStatusesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeOrganizationConformancePackStatusesResponse]
        def organization_conformance_pack_statuses: () -> ::Array[Types::OrganizationConformancePackStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_organization_conformance_pack_statuses-instance_method
      def describe_organization_conformance_pack_statuses: (
                                                             ?organization_conformance_pack_names: Array[::String],
                                                             ?limit: ::Integer,
                                                             ?next_token: ::String
                                                           ) -> _DescribeOrganizationConformancePackStatusesResponseSuccess
                                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOrganizationConformancePackStatusesResponseSuccess

      interface _DescribeOrganizationConformancePacksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeOrganizationConformancePacksResponse]
        def organization_conformance_packs: () -> ::Array[Types::OrganizationConformancePack]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_organization_conformance_packs-instance_method
      def describe_organization_conformance_packs: (
                                                     ?organization_conformance_pack_names: Array[::String],
                                                     ?limit: ::Integer,
                                                     ?next_token: ::String
                                                   ) -> _DescribeOrganizationConformancePacksResponseSuccess
                                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOrganizationConformancePacksResponseSuccess

      interface _DescribePendingAggregationRequestsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribePendingAggregationRequestsResponse]
        def pending_aggregation_requests: () -> ::Array[Types::PendingAggregationRequest]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_pending_aggregation_requests-instance_method
      def describe_pending_aggregation_requests: (
                                                   ?limit: ::Integer,
                                                   ?next_token: ::String
                                                 ) -> _DescribePendingAggregationRequestsResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePendingAggregationRequestsResponseSuccess

      interface _DescribeRemediationConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRemediationConfigurationsResponse]
        def remediation_configurations: () -> ::Array[Types::RemediationConfiguration]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_remediation_configurations-instance_method
      def describe_remediation_configurations: (
                                                 config_rule_names: Array[::String]
                                               ) -> _DescribeRemediationConfigurationsResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRemediationConfigurationsResponseSuccess

      interface _DescribeRemediationExceptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRemediationExceptionsResponse]
        def remediation_exceptions: () -> ::Array[Types::RemediationException]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_remediation_exceptions-instance_method
      def describe_remediation_exceptions: (
                                             config_rule_name: ::String,
                                             ?resource_keys: Array[
                                               {
                                                 resource_type: ::String?,
                                                 resource_id: ::String?
                                               },
                                             ],
                                             ?limit: ::Integer,
                                             ?next_token: ::String
                                           ) -> _DescribeRemediationExceptionsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRemediationExceptionsResponseSuccess

      interface _DescribeRemediationExecutionStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRemediationExecutionStatusResponse]
        def remediation_execution_statuses: () -> ::Array[Types::RemediationExecutionStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_remediation_execution_status-instance_method
      def describe_remediation_execution_status: (
                                                   config_rule_name: ::String,
                                                   ?resource_keys: Array[
                                                     {
                                                       resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                                       resource_id: ::String
                                                     },
                                                   ],
                                                   ?limit: ::Integer,
                                                   ?next_token: ::String
                                                 ) -> _DescribeRemediationExecutionStatusResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRemediationExecutionStatusResponseSuccess

      interface _DescribeRetentionConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRetentionConfigurationsResponse]
        def retention_configurations: () -> ::Array[Types::RetentionConfiguration]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#describe_retention_configurations-instance_method
      def describe_retention_configurations: (
                                               ?retention_configuration_names: Array[::String],
                                               ?next_token: ::String
                                             ) -> _DescribeRetentionConfigurationsResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRetentionConfigurationsResponseSuccess

      interface _GetAggregateComplianceDetailsByConfigRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAggregateComplianceDetailsByConfigRuleResponse]
        def aggregate_evaluation_results: () -> ::Array[Types::AggregateEvaluationResult]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_aggregate_compliance_details_by_config_rule-instance_method
      def get_aggregate_compliance_details_by_config_rule: (
                                                             configuration_aggregator_name: ::String,
                                                             config_rule_name: ::String,
                                                             account_id: ::String,
                                                             aws_region: ::String,
                                                             ?compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA"),
                                                             ?limit: ::Integer,
                                                             ?next_token: ::String
                                                           ) -> _GetAggregateComplianceDetailsByConfigRuleResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAggregateComplianceDetailsByConfigRuleResponseSuccess

      interface _GetAggregateConfigRuleComplianceSummaryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAggregateConfigRuleComplianceSummaryResponse]
        def group_by_key: () -> ::String
        def aggregate_compliance_counts: () -> ::Array[Types::AggregateComplianceCount]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_aggregate_config_rule_compliance_summary-instance_method
      def get_aggregate_config_rule_compliance_summary: (
                                                          configuration_aggregator_name: ::String,
                                                          ?filters: {
                                                            account_id: ::String?,
                                                            aws_region: ::String?
                                                          },
                                                          ?group_by_key: ("ACCOUNT_ID" | "AWS_REGION"),
                                                          ?limit: ::Integer,
                                                          ?next_token: ::String
                                                        ) -> _GetAggregateConfigRuleComplianceSummaryResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAggregateConfigRuleComplianceSummaryResponseSuccess

      interface _GetAggregateConformancePackComplianceSummaryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAggregateConformancePackComplianceSummaryResponse]
        def aggregate_conformance_pack_compliance_summaries: () -> ::Array[Types::AggregateConformancePackComplianceSummary]
        def group_by_key: () -> ::String
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_aggregate_conformance_pack_compliance_summary-instance_method
      def get_aggregate_conformance_pack_compliance_summary: (
                                                               configuration_aggregator_name: ::String,
                                                               ?filters: {
                                                                 account_id: ::String?,
                                                                 aws_region: ::String?
                                                               },
                                                               ?group_by_key: ("ACCOUNT_ID" | "AWS_REGION"),
                                                               ?limit: ::Integer,
                                                               ?next_token: ::String
                                                             ) -> _GetAggregateConformancePackComplianceSummaryResponseSuccess
                                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAggregateConformancePackComplianceSummaryResponseSuccess

      interface _GetAggregateDiscoveredResourceCountsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAggregateDiscoveredResourceCountsResponse]
        def total_discovered_resources: () -> ::Integer
        def group_by_key: () -> ::String
        def grouped_resource_counts: () -> ::Array[Types::GroupedResourceCount]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_aggregate_discovered_resource_counts-instance_method
      def get_aggregate_discovered_resource_counts: (
                                                      configuration_aggregator_name: ::String,
                                                      ?filters: {
                                                        resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document")?,
                                                        account_id: ::String?,
                                                        region: ::String?
                                                      },
                                                      ?group_by_key: ("RESOURCE_TYPE" | "ACCOUNT_ID" | "AWS_REGION"),
                                                      ?limit: ::Integer,
                                                      ?next_token: ::String
                                                    ) -> _GetAggregateDiscoveredResourceCountsResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAggregateDiscoveredResourceCountsResponseSuccess

      interface _GetAggregateResourceConfigResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAggregateResourceConfigResponse]
        def configuration_item: () -> Types::ConfigurationItem
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_aggregate_resource_config-instance_method
      def get_aggregate_resource_config: (
                                           configuration_aggregator_name: ::String,
                                           resource_identifier: {
                                             source_account_id: ::String,
                                             source_region: ::String,
                                             resource_id: ::String,
                                             resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                             resource_name: ::String?
                                           }
                                         ) -> _GetAggregateResourceConfigResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAggregateResourceConfigResponseSuccess

      interface _GetComplianceDetailsByConfigRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetComplianceDetailsByConfigRuleResponse]
        def evaluation_results: () -> ::Array[Types::EvaluationResult]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_compliance_details_by_config_rule-instance_method
      def get_compliance_details_by_config_rule: (
                                                   config_rule_name: ::String,
                                                   ?compliance_types: Array[("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA")],
                                                   ?limit: ::Integer,
                                                   ?next_token: ::String
                                                 ) -> _GetComplianceDetailsByConfigRuleResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetComplianceDetailsByConfigRuleResponseSuccess

      interface _GetComplianceDetailsByResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetComplianceDetailsByResourceResponse]
        def evaluation_results: () -> ::Array[Types::EvaluationResult]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_compliance_details_by_resource-instance_method
      def get_compliance_details_by_resource: (
                                                ?resource_type: ::String,
                                                ?resource_id: ::String,
                                                ?compliance_types: Array[("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA")],
                                                ?next_token: ::String,
                                                ?resource_evaluation_id: ::String
                                              ) -> _GetComplianceDetailsByResourceResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetComplianceDetailsByResourceResponseSuccess

      interface _GetComplianceSummaryByConfigRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetComplianceSummaryByConfigRuleResponse]
        def compliance_summary: () -> Types::ComplianceSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_compliance_summary_by_config_rule-instance_method
      def get_compliance_summary_by_config_rule: () -> _GetComplianceSummaryByConfigRuleResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetComplianceSummaryByConfigRuleResponseSuccess

      interface _GetComplianceSummaryByResourceTypeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetComplianceSummaryByResourceTypeResponse]
        def compliance_summaries_by_resource_type: () -> ::Array[Types::ComplianceSummaryByResourceType]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_compliance_summary_by_resource_type-instance_method
      def get_compliance_summary_by_resource_type: (
                                                     ?resource_types: Array[::String]
                                                   ) -> _GetComplianceSummaryByResourceTypeResponseSuccess
                                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetComplianceSummaryByResourceTypeResponseSuccess

      interface _GetConformancePackComplianceDetailsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetConformancePackComplianceDetailsResponse]
        def conformance_pack_name: () -> ::String
        def conformance_pack_rule_evaluation_results: () -> ::Array[Types::ConformancePackEvaluationResult]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_conformance_pack_compliance_details-instance_method
      def get_conformance_pack_compliance_details: (
                                                     conformance_pack_name: ::String,
                                                     ?filters: {
                                                       config_rule_names: Array[::String]?,
                                                       compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "INSUFFICIENT_DATA")?,
                                                       resource_type: ::String?,
                                                       resource_ids: Array[::String]?
                                                     },
                                                     ?limit: ::Integer,
                                                     ?next_token: ::String
                                                   ) -> _GetConformancePackComplianceDetailsResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetConformancePackComplianceDetailsResponseSuccess

      interface _GetConformancePackComplianceSummaryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetConformancePackComplianceSummaryResponse]
        def conformance_pack_compliance_summary_list: () -> ::Array[Types::ConformancePackComplianceSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_conformance_pack_compliance_summary-instance_method
      def get_conformance_pack_compliance_summary: (
                                                     conformance_pack_names: Array[::String],
                                                     ?limit: ::Integer,
                                                     ?next_token: ::String
                                                   ) -> _GetConformancePackComplianceSummaryResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetConformancePackComplianceSummaryResponseSuccess

      interface _GetCustomRulePolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCustomRulePolicyResponse]
        def policy_text: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_custom_rule_policy-instance_method
      def get_custom_rule_policy: (
                                    ?config_rule_name: ::String
                                  ) -> _GetCustomRulePolicyResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCustomRulePolicyResponseSuccess

      interface _GetDiscoveredResourceCountsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetDiscoveredResourceCountsResponse]
        def total_discovered_resources: () -> ::Integer
        def resource_counts: () -> ::Array[Types::ResourceCount]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_discovered_resource_counts-instance_method
      def get_discovered_resource_counts: (
                                            ?resource_types: Array[::String],
                                            ?limit: ::Integer,
                                            ?next_token: ::String
                                          ) -> _GetDiscoveredResourceCountsResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetDiscoveredResourceCountsResponseSuccess

      interface _GetOrganizationConfigRuleDetailedStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetOrganizationConfigRuleDetailedStatusResponse]
        def organization_config_rule_detailed_status: () -> ::Array[Types::MemberAccountStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_organization_config_rule_detailed_status-instance_method
      def get_organization_config_rule_detailed_status: (
                                                          organization_config_rule_name: ::String,
                                                          ?filters: {
                                                            account_id: ::String?,
                                                            member_account_rule_status: ("CREATE_SUCCESSFUL" | "CREATE_IN_PROGRESS" | "CREATE_FAILED" | "DELETE_SUCCESSFUL" | "DELETE_FAILED" | "DELETE_IN_PROGRESS" | "UPDATE_SUCCESSFUL" | "UPDATE_IN_PROGRESS" | "UPDATE_FAILED")?
                                                          },
                                                          ?limit: ::Integer,
                                                          ?next_token: ::String
                                                        ) -> _GetOrganizationConfigRuleDetailedStatusResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetOrganizationConfigRuleDetailedStatusResponseSuccess

      interface _GetOrganizationConformancePackDetailedStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetOrganizationConformancePackDetailedStatusResponse]
        def organization_conformance_pack_detailed_statuses: () -> ::Array[Types::OrganizationConformancePackDetailedStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_organization_conformance_pack_detailed_status-instance_method
      def get_organization_conformance_pack_detailed_status: (
                                                               organization_conformance_pack_name: ::String,
                                                               ?filters: {
                                                                 account_id: ::String?,
                                                                 status: ("CREATE_SUCCESSFUL" | "CREATE_IN_PROGRESS" | "CREATE_FAILED" | "DELETE_SUCCESSFUL" | "DELETE_FAILED" | "DELETE_IN_PROGRESS" | "UPDATE_SUCCESSFUL" | "UPDATE_IN_PROGRESS" | "UPDATE_FAILED")?
                                                               },
                                                               ?limit: ::Integer,
                                                               ?next_token: ::String
                                                             ) -> _GetOrganizationConformancePackDetailedStatusResponseSuccess
                                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetOrganizationConformancePackDetailedStatusResponseSuccess

      interface _GetOrganizationCustomRulePolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetOrganizationCustomRulePolicyResponse]
        def policy_text: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_organization_custom_rule_policy-instance_method
      def get_organization_custom_rule_policy: (
                                                 organization_config_rule_name: ::String
                                               ) -> _GetOrganizationCustomRulePolicyResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetOrganizationCustomRulePolicyResponseSuccess

      interface _GetResourceConfigHistoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetResourceConfigHistoryResponse]
        def configuration_items: () -> ::Array[Types::ConfigurationItem]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_resource_config_history-instance_method
      def get_resource_config_history: (
                                         resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                         resource_id: ::String,
                                         ?later_time: ::Time,
                                         ?earlier_time: ::Time,
                                         ?chronological_order: ("Reverse" | "Forward"),
                                         ?limit: ::Integer,
                                         ?next_token: ::String
                                       ) -> _GetResourceConfigHistoryResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetResourceConfigHistoryResponseSuccess

      interface _GetResourceEvaluationSummaryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetResourceEvaluationSummaryResponse]
        def resource_evaluation_id: () -> ::String
        def evaluation_mode: () -> ("DETECTIVE" | "PROACTIVE")
        def evaluation_status: () -> Types::EvaluationStatus
        def evaluation_start_timestamp: () -> ::Time
        def compliance: () -> ("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA")
        def evaluation_context: () -> Types::EvaluationContext
        def resource_details: () -> Types::ResourceDetails
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_resource_evaluation_summary-instance_method
      def get_resource_evaluation_summary: (
                                             resource_evaluation_id: ::String
                                           ) -> _GetResourceEvaluationSummaryResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetResourceEvaluationSummaryResponseSuccess

      interface _GetStoredQueryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetStoredQueryResponse]
        def stored_query: () -> Types::StoredQuery
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#get_stored_query-instance_method
      def get_stored_query: (
                              query_name: ::String
                            ) -> _GetStoredQueryResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetStoredQueryResponseSuccess

      interface _ListAggregateDiscoveredResourcesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListAggregateDiscoveredResourcesResponse]
        def resource_identifiers: () -> ::Array[Types::AggregateResourceIdentifier]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#list_aggregate_discovered_resources-instance_method
      def list_aggregate_discovered_resources: (
                                                 configuration_aggregator_name: ::String,
                                                 resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                                 ?filters: {
                                                   account_id: ::String?,
                                                   resource_id: ::String?,
                                                   resource_name: ::String?,
                                                   region: ::String?
                                                 },
                                                 ?limit: ::Integer,
                                                 ?next_token: ::String
                                               ) -> _ListAggregateDiscoveredResourcesResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListAggregateDiscoveredResourcesResponseSuccess

      interface _ListConformancePackComplianceScoresResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListConformancePackComplianceScoresResponse]
        def next_token: () -> ::String
        def conformance_pack_compliance_scores: () -> ::Array[Types::ConformancePackComplianceScore]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#list_conformance_pack_compliance_scores-instance_method
      def list_conformance_pack_compliance_scores: (
                                                     ?filters: {
                                                       conformance_pack_names: Array[::String]
                                                     },
                                                     ?sort_order: ("ASCENDING" | "DESCENDING"),
                                                     ?sort_by: ("SCORE"),
                                                     ?limit: ::Integer,
                                                     ?next_token: ::String
                                                   ) -> _ListConformancePackComplianceScoresResponseSuccess
                                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListConformancePackComplianceScoresResponseSuccess

      interface _ListDiscoveredResourcesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDiscoveredResourcesResponse]
        def resource_identifiers: () -> ::Array[Types::ResourceIdentifier]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#list_discovered_resources-instance_method
      def list_discovered_resources: (
                                       resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                       ?resource_ids: Array[::String],
                                       ?resource_name: ::String,
                                       ?limit: ::Integer,
                                       ?include_deleted_resources: bool,
                                       ?next_token: ::String
                                     ) -> _ListDiscoveredResourcesResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDiscoveredResourcesResponseSuccess

      interface _ListResourceEvaluationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListResourceEvaluationsResponse]
        def resource_evaluations: () -> ::Array[Types::ResourceEvaluation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#list_resource_evaluations-instance_method
      def list_resource_evaluations: (
                                       ?filters: {
                                         evaluation_mode: ("DETECTIVE" | "PROACTIVE")?,
                                         time_window: {
                                           start_time: ::Time?,
                                           end_time: ::Time?
                                         }?,
                                         evaluation_context_identifier: ::String?
                                       },
                                       ?limit: ::Integer,
                                       ?next_token: ::String
                                     ) -> _ListResourceEvaluationsResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListResourceEvaluationsResponseSuccess

      interface _ListStoredQueriesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListStoredQueriesResponse]
        def stored_query_metadata: () -> ::Array[Types::StoredQueryMetadata]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#list_stored_queries-instance_method
      def list_stored_queries: (
                                 ?next_token: ::String,
                                 ?max_results: ::Integer
                               ) -> _ListStoredQueriesResponseSuccess
                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListStoredQueriesResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Array[Types::Tag]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String,
                                    ?limit: ::Integer,
                                    ?next_token: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _PutAggregationAuthorizationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutAggregationAuthorizationResponse]
        def aggregation_authorization: () -> Types::AggregationAuthorization
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_aggregation_authorization-instance_method
      def put_aggregation_authorization: (
                                           authorized_account_id: ::String,
                                           authorized_aws_region: ::String,
                                           ?tags: Array[
                                             {
                                               key: ::String?,
                                               value: ::String?
                                             },
                                           ]
                                         ) -> _PutAggregationAuthorizationResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutAggregationAuthorizationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_config_rule-instance_method
      def put_config_rule: (
                             config_rule: {
                               config_rule_name: ::String?,
                               config_rule_arn: ::String?,
                               config_rule_id: ::String?,
                               description: ::String?,
                               scope: {
                                 compliance_resource_types: Array[::String]?,
                                 tag_key: ::String?,
                                 tag_value: ::String?,
                                 compliance_resource_id: ::String?
                               }?,
                               source: {
                                 owner: ("CUSTOM_LAMBDA" | "AWS" | "CUSTOM_POLICY"),
                                 source_identifier: ::String?,
                                 source_details: Array[
                                   {
                                     event_source: ("aws.config")?,
                                     message_type: ("ConfigurationItemChangeNotification" | "ConfigurationSnapshotDeliveryCompleted" | "ScheduledNotification" | "OversizedConfigurationItemChangeNotification")?,
                                     maximum_execution_frequency: ("One_Hour" | "Three_Hours" | "Six_Hours" | "Twelve_Hours" | "TwentyFour_Hours")?
                                   },
                                 ]?,
                                 custom_policy_details: {
                                   policy_runtime: ::String,
                                   policy_text: ::String,
                                   enable_debug_log_delivery: bool?
                                 }?
                               },
                               input_parameters: ::String?,
                               maximum_execution_frequency: ("One_Hour" | "Three_Hours" | "Six_Hours" | "Twelve_Hours" | "TwentyFour_Hours")?,
                               config_rule_state: ("ACTIVE" | "DELETING" | "DELETING_RESULTS" | "EVALUATING")?,
                               created_by: ::String?,
                               evaluation_modes: Array[
                                 {
                                   mode: ("DETECTIVE" | "PROACTIVE")?
                                 },
                               ]?
                             },
                             ?tags: Array[
                               {
                                 key: ::String?,
                                 value: ::String?
                               },
                             ]
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _PutConfigurationAggregatorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutConfigurationAggregatorResponse]
        def configuration_aggregator: () -> Types::ConfigurationAggregator
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_configuration_aggregator-instance_method
      def put_configuration_aggregator: (
                                          configuration_aggregator_name: ::String,
                                          ?account_aggregation_sources: Array[
                                            {
                                              account_ids: Array[::String],
                                              all_aws_regions: bool?,
                                              aws_regions: Array[::String]?
                                            },
                                          ],
                                          ?organization_aggregation_source: {
                                            role_arn: ::String,
                                            aws_regions: Array[::String]?,
                                            all_aws_regions: bool?
                                          },
                                          ?tags: Array[
                                            {
                                              key: ::String?,
                                              value: ::String?
                                            },
                                          ]
                                        ) -> _PutConfigurationAggregatorResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutConfigurationAggregatorResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_configuration_recorder-instance_method
      def put_configuration_recorder: (
                                        configuration_recorder: {
                                          name: ::String?,
                                          role_arn: ::String?,
                                          recording_group: {
                                            all_supported: bool?,
                                            include_global_resource_types: bool?,
                                            resource_types: Array[("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document")]?,
                                            exclusion_by_resource_types: {
                                              resource_types: Array[("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document")]?
                                            }?,
                                            recording_strategy: {
                                              use_only: ("ALL_SUPPORTED_RESOURCE_TYPES" | "INCLUSION_BY_RESOURCE_TYPES" | "EXCLUSION_BY_RESOURCE_TYPES")?
                                            }?
                                          }?,
                                          recording_mode: {
                                            recording_frequency: ("CONTINUOUS" | "DAILY"),
                                            recording_mode_overrides: Array[
                                              {
                                                description: ::String?,
                                                resource_types: Array[("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document")],
                                                recording_frequency: ("CONTINUOUS" | "DAILY")
                                              },
                                            ]?
                                          }?
                                        }
                                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _PutConformancePackResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutConformancePackResponse]
        def conformance_pack_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_conformance_pack-instance_method
      def put_conformance_pack: (
                                  conformance_pack_name: ::String,
                                  ?template_s3_uri: ::String,
                                  ?template_body: ::String,
                                  ?delivery_s3_bucket: ::String,
                                  ?delivery_s3_key_prefix: ::String,
                                  ?conformance_pack_input_parameters: Array[
                                    {
                                      parameter_name: ::String,
                                      parameter_value: ::String
                                    },
                                  ],
                                  ?template_ssm_document_details: {
                                    document_name: ::String,
                                    document_version: ::String?
                                  }
                                ) -> _PutConformancePackResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutConformancePackResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_delivery_channel-instance_method
      def put_delivery_channel: (
                                  delivery_channel: {
                                    name: ::String?,
                                    s3_bucket_name: ::String?,
                                    s3_key_prefix: ::String?,
                                    s3_kms_key_arn: ::String?,
                                    sns_topic_arn: ::String?,
                                    config_snapshot_delivery_properties: {
                                      delivery_frequency: ("One_Hour" | "Three_Hours" | "Six_Hours" | "Twelve_Hours" | "TwentyFour_Hours")?
                                    }?
                                  }
                                ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _PutEvaluationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutEvaluationsResponse]
        def failed_evaluations: () -> ::Array[Types::Evaluation]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_evaluations-instance_method
      def put_evaluations: (
                             ?evaluations: Array[
                               {
                                 compliance_resource_type: ::String,
                                 compliance_resource_id: ::String,
                                 compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA"),
                                 annotation: ::String?,
                                 ordering_timestamp: ::Time
                               },
                             ],
                             result_token: ::String,
                             ?test_mode: bool
                           ) -> _PutEvaluationsResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutEvaluationsResponseSuccess

      interface _PutExternalEvaluationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutExternalEvaluationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_external_evaluation-instance_method
      def put_external_evaluation: (
                                     config_rule_name: ::String,
                                     external_evaluation: {
                                       compliance_resource_type: ::String,
                                       compliance_resource_id: ::String,
                                       compliance_type: ("COMPLIANT" | "NON_COMPLIANT" | "NOT_APPLICABLE" | "INSUFFICIENT_DATA"),
                                       annotation: ::String?,
                                       ordering_timestamp: ::Time
                                     }
                                   ) -> _PutExternalEvaluationResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutExternalEvaluationResponseSuccess

      interface _PutOrganizationConfigRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutOrganizationConfigRuleResponse]
        def organization_config_rule_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_organization_config_rule-instance_method
      def put_organization_config_rule: (
                                          organization_config_rule_name: ::String,
                                          ?organization_managed_rule_metadata: {
                                            description: ::String?,
                                            rule_identifier: ::String,
                                            input_parameters: ::String?,
                                            maximum_execution_frequency: ("One_Hour" | "Three_Hours" | "Six_Hours" | "Twelve_Hours" | "TwentyFour_Hours")?,
                                            resource_types_scope: Array[::String]?,
                                            resource_id_scope: ::String?,
                                            tag_key_scope: ::String?,
                                            tag_value_scope: ::String?
                                          },
                                          ?organization_custom_rule_metadata: {
                                            description: ::String?,
                                            lambda_function_arn: ::String,
                                            organization_config_rule_trigger_types: Array[("ConfigurationItemChangeNotification" | "OversizedConfigurationItemChangeNotification" | "ScheduledNotification")],
                                            input_parameters: ::String?,
                                            maximum_execution_frequency: ("One_Hour" | "Three_Hours" | "Six_Hours" | "Twelve_Hours" | "TwentyFour_Hours")?,
                                            resource_types_scope: Array[::String]?,
                                            resource_id_scope: ::String?,
                                            tag_key_scope: ::String?,
                                            tag_value_scope: ::String?
                                          },
                                          ?excluded_accounts: Array[::String],
                                          ?organization_custom_policy_rule_metadata: {
                                            description: ::String?,
                                            organization_config_rule_trigger_types: Array[("ConfigurationItemChangeNotification" | "OversizedConfigurationItemChangeNotification")]?,
                                            input_parameters: ::String?,
                                            maximum_execution_frequency: ("One_Hour" | "Three_Hours" | "Six_Hours" | "Twelve_Hours" | "TwentyFour_Hours")?,
                                            resource_types_scope: Array[::String]?,
                                            resource_id_scope: ::String?,
                                            tag_key_scope: ::String?,
                                            tag_value_scope: ::String?,
                                            policy_runtime: ::String,
                                            policy_text: ::String,
                                            debug_log_delivery_accounts: Array[::String]?
                                          }
                                        ) -> _PutOrganizationConfigRuleResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutOrganizationConfigRuleResponseSuccess

      interface _PutOrganizationConformancePackResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutOrganizationConformancePackResponse]
        def organization_conformance_pack_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_organization_conformance_pack-instance_method
      def put_organization_conformance_pack: (
                                               organization_conformance_pack_name: ::String,
                                               ?template_s3_uri: ::String,
                                               ?template_body: ::String,
                                               ?delivery_s3_bucket: ::String,
                                               ?delivery_s3_key_prefix: ::String,
                                               ?conformance_pack_input_parameters: Array[
                                                 {
                                                   parameter_name: ::String,
                                                   parameter_value: ::String
                                                 },
                                               ],
                                               ?excluded_accounts: Array[::String]
                                             ) -> _PutOrganizationConformancePackResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutOrganizationConformancePackResponseSuccess

      interface _PutRemediationConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutRemediationConfigurationsResponse]
        def failed_batches: () -> ::Array[Types::FailedRemediationBatch]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_remediation_configurations-instance_method
      def put_remediation_configurations: (
                                            remediation_configurations: Array[
                                              {
                                                config_rule_name: ::String,
                                                target_type: ("SSM_DOCUMENT"),
                                                target_id: ::String,
                                                target_version: ::String?,
                                                parameters: Hash[::String, {
                                                    resource_value: {
                                                      value: ("RESOURCE_ID")
                                                    }?,
                                                    static_value: {
                                                      values: Array[::String]
                                                    }?
                                                  }]?,
                                                resource_type: ::String?,
                                                automatic: bool?,
                                                execution_controls: {
                                                  ssm_controls: {
                                                    concurrent_execution_rate_percentage: ::Integer?,
                                                    error_percentage: ::Integer?
                                                  }?
                                                }?,
                                                maximum_automatic_attempts: ::Integer?,
                                                retry_attempt_seconds: ::Integer?,
                                                arn: ::String?,
                                                created_by_service: ::String?
                                              },
                                            ]
                                          ) -> _PutRemediationConfigurationsResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutRemediationConfigurationsResponseSuccess

      interface _PutRemediationExceptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutRemediationExceptionsResponse]
        def failed_batches: () -> ::Array[Types::FailedRemediationExceptionBatch]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_remediation_exceptions-instance_method
      def put_remediation_exceptions: (
                                        config_rule_name: ::String,
                                        resource_keys: Array[
                                          {
                                            resource_type: ::String?,
                                            resource_id: ::String?
                                          },
                                        ],
                                        ?message: ::String,
                                        ?expiration_time: ::Time
                                      ) -> _PutRemediationExceptionsResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutRemediationExceptionsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_resource_config-instance_method
      def put_resource_config: (
                                 resource_type: ::String,
                                 schema_version_id: ::String,
                                 resource_id: ::String,
                                 ?resource_name: ::String,
                                 configuration: ::String,
                                 ?tags: Hash[::String, ::String]
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _PutRetentionConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutRetentionConfigurationResponse]
        def retention_configuration: () -> Types::RetentionConfiguration
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_retention_configuration-instance_method
      def put_retention_configuration: (
                                         retention_period_in_days: ::Integer
                                       ) -> _PutRetentionConfigurationResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutRetentionConfigurationResponseSuccess

      interface _PutStoredQueryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutStoredQueryResponse]
        def query_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#put_stored_query-instance_method
      def put_stored_query: (
                              stored_query: {
                                query_id: ::String?,
                                query_arn: ::String?,
                                query_name: ::String,
                                description: ::String?,
                                expression: ::String?
                              },
                              ?tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ]
                            ) -> _PutStoredQueryResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutStoredQueryResponseSuccess

      interface _SelectAggregateResourceConfigResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SelectAggregateResourceConfigResponse]
        def results: () -> ::Array[::String]
        def query_info: () -> Types::QueryInfo
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#select_aggregate_resource_config-instance_method
      def select_aggregate_resource_config: (
                                              expression: ::String,
                                              configuration_aggregator_name: ::String,
                                              ?limit: ::Integer,
                                              ?max_results: ::Integer,
                                              ?next_token: ::String
                                            ) -> _SelectAggregateResourceConfigResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SelectAggregateResourceConfigResponseSuccess

      interface _SelectResourceConfigResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SelectResourceConfigResponse]
        def results: () -> ::Array[::String]
        def query_info: () -> Types::QueryInfo
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#select_resource_config-instance_method
      def select_resource_config: (
                                    expression: ::String,
                                    ?limit: ::Integer,
                                    ?next_token: ::String
                                  ) -> _SelectResourceConfigResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SelectResourceConfigResponseSuccess

      interface _StartConfigRulesEvaluationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartConfigRulesEvaluationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#start_config_rules_evaluation-instance_method
      def start_config_rules_evaluation: (
                                           ?config_rule_names: Array[::String]
                                         ) -> _StartConfigRulesEvaluationResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartConfigRulesEvaluationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#start_configuration_recorder-instance_method
      def start_configuration_recorder: (
                                          configuration_recorder_name: ::String
                                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _StartRemediationExecutionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartRemediationExecutionResponse]
        def failure_message: () -> ::String
        def failed_items: () -> ::Array[Types::ResourceKey]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#start_remediation_execution-instance_method
      def start_remediation_execution: (
                                         config_rule_name: ::String,
                                         resource_keys: Array[
                                           {
                                             resource_type: ("AWS::EC2::CustomerGateway" | "AWS::EC2::EIP" | "AWS::EC2::Host" | "AWS::EC2::Instance" | "AWS::EC2::InternetGateway" | "AWS::EC2::NetworkAcl" | "AWS::EC2::NetworkInterface" | "AWS::EC2::RouteTable" | "AWS::EC2::SecurityGroup" | "AWS::EC2::Subnet" | "AWS::CloudTrail::Trail" | "AWS::EC2::Volume" | "AWS::EC2::VPC" | "AWS::EC2::VPNConnection" | "AWS::EC2::VPNGateway" | "AWS::EC2::RegisteredHAInstance" | "AWS::EC2::NatGateway" | "AWS::EC2::EgressOnlyInternetGateway" | "AWS::EC2::VPCEndpoint" | "AWS::EC2::VPCEndpointService" | "AWS::EC2::FlowLog" | "AWS::EC2::VPCPeeringConnection" | "AWS::Elasticsearch::Domain" | "AWS::IAM::Group" | "AWS::IAM::Policy" | "AWS::IAM::Role" | "AWS::IAM::User" | "AWS::ElasticLoadBalancingV2::LoadBalancer" | "AWS::ACM::Certificate" | "AWS::RDS::DBInstance" | "AWS::RDS::DBSubnetGroup" | "AWS::RDS::DBSecurityGroup" | "AWS::RDS::DBSnapshot" | "AWS::RDS::DBCluster" | "AWS::RDS::DBClusterSnapshot" | "AWS::RDS::EventSubscription" | "AWS::S3::Bucket" | "AWS::S3::AccountPublicAccessBlock" | "AWS::Redshift::Cluster" | "AWS::Redshift::ClusterSnapshot" | "AWS::Redshift::ClusterParameterGroup" | "AWS::Redshift::ClusterSecurityGroup" | "AWS::Redshift::ClusterSubnetGroup" | "AWS::Redshift::EventSubscription" | "AWS::SSM::ManagedInstanceInventory" | "AWS::CloudWatch::Alarm" | "AWS::CloudFormation::Stack" | "AWS::ElasticLoadBalancing::LoadBalancer" | "AWS::AutoScaling::AutoScalingGroup" | "AWS::AutoScaling::LaunchConfiguration" | "AWS::AutoScaling::ScalingPolicy" | "AWS::AutoScaling::ScheduledAction" | "AWS::DynamoDB::Table" | "AWS::CodeBuild::Project" | "AWS::WAF::RateBasedRule" | "AWS::WAF::Rule" | "AWS::WAF::RuleGroup" | "AWS::WAF::WebACL" | "AWS::WAFRegional::RateBasedRule" | "AWS::WAFRegional::Rule" | "AWS::WAFRegional::RuleGroup" | "AWS::WAFRegional::WebACL" | "AWS::CloudFront::Distribution" | "AWS::CloudFront::StreamingDistribution" | "AWS::Lambda::Function" | "AWS::NetworkFirewall::Firewall" | "AWS::NetworkFirewall::FirewallPolicy" | "AWS::NetworkFirewall::RuleGroup" | "AWS::ElasticBeanstalk::Application" | "AWS::ElasticBeanstalk::ApplicationVersion" | "AWS::ElasticBeanstalk::Environment" | "AWS::WAFv2::WebACL" | "AWS::WAFv2::RuleGroup" | "AWS::WAFv2::IPSet" | "AWS::WAFv2::RegexPatternSet" | "AWS::WAFv2::ManagedRuleSet" | "AWS::XRay::EncryptionConfig" | "AWS::SSM::AssociationCompliance" | "AWS::SSM::PatchCompliance" | "AWS::Shield::Protection" | "AWS::ShieldRegional::Protection" | "AWS::Config::ConformancePackCompliance" | "AWS::Config::ResourceCompliance" | "AWS::ApiGateway::Stage" | "AWS::ApiGateway::RestApi" | "AWS::ApiGatewayV2::Stage" | "AWS::ApiGatewayV2::Api" | "AWS::CodePipeline::Pipeline" | "AWS::ServiceCatalog::CloudFormationProvisionedProduct" | "AWS::ServiceCatalog::CloudFormationProduct" | "AWS::ServiceCatalog::Portfolio" | "AWS::SQS::Queue" | "AWS::KMS::Key" | "AWS::QLDB::Ledger" | "AWS::SecretsManager::Secret" | "AWS::SNS::Topic" | "AWS::SSM::FileData" | "AWS::Backup::BackupPlan" | "AWS::Backup::BackupSelection" | "AWS::Backup::BackupVault" | "AWS::Backup::RecoveryPoint" | "AWS::ECR::Repository" | "AWS::ECS::Cluster" | "AWS::ECS::Service" | "AWS::ECS::TaskDefinition" | "AWS::EFS::AccessPoint" | "AWS::EFS::FileSystem" | "AWS::EKS::Cluster" | "AWS::OpenSearch::Domain" | "AWS::EC2::TransitGateway" | "AWS::Kinesis::Stream" | "AWS::Kinesis::StreamConsumer" | "AWS::CodeDeploy::Application" | "AWS::CodeDeploy::DeploymentConfig" | "AWS::CodeDeploy::DeploymentGroup" | "AWS::EC2::LaunchTemplate" | "AWS::ECR::PublicRepository" | "AWS::GuardDuty::Detector" | "AWS::EMR::SecurityConfiguration" | "AWS::SageMaker::CodeRepository" | "AWS::Route53Resolver::ResolverEndpoint" | "AWS::Route53Resolver::ResolverRule" | "AWS::Route53Resolver::ResolverRuleAssociation" | "AWS::DMS::ReplicationSubnetGroup" | "AWS::DMS::EventSubscription" | "AWS::MSK::Cluster" | "AWS::StepFunctions::Activity" | "AWS::WorkSpaces::Workspace" | "AWS::WorkSpaces::ConnectionAlias" | "AWS::SageMaker::Model" | "AWS::ElasticLoadBalancingV2::Listener" | "AWS::StepFunctions::StateMachine" | "AWS::Batch::JobQueue" | "AWS::Batch::ComputeEnvironment" | "AWS::AccessAnalyzer::Analyzer" | "AWS::Athena::WorkGroup" | "AWS::Athena::DataCatalog" | "AWS::Detective::Graph" | "AWS::GlobalAccelerator::Accelerator" | "AWS::GlobalAccelerator::EndpointGroup" | "AWS::GlobalAccelerator::Listener" | "AWS::EC2::TransitGatewayAttachment" | "AWS::EC2::TransitGatewayRouteTable" | "AWS::DMS::Certificate" | "AWS::AppConfig::Application" | "AWS::AppSync::GraphQLApi" | "AWS::DataSync::LocationSMB" | "AWS::DataSync::LocationFSxLustre" | "AWS::DataSync::LocationS3" | "AWS::DataSync::LocationEFS" | "AWS::DataSync::Task" | "AWS::DataSync::LocationNFS" | "AWS::EC2::NetworkInsightsAccessScopeAnalysis" | "AWS::EKS::FargateProfile" | "AWS::Glue::Job" | "AWS::GuardDuty::ThreatIntelSet" | "AWS::GuardDuty::IPSet" | "AWS::SageMaker::Workteam" | "AWS::SageMaker::NotebookInstanceLifecycleConfig" | "AWS::ServiceDiscovery::Service" | "AWS::ServiceDiscovery::PublicDnsNamespace" | "AWS::SES::ContactList" | "AWS::SES::ConfigurationSet" | "AWS::Route53::HostedZone" | "AWS::IoTEvents::Input" | "AWS::IoTEvents::DetectorModel" | "AWS::IoTEvents::AlarmModel" | "AWS::ServiceDiscovery::HttpNamespace" | "AWS::Events::EventBus" | "AWS::ImageBuilder::ContainerRecipe" | "AWS::ImageBuilder::DistributionConfiguration" | "AWS::ImageBuilder::InfrastructureConfiguration" | "AWS::DataSync::LocationObjectStorage" | "AWS::DataSync::LocationHDFS" | "AWS::Glue::Classifier" | "AWS::Route53RecoveryReadiness::Cell" | "AWS::Route53RecoveryReadiness::ReadinessCheck" | "AWS::ECR::RegistryPolicy" | "AWS::Backup::ReportPlan" | "AWS::Lightsail::Certificate" | "AWS::RUM::AppMonitor" | "AWS::Events::Endpoint" | "AWS::SES::ReceiptRuleSet" | "AWS::Events::Archive" | "AWS::Events::ApiDestination" | "AWS::Lightsail::Disk" | "AWS::FIS::ExperimentTemplate" | "AWS::DataSync::LocationFSxWindows" | "AWS::SES::ReceiptFilter" | "AWS::GuardDuty::Filter" | "AWS::SES::Template" | "AWS::AmazonMQ::Broker" | "AWS::AppConfig::Environment" | "AWS::AppConfig::ConfigurationProfile" | "AWS::Cloud9::EnvironmentEC2" | "AWS::EventSchemas::Registry" | "AWS::EventSchemas::RegistryPolicy" | "AWS::EventSchemas::Discoverer" | "AWS::FraudDetector::Label" | "AWS::FraudDetector::EntityType" | "AWS::FraudDetector::Variable" | "AWS::FraudDetector::Outcome" | "AWS::IoT::Authorizer" | "AWS::IoT::SecurityProfile" | "AWS::IoT::RoleAlias" | "AWS::IoT::Dimension" | "AWS::IoTAnalytics::Datastore" | "AWS::Lightsail::Bucket" | "AWS::Lightsail::StaticIp" | "AWS::MediaPackage::PackagingGroup" | "AWS::Route53RecoveryReadiness::RecoveryGroup" | "AWS::ResilienceHub::ResiliencyPolicy" | "AWS::Transfer::Workflow" | "AWS::EKS::IdentityProviderConfig" | "AWS::EKS::Addon" | "AWS::Glue::MLTransform" | "AWS::IoT::Policy" | "AWS::IoT::MitigationAction" | "AWS::IoTTwinMaker::Workspace" | "AWS::IoTTwinMaker::Entity" | "AWS::IoTAnalytics::Dataset" | "AWS::IoTAnalytics::Pipeline" | "AWS::IoTAnalytics::Channel" | "AWS::IoTSiteWise::Dashboard" | "AWS::IoTSiteWise::Project" | "AWS::IoTSiteWise::Portal" | "AWS::IoTSiteWise::AssetModel" | "AWS::IVS::Channel" | "AWS::IVS::RecordingConfiguration" | "AWS::IVS::PlaybackKeyPair" | "AWS::KinesisAnalyticsV2::Application" | "AWS::RDS::GlobalCluster" | "AWS::S3::MultiRegionAccessPoint" | "AWS::DeviceFarm::TestGridProject" | "AWS::Budgets::BudgetsAction" | "AWS::Lex::Bot" | "AWS::CodeGuruReviewer::RepositoryAssociation" | "AWS::IoT::CustomMetric" | "AWS::Route53Resolver::FirewallDomainList" | "AWS::RoboMaker::RobotApplicationVersion" | "AWS::EC2::TrafficMirrorSession" | "AWS::IoTSiteWise::Gateway" | "AWS::Lex::BotAlias" | "AWS::LookoutMetrics::Alert" | "AWS::IoT::AccountAuditConfiguration" | "AWS::EC2::TrafficMirrorTarget" | "AWS::S3::StorageLens" | "AWS::IoT::ScheduledAudit" | "AWS::Events::Connection" | "AWS::EventSchemas::Schema" | "AWS::MediaPackage::PackagingConfiguration" | "AWS::KinesisVideo::SignalingChannel" | "AWS::AppStream::DirectoryConfig" | "AWS::LookoutVision::Project" | "AWS::Route53RecoveryControl::Cluster" | "AWS::Route53RecoveryControl::SafetyRule" | "AWS::Route53RecoveryControl::ControlPanel" | "AWS::Route53RecoveryControl::RoutingControl" | "AWS::Route53RecoveryReadiness::ResourceSet" | "AWS::RoboMaker::SimulationApplication" | "AWS::RoboMaker::RobotApplication" | "AWS::HealthLake::FHIRDatastore" | "AWS::Pinpoint::Segment" | "AWS::Pinpoint::ApplicationSettings" | "AWS::Events::Rule" | "AWS::EC2::DHCPOptions" | "AWS::EC2::NetworkInsightsPath" | "AWS::EC2::TrafficMirrorFilter" | "AWS::EC2::IPAM" | "AWS::IoTTwinMaker::Scene" | "AWS::NetworkManager::TransitGatewayRegistration" | "AWS::CustomerProfiles::Domain" | "AWS::AutoScaling::WarmPool" | "AWS::Connect::PhoneNumber" | "AWS::AppConfig::DeploymentStrategy" | "AWS::AppFlow::Flow" | "AWS::AuditManager::Assessment" | "AWS::CloudWatch::MetricStream" | "AWS::DeviceFarm::InstanceProfile" | "AWS::DeviceFarm::Project" | "AWS::EC2::EC2Fleet" | "AWS::EC2::SubnetRouteTableAssociation" | "AWS::ECR::PullThroughCacheRule" | "AWS::GroundStation::Config" | "AWS::ImageBuilder::ImagePipeline" | "AWS::IoT::FleetMetric" | "AWS::IoTWireless::ServiceProfile" | "AWS::NetworkManager::Device" | "AWS::NetworkManager::GlobalNetwork" | "AWS::NetworkManager::Link" | "AWS::NetworkManager::Site" | "AWS::Panorama::Package" | "AWS::Pinpoint::App" | "AWS::Redshift::ScheduledAction" | "AWS::Route53Resolver::FirewallRuleGroupAssociation" | "AWS::SageMaker::AppImageConfig" | "AWS::SageMaker::Image" | "AWS::ECS::TaskSet" | "AWS::Cassandra::Keyspace" | "AWS::Signer::SigningProfile" | "AWS::Amplify::App" | "AWS::AppMesh::VirtualNode" | "AWS::AppMesh::VirtualService" | "AWS::AppRunner::VpcConnector" | "AWS::AppStream::Application" | "AWS::CodeArtifact::Repository" | "AWS::EC2::PrefixList" | "AWS::EC2::SpotFleet" | "AWS::Evidently::Project" | "AWS::Forecast::Dataset" | "AWS::IAM::SAMLProvider" | "AWS::IAM::ServerCertificate" | "AWS::Pinpoint::Campaign" | "AWS::Pinpoint::InAppTemplate" | "AWS::SageMaker::Domain" | "AWS::Transfer::Agreement" | "AWS::Transfer::Connector" | "AWS::KinesisFirehose::DeliveryStream" | "AWS::Amplify::Branch" | "AWS::AppIntegrations::EventIntegration" | "AWS::AppMesh::Route" | "AWS::Athena::PreparedStatement" | "AWS::EC2::IPAMScope" | "AWS::Evidently::Launch" | "AWS::Forecast::DatasetGroup" | "AWS::GreengrassV2::ComponentVersion" | "AWS::GroundStation::MissionProfile" | "AWS::MediaConnect::FlowEntitlement" | "AWS::MediaConnect::FlowVpcInterface" | "AWS::MediaTailor::PlaybackConfiguration" | "AWS::MSK::Configuration" | "AWS::Personalize::Dataset" | "AWS::Personalize::Schema" | "AWS::Personalize::Solution" | "AWS::Pinpoint::EmailTemplate" | "AWS::Pinpoint::EventStream" | "AWS::ResilienceHub::App" | "AWS::ACMPCA::CertificateAuthority" | "AWS::AppConfig::HostedConfigurationVersion" | "AWS::AppMesh::VirtualGateway" | "AWS::AppMesh::VirtualRouter" | "AWS::AppRunner::Service" | "AWS::CustomerProfiles::ObjectType" | "AWS::DMS::Endpoint" | "AWS::EC2::CapacityReservation" | "AWS::EC2::ClientVpnEndpoint" | "AWS::Kendra::Index" | "AWS::KinesisVideo::Stream" | "AWS::Logs::Destination" | "AWS::Pinpoint::EmailChannel" | "AWS::S3::AccessPoint" | "AWS::NetworkManager::CustomerGatewayAssociation" | "AWS::NetworkManager::LinkAssociation" | "AWS::IoTWireless::MulticastGroup" | "AWS::Personalize::DatasetGroup" | "AWS::IoTTwinMaker::ComponentType" | "AWS::CodeBuild::ReportGroup" | "AWS::SageMaker::FeatureGroup" | "AWS::MSK::BatchScramSecret" | "AWS::AppStream::Stack" | "AWS::IoT::JobTemplate" | "AWS::IoTWireless::FuotaTask" | "AWS::IoT::ProvisioningTemplate" | "AWS::InspectorV2::Filter" | "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation" | "AWS::ServiceDiscovery::Instance" | "AWS::Transfer::Certificate" | "AWS::MediaConnect::FlowSource" | "AWS::APS::RuleGroupsNamespace" | "AWS::CodeGuruProfiler::ProfilingGroup" | "AWS::Route53Resolver::ResolverQueryLoggingConfig" | "AWS::Batch::SchedulingPolicy" | "AWS::ACMPCA::CertificateAuthorityActivation" | "AWS::AppMesh::GatewayRoute" | "AWS::AppMesh::Mesh" | "AWS::Connect::Instance" | "AWS::Connect::QuickConnect" | "AWS::EC2::CarrierGateway" | "AWS::EC2::IPAMPool" | "AWS::EC2::TransitGatewayConnect" | "AWS::EC2::TransitGatewayMulticastDomain" | "AWS::ECS::CapacityProvider" | "AWS::IAM::InstanceProfile" | "AWS::IoT::CACertificate" | "AWS::IoTTwinMaker::SyncJob" | "AWS::KafkaConnect::Connector" | "AWS::Lambda::CodeSigningConfig" | "AWS::NetworkManager::ConnectPeer" | "AWS::ResourceExplorer2::Index" | "AWS::AppStream::Fleet" | "AWS::Cognito::UserPool" | "AWS::Cognito::UserPoolClient" | "AWS::Cognito::UserPoolGroup" | "AWS::EC2::NetworkInsightsAccessScope" | "AWS::EC2::NetworkInsightsAnalysis" | "AWS::Grafana::Workspace" | "AWS::GroundStation::DataflowEndpointGroup" | "AWS::ImageBuilder::ImageRecipe" | "AWS::KMS::Alias" | "AWS::M2::Environment" | "AWS::QuickSight::DataSource" | "AWS::QuickSight::Template" | "AWS::QuickSight::Theme" | "AWS::RDS::OptionGroup" | "AWS::Redshift::EndpointAccess" | "AWS::Route53Resolver::FirewallRuleGroup" | "AWS::SSM::Document"),
                                             resource_id: ::String
                                           },
                                         ]
                                       ) -> _StartRemediationExecutionResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartRemediationExecutionResponseSuccess

      interface _StartResourceEvaluationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartResourceEvaluationResponse]
        def resource_evaluation_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#start_resource_evaluation-instance_method
      def start_resource_evaluation: (
                                       resource_details: {
                                         resource_id: ::String,
                                         resource_type: ::String,
                                         resource_configuration: ::String,
                                         resource_configuration_schema_type: ("CFN_RESOURCE_SCHEMA")?
                                       },
                                       ?evaluation_context: {
                                         evaluation_context_identifier: ::String?
                                       },
                                       evaluation_mode: ("DETECTIVE" | "PROACTIVE"),
                                       ?evaluation_timeout: ::Integer,
                                       ?client_token: ::String
                                     ) -> _StartResourceEvaluationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartResourceEvaluationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#stop_configuration_recorder-instance_method
      def stop_configuration_recorder: (
                                         configuration_recorder_name: ::String
                                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Array[
                            {
                              key: ::String?,
                              value: ::String?
                            },
                          ]
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/ConfigService/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
    end
  end
end

