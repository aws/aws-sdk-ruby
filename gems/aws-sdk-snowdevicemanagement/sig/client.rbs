# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module SnowDeviceManagement
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CancelTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelTaskOutput]
        def task_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#cancel_task-instance_method
      def cancel_task: (
                         task_id: ::String
                       ) -> _CancelTaskResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelTaskResponseSuccess

      interface _CreateTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTaskOutput]
        def task_arn: () -> ::String
        def task_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#create_task-instance_method
      def create_task: (
                         ?client_token: ::String,
                         command: {
                           reboot: {
                           }?,
                           unlock: {
                           }?
                         },
                         ?description: ::String,
                         ?tags: Hash[::String, ::String],
                         targets: Array[::String]
                       ) -> _CreateTaskResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTaskResponseSuccess

      interface _DescribeDeviceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDeviceOutput]
        def associated_with_job: () -> ::String
        def device_capacities: () -> ::Array[Types::Capacity]
        def device_state: () -> ("UNLOCKED" | "LOCKED" | "UNLOCKING")
        def device_type: () -> ::String
        def last_reached_out_at: () -> ::Time
        def last_updated_at: () -> ::Time
        def managed_device_arn: () -> ::String
        def managed_device_id: () -> ::String
        def physical_network_interfaces: () -> ::Array[Types::PhysicalNetworkInterface]
        def software: () -> Types::SoftwareInformation
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#describe_device-instance_method
      def describe_device: (
                             managed_device_id: ::String
                           ) -> _DescribeDeviceResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDeviceResponseSuccess

      interface _DescribeDeviceEc2InstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDeviceEc2Output]
        def instances: () -> ::Array[Types::InstanceSummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#describe_device_ec2_instances-instance_method
      def describe_device_ec2_instances: (
                                           instance_ids: Array[::String],
                                           managed_device_id: ::String
                                         ) -> _DescribeDeviceEc2InstancesResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDeviceEc2InstancesResponseSuccess

      interface _DescribeExecutionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeExecutionOutput]
        def execution_id: () -> ::String
        def last_updated_at: () -> ::Time
        def managed_device_id: () -> ::String
        def started_at: () -> ::Time
        def state: () -> ("QUEUED" | "IN_PROGRESS" | "CANCELED" | "FAILED" | "SUCCEEDED" | "REJECTED" | "TIMED_OUT")
        def task_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#describe_execution-instance_method
      def describe_execution: (
                                managed_device_id: ::String,
                                task_id: ::String
                              ) -> _DescribeExecutionResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeExecutionResponseSuccess

      interface _DescribeTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTaskOutput]
        def completed_at: () -> ::Time
        def created_at: () -> ::Time
        def description: () -> ::String
        def last_updated_at: () -> ::Time
        def state: () -> ("IN_PROGRESS" | "CANCELED" | "COMPLETED")
        def tags: () -> ::Hash[::String, ::String]
        def targets: () -> ::Array[::String]
        def task_arn: () -> ::String
        def task_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#describe_task-instance_method
      def describe_task: (
                           task_id: ::String
                         ) -> _DescribeTaskResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTaskResponseSuccess

      interface _ListDeviceResourcesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDeviceResourcesOutput]
        def next_token: () -> ::String
        def resources: () -> ::Array[Types::ResourceSummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#list_device_resources-instance_method
      def list_device_resources: (
                                   managed_device_id: ::String,
                                   ?max_results: ::Integer,
                                   ?next_token: ::String,
                                   ?type: ::String
                                 ) -> _ListDeviceResourcesResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDeviceResourcesResponseSuccess

      interface _ListDevicesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDevicesOutput]
        def devices: () -> ::Array[Types::DeviceSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#list_devices-instance_method
      def list_devices: (
                          ?job_id: ::String,
                          ?max_results: ::Integer,
                          ?next_token: ::String
                        ) -> _ListDevicesResponseSuccess
                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDevicesResponseSuccess

      interface _ListExecutionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListExecutionsOutput]
        def executions: () -> ::Array[Types::ExecutionSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#list_executions-instance_method
      def list_executions: (
                             ?max_results: ::Integer,
                             ?next_token: ::String,
                             ?state: ("QUEUED" | "IN_PROGRESS" | "CANCELED" | "FAILED" | "SUCCEEDED" | "REJECTED" | "TIMED_OUT"),
                             task_id: ::String
                           ) -> _ListExecutionsResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListExecutionsResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceOutput]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ListTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTasksOutput]
        def next_token: () -> ::String
        def tasks: () -> ::Array[Types::TaskSummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#list_tasks-instance_method
      def list_tasks: (
                        ?max_results: ::Integer,
                        ?next_token: ::String,
                        ?state: ("IN_PROGRESS" | "CANCELED" | "COMPLETED")
                      ) -> _ListTasksResponseSuccess
                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTasksResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/SnowDeviceManagement/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
    end
  end
end

