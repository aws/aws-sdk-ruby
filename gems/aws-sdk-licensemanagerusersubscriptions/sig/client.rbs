# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module LicenseManagerUserSubscriptions
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _AssociateUserResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateUserResponse]
        def instance_user_summary: () -> Types::InstanceUserSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#associate_user-instance_method
      def associate_user: (
                            ?domain: ::String,
                            identity_provider: {
                              active_directory_identity_provider: {
                                directory_id: ::String?
                              }?
                            },
                            instance_id: ::String,
                            username: ::String
                          ) -> _AssociateUserResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateUserResponseSuccess

      interface _DeregisterIdentityProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterIdentityProviderResponse]
        def identity_provider_summary: () -> Types::IdentityProviderSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#deregister_identity_provider-instance_method
      def deregister_identity_provider: (
                                          identity_provider: {
                                            active_directory_identity_provider: {
                                              directory_id: ::String?
                                            }?
                                          },
                                          product: ::String
                                        ) -> _DeregisterIdentityProviderResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterIdentityProviderResponseSuccess

      interface _DisassociateUserResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateUserResponse]
        def instance_user_summary: () -> Types::InstanceUserSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#disassociate_user-instance_method
      def disassociate_user: (
                               ?domain: ::String,
                               identity_provider: {
                                 active_directory_identity_provider: {
                                   directory_id: ::String?
                                 }?
                               },
                               instance_id: ::String,
                               username: ::String
                             ) -> _DisassociateUserResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateUserResponseSuccess

      interface _ListIdentityProvidersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListIdentityProvidersResponse]
        def identity_provider_summaries: () -> ::Array[Types::IdentityProviderSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#list_identity_providers-instance_method
      def list_identity_providers: (
                                     ?max_results: ::Integer,
                                     ?next_token: ::String
                                   ) -> _ListIdentityProvidersResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListIdentityProvidersResponseSuccess

      interface _ListInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListInstancesResponse]
        def instance_summaries: () -> ::Array[Types::InstanceSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#list_instances-instance_method
      def list_instances: (
                            ?filters: Array[
                              {
                                attribute: ::String?,
                                operation: ::String?,
                                value: ::String?
                              },
                            ],
                            ?max_results: ::Integer,
                            ?next_token: ::String
                          ) -> _ListInstancesResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListInstancesResponseSuccess

      interface _ListProductSubscriptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListProductSubscriptionsResponse]
        def next_token: () -> ::String
        def product_user_summaries: () -> ::Array[Types::ProductUserSummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#list_product_subscriptions-instance_method
      def list_product_subscriptions: (
                                        ?filters: Array[
                                          {
                                            attribute: ::String?,
                                            operation: ::String?,
                                            value: ::String?
                                          },
                                        ],
                                        identity_provider: {
                                          active_directory_identity_provider: {
                                            directory_id: ::String?
                                          }?
                                        },
                                        ?max_results: ::Integer,
                                        ?next_token: ::String,
                                        product: ::String
                                      ) -> _ListProductSubscriptionsResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListProductSubscriptionsResponseSuccess

      interface _ListUserAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListUserAssociationsResponse]
        def instance_user_summaries: () -> ::Array[Types::InstanceUserSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#list_user_associations-instance_method
      def list_user_associations: (
                                    ?filters: Array[
                                      {
                                        attribute: ::String?,
                                        operation: ::String?,
                                        value: ::String?
                                      },
                                    ],
                                    identity_provider: {
                                      active_directory_identity_provider: {
                                        directory_id: ::String?
                                      }?
                                    },
                                    instance_id: ::String,
                                    ?max_results: ::Integer,
                                    ?next_token: ::String
                                  ) -> _ListUserAssociationsResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListUserAssociationsResponseSuccess

      interface _RegisterIdentityProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterIdentityProviderResponse]
        def identity_provider_summary: () -> Types::IdentityProviderSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#register_identity_provider-instance_method
      def register_identity_provider: (
                                        identity_provider: {
                                          active_directory_identity_provider: {
                                            directory_id: ::String?
                                          }?
                                        },
                                        product: ::String,
                                        ?settings: {
                                          security_group_id: ::String,
                                          subnets: Array[::String]
                                        }
                                      ) -> _RegisterIdentityProviderResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterIdentityProviderResponseSuccess

      interface _StartProductSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartProductSubscriptionResponse]
        def product_user_summary: () -> Types::ProductUserSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#start_product_subscription-instance_method
      def start_product_subscription: (
                                        ?domain: ::String,
                                        identity_provider: {
                                          active_directory_identity_provider: {
                                            directory_id: ::String?
                                          }?
                                        },
                                        product: ::String,
                                        username: ::String
                                      ) -> _StartProductSubscriptionResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartProductSubscriptionResponseSuccess

      interface _StopProductSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopProductSubscriptionResponse]
        def product_user_summary: () -> Types::ProductUserSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#stop_product_subscription-instance_method
      def stop_product_subscription: (
                                       ?domain: ::String,
                                       identity_provider: {
                                         active_directory_identity_provider: {
                                           directory_id: ::String?
                                         }?
                                       },
                                       product: ::String,
                                       username: ::String
                                     ) -> _StopProductSubscriptionResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopProductSubscriptionResponseSuccess

      interface _UpdateIdentityProviderSettingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateIdentityProviderSettingsResponse]
        def identity_provider_summary: () -> Types::IdentityProviderSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/LicenseManagerUserSubscriptions/Client.html#update_identity_provider_settings-instance_method
      def update_identity_provider_settings: (
                                               identity_provider: {
                                                 active_directory_identity_provider: {
                                                   directory_id: ::String?
                                                 }?
                                               },
                                               product: ::String,
                                               update_settings: {
                                                 add_subnets: Array[::String],
                                                 remove_subnets: Array[::String],
                                                 security_group_id: ::String?
                                               }
                                             ) -> _UpdateIdentityProviderSettingsResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateIdentityProviderSettingsResponseSuccess
    end
  end
end

