# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module BedrockAgentRuntime
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?event_stream_handler: Proc,
                      ?ignore_configured_endpoint_urls: bool,
                      ?input_event_stream_handler: Proc,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?output_event_stream_handler: Proc,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _DeleteAgentMemoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteAgentMemoryResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#delete_agent_memory-instance_method
      def delete_agent_memory: (
                                 agent_alias_id: ::String,
                                 agent_id: ::String,
                                 ?memory_id: ::String
                               ) -> _DeleteAgentMemoryResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteAgentMemoryResponseSuccess

      interface _GetAgentMemoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAgentMemoryResponse]
        def memory_contents: () -> ::Array[Types::Memory]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#get_agent_memory-instance_method
      def get_agent_memory: (
                              agent_alias_id: ::String,
                              agent_id: ::String,
                              ?max_items: ::Integer,
                              memory_id: ::String,
                              memory_type: ("SESSION_SUMMARY"),
                              ?next_token: ::String
                            ) -> _GetAgentMemoryResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAgentMemoryResponseSuccess

      interface _InvokeAgentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::InvokeAgentResponse]
        def completion: () -> Types::ResponseStream
        def content_type: () -> ::String
        def memory_id: () -> ::String
        def session_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#invoke_agent-instance_method
      def invoke_agent: (
                          agent_alias_id: ::String,
                          agent_id: ::String,
                          ?enable_trace: bool,
                          ?end_session: bool,
                          ?input_text: ::String,
                          ?memory_id: ::String,
                          session_id: ::String,
                          ?session_state: {
                            files: Array[
                              {
                                name: ::String,
                                source: {
                                  byte_content: {
                                    data: ::String,
                                    media_type: ::String
                                  }?,
                                  s3_location: {
                                    uri: ::String
                                  }?,
                                  source_type: ("S3" | "BYTE_CONTENT")
                                },
                                use_case: ("CODE_INTERPRETER" | "CHAT")
                              },
                            ]?,
                            invocation_id: ::String?,
                            knowledge_base_configurations: Array[
                              {
                                knowledge_base_id: ::String,
                                retrieval_configuration: {
                                  vector_search_configuration: {
                                    filter: {
                                      and_all: Array[
                                        untyped,
                                      ]?,
                                      equals: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      greater_than: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      greater_than_or_equals: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      in: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      less_than: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      less_than_or_equals: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      list_contains: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      not_equals: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      not_in: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      or_all: Array[
                                        untyped,
                                      ]?,
                                      starts_with: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?,
                                      string_contains: {
                                        key: ::String,
                                        value: {
                                        }
                                      }?
                                    }?,
                                    number_of_results: ::Integer?,
                                    override_search_type: ("HYBRID" | "SEMANTIC")?
                                  }
                                }
                              },
                            ]?,
                            prompt_session_attributes: Hash[::String, ::String]?,
                            return_control_invocation_results: Array[
                              {
                                api_result: {
                                  action_group: ::String,
                                  api_path: ::String?,
                                  confirmation_state: ("CONFIRM" | "DENY")?,
                                  http_method: ::String?,
                                  http_status_code: ::Integer?,
                                  response_body: Hash[::String, {
                                      body: ::String?
                                    }]?,
                                  response_state: ("FAILURE" | "REPROMPT")?
                                }?,
                                function_result: {
                                  action_group: ::String,
                                  confirmation_state: ("CONFIRM" | "DENY")?,
                                  function: ::String?,
                                  response_body: Hash[::String, {
                                      body: ::String?
                                    }]?,
                                  response_state: ("FAILURE" | "REPROMPT")?
                                }?
                              },
                            ]?,
                            session_attributes: Hash[::String, ::String]?
                          }
                        ) ?{ (*untyped) -> void } -> _InvokeAgentResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _InvokeAgentResponseSuccess

      interface _InvokeFlowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::InvokeFlowResponse]
        def response_stream: () -> Types::FlowResponseStream
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#invoke_flow-instance_method
      def invoke_flow: (
                         flow_alias_identifier: ::String,
                         flow_identifier: ::String,
                         inputs: Array[
                           {
                             content: {
                               document: {
                               }?
                             },
                             node_name: ::String,
                             node_output_name: ::String
                           },
                         ]
                       ) ?{ (*untyped) -> void } -> _InvokeFlowResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _InvokeFlowResponseSuccess

      interface _RetrieveResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RetrieveResponse]
        def next_token: () -> ::String
        def retrieval_results: () -> ::Array[Types::KnowledgeBaseRetrievalResult]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#retrieve-instance_method
      def retrieve: (
                      knowledge_base_id: ::String,
                      ?next_token: ::String,
                      ?retrieval_configuration: {
                        vector_search_configuration: {
                          filter: {
                            and_all: Array[
                              untyped,
                            ]?,
                            equals: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            greater_than: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            greater_than_or_equals: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            in: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            less_than: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            less_than_or_equals: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            list_contains: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            not_equals: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            not_in: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            or_all: Array[
                              untyped,
                            ]?,
                            starts_with: {
                              key: ::String,
                              value: {
                              }
                            }?,
                            string_contains: {
                              key: ::String,
                              value: {
                              }
                            }?
                          }?,
                          number_of_results: ::Integer?,
                          override_search_type: ("HYBRID" | "SEMANTIC")?
                        }
                      },
                      retrieval_query: {
                        text: ::String
                      }
                    ) -> _RetrieveResponseSuccess
                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RetrieveResponseSuccess

      interface _RetrieveAndGenerateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RetrieveAndGenerateResponse]
        def citations: () -> ::Array[Types::Citation]
        def guardrail_action: () -> ("INTERVENED" | "NONE")
        def output: () -> Types::RetrieveAndGenerateOutput
        def session_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/BedrockAgentRuntime/Client.html#retrieve_and_generate-instance_method
      def retrieve_and_generate: (
                                   input: {
                                     text: ::String
                                   },
                                   ?retrieve_and_generate_configuration: {
                                     external_sources_configuration: {
                                       generation_configuration: {
                                         additional_model_request_fields: Hash[::String, {
                                           }]?,
                                         guardrail_configuration: {
                                           guardrail_id: ::String,
                                           guardrail_version: ::String
                                         }?,
                                         inference_config: {
                                           text_inference_config: {
                                             max_tokens: ::Integer?,
                                             stop_sequences: Array[::String]?,
                                             temperature: ::Float?,
                                             top_p: ::Float?
                                           }?
                                         }?,
                                         prompt_template: {
                                           text_prompt_template: ::String?
                                         }?
                                       }?,
                                       model_arn: ::String,
                                       sources: Array[
                                         {
                                           byte_content: {
                                             content_type: ::String,
                                             data: ::String,
                                             identifier: ::String
                                           }?,
                                           s3_location: {
                                             uri: ::String
                                           }?,
                                           source_type: ("S3" | "BYTE_CONTENT")
                                         },
                                       ]
                                     }?,
                                     knowledge_base_configuration: {
                                       generation_configuration: {
                                         additional_model_request_fields: Hash[::String, {
                                           }]?,
                                         guardrail_configuration: {
                                           guardrail_id: ::String,
                                           guardrail_version: ::String
                                         }?,
                                         inference_config: {
                                           text_inference_config: {
                                             max_tokens: ::Integer?,
                                             stop_sequences: Array[::String]?,
                                             temperature: ::Float?,
                                             top_p: ::Float?
                                           }?
                                         }?,
                                         prompt_template: {
                                           text_prompt_template: ::String?
                                         }?
                                       }?,
                                       knowledge_base_id: ::String,
                                       model_arn: ::String,
                                       orchestration_configuration: {
                                         query_transformation_configuration: {
                                           type: ("QUERY_DECOMPOSITION")
                                         }
                                       }?,
                                       retrieval_configuration: {
                                         vector_search_configuration: {
                                           filter: {
                                             and_all: Array[
                                               untyped,
                                             ]?,
                                             equals: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             greater_than: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             greater_than_or_equals: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             in: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             less_than: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             less_than_or_equals: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             list_contains: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             not_equals: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             not_in: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             or_all: Array[
                                               untyped,
                                             ]?,
                                             starts_with: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?,
                                             string_contains: {
                                               key: ::String,
                                               value: {
                                               }
                                             }?
                                           }?,
                                           number_of_results: ::Integer?,
                                           override_search_type: ("HYBRID" | "SEMANTIC")?
                                         }
                                       }?
                                     }?,
                                     type: ("KNOWLEDGE_BASE" | "EXTERNAL_SOURCES")
                                   },
                                   ?session_configuration: {
                                     kms_key_arn: ::String
                                   },
                                   ?session_id: ::String
                                 ) -> _RetrieveAndGenerateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RetrieveAndGenerateResponseSuccess
    end
  end
end

