# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module TimestreamWrite
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?simple_json: bool,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CreateBatchLoadTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateBatchLoadTaskResponse]
        def task_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#create_batch_load_task-instance_method
      def create_batch_load_task: (
                                    ?client_token: ::String,
                                    ?data_model_configuration: {
                                      data_model: {
                                        time_column: ::String?,
                                        time_unit: ("MILLISECONDS" | "SECONDS" | "MICROSECONDS" | "NANOSECONDS")?,
                                        dimension_mappings: Array[
                                          {
                                            source_column: ::String?,
                                            destination_column: ::String?
                                          },
                                        ],
                                        multi_measure_mappings: {
                                          target_multi_measure_name: ::String?,
                                          multi_measure_attribute_mappings: Array[
                                            {
                                              source_column: ::String,
                                              target_multi_measure_attribute_name: ::String?,
                                              measure_value_type: ("DOUBLE" | "BIGINT" | "BOOLEAN" | "VARCHAR" | "TIMESTAMP")?
                                            },
                                          ]
                                        }?,
                                        mixed_measure_mappings: Array[
                                          {
                                            measure_name: ::String?,
                                            source_column: ::String?,
                                            target_measure_name: ::String?,
                                            measure_value_type: ("DOUBLE" | "BIGINT" | "VARCHAR" | "BOOLEAN" | "TIMESTAMP" | "MULTI"),
                                            multi_measure_attribute_mappings: Array[
                                              {
                                                source_column: ::String,
                                                target_multi_measure_attribute_name: ::String?,
                                                measure_value_type: ("DOUBLE" | "BIGINT" | "BOOLEAN" | "VARCHAR" | "TIMESTAMP")?
                                              },
                                            ]?
                                          },
                                        ]?,
                                        measure_name_column: ::String?
                                      }?,
                                      data_model_s3_configuration: {
                                        bucket_name: ::String?,
                                        object_key: ::String?
                                      }?
                                    },
                                    data_source_configuration: {
                                      data_source_s3_configuration: {
                                        bucket_name: ::String,
                                        object_key_prefix: ::String?
                                      },
                                      csv_configuration: {
                                        column_separator: ::String?,
                                        escape_char: ::String?,
                                        quote_char: ::String?,
                                        null_value: ::String?,
                                        trim_white_space: bool?
                                      }?,
                                      data_format: ("CSV")
                                    },
                                    report_configuration: {
                                      report_s3_configuration: {
                                        bucket_name: ::String,
                                        object_key_prefix: ::String?,
                                        encryption_option: ("SSE_S3" | "SSE_KMS")?,
                                        kms_key_id: ::String?
                                      }?
                                    },
                                    target_database_name: ::String,
                                    target_table_name: ::String,
                                    ?record_version: ::Integer
                                  ) -> _CreateBatchLoadTaskResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateBatchLoadTaskResponseSuccess

      interface _CreateDatabaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDatabaseResponse]
        def database: () -> Types::Database
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#create_database-instance_method
      def create_database: (
                             database_name: ::String,
                             ?kms_key_id: ::String,
                             ?tags: Array[
                               {
                                 key: ::String,
                                 value: ::String
                               },
                             ]
                           ) -> _CreateDatabaseResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDatabaseResponseSuccess

      interface _CreateTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTableResponse]
        def table: () -> Types::Table
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#create_table-instance_method
      def create_table: (
                          database_name: ::String,
                          table_name: ::String,
                          ?retention_properties: {
                            memory_store_retention_period_in_hours: ::Integer,
                            magnetic_store_retention_period_in_days: ::Integer
                          },
                          ?tags: Array[
                            {
                              key: ::String,
                              value: ::String
                            },
                          ],
                          ?magnetic_store_write_properties: {
                            enable_magnetic_store_writes: bool,
                            magnetic_store_rejected_data_location: {
                              s3_configuration: {
                                bucket_name: ::String?,
                                object_key_prefix: ::String?,
                                encryption_option: ("SSE_S3" | "SSE_KMS")?,
                                kms_key_id: ::String?
                              }?
                            }?
                          },
                          ?schema: {
                            composite_partition_key: Array[
                              {
                                type: ("DIMENSION" | "MEASURE"),
                                name: ::String?,
                                enforcement_in_record: ("REQUIRED" | "OPTIONAL")?
                              },
                            ]?
                          }
                        ) -> _CreateTableResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTableResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#delete_database-instance_method
      def delete_database: (
                             database_name: ::String
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#delete_table-instance_method
      def delete_table: (
                          database_name: ::String,
                          table_name: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DescribeBatchLoadTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeBatchLoadTaskResponse]
        def batch_load_task_description: () -> Types::BatchLoadTaskDescription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#describe_batch_load_task-instance_method
      def describe_batch_load_task: (
                                      task_id: ::String
                                    ) -> _DescribeBatchLoadTaskResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeBatchLoadTaskResponseSuccess

      interface _DescribeDatabaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDatabaseResponse]
        def database: () -> Types::Database
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#describe_database-instance_method
      def describe_database: (
                               database_name: ::String
                             ) -> _DescribeDatabaseResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDatabaseResponseSuccess

      interface _DescribeEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeEndpointsResponse]
        def endpoints: () -> ::Array[Types::Endpoint]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#describe_endpoints-instance_method
      def describe_endpoints: (
                              ) -> _DescribeEndpointsResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEndpointsResponseSuccess

      interface _DescribeTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTableResponse]
        def table: () -> Types::Table
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#describe_table-instance_method
      def describe_table: (
                            database_name: ::String,
                            table_name: ::String
                          ) -> _DescribeTableResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTableResponseSuccess

      interface _ListBatchLoadTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListBatchLoadTasksResponse]
        def next_token: () -> ::String
        def batch_load_tasks: () -> ::Array[Types::BatchLoadTask]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#list_batch_load_tasks-instance_method
      def list_batch_load_tasks: (
                                   ?next_token: ::String,
                                   ?max_results: ::Integer,
                                   ?task_status: ("CREATED" | "IN_PROGRESS" | "FAILED" | "SUCCEEDED" | "PROGRESS_STOPPED" | "PENDING_RESUME")
                                 ) -> _ListBatchLoadTasksResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListBatchLoadTasksResponseSuccess

      interface _ListDatabasesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDatabasesResponse]
        def databases: () -> ::Array[Types::Database]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#list_databases-instance_method
      def list_databases: (
                            ?next_token: ::String,
                            ?max_results: ::Integer
                          ) -> _ListDatabasesResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDatabasesResponseSuccess

      interface _ListTablesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTablesResponse]
        def tables: () -> ::Array[Types::Table]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#list_tables-instance_method
      def list_tables: (
                         ?database_name: ::String,
                         ?next_token: ::String,
                         ?max_results: ::Integer
                       ) -> _ListTablesResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTablesResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ResumeBatchLoadTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ResumeBatchLoadTaskResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#resume_batch_load_task-instance_method
      def resume_batch_load_task: (
                                    task_id: ::String
                                  ) -> _ResumeBatchLoadTaskResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ResumeBatchLoadTaskResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Array[
                            {
                              key: ::String,
                              value: ::String
                            },
                          ]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateDatabaseResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateDatabaseResponse]
        def database: () -> Types::Database
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#update_database-instance_method
      def update_database: (
                             database_name: ::String,
                             kms_key_id: ::String
                           ) -> _UpdateDatabaseResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateDatabaseResponseSuccess

      interface _UpdateTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateTableResponse]
        def table: () -> Types::Table
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#update_table-instance_method
      def update_table: (
                          database_name: ::String,
                          table_name: ::String,
                          ?retention_properties: {
                            memory_store_retention_period_in_hours: ::Integer,
                            magnetic_store_retention_period_in_days: ::Integer
                          },
                          ?magnetic_store_write_properties: {
                            enable_magnetic_store_writes: bool,
                            magnetic_store_rejected_data_location: {
                              s3_configuration: {
                                bucket_name: ::String?,
                                object_key_prefix: ::String?,
                                encryption_option: ("SSE_S3" | "SSE_KMS")?,
                                kms_key_id: ::String?
                              }?
                            }?
                          },
                          ?schema: {
                            composite_partition_key: Array[
                              {
                                type: ("DIMENSION" | "MEASURE"),
                                name: ::String?,
                                enforcement_in_record: ("REQUIRED" | "OPTIONAL")?
                              },
                            ]?
                          }
                        ) -> _UpdateTableResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateTableResponseSuccess

      interface _WriteRecordsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::WriteRecordsResponse]
        def records_ingested: () -> Types::RecordsIngested
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/TimestreamWrite/Client.html#write_records-instance_method
      def write_records: (
                           database_name: ::String,
                           table_name: ::String,
                           ?common_attributes: {
                             dimensions: Array[
                               {
                                 name: ::String,
                                 value: ::String,
                                 dimension_value_type: ("VARCHAR")?
                               },
                             ]?,
                             measure_name: ::String?,
                             measure_value: ::String?,
                             measure_value_type: ("DOUBLE" | "BIGINT" | "VARCHAR" | "BOOLEAN" | "TIMESTAMP" | "MULTI")?,
                             time: ::String?,
                             time_unit: ("MILLISECONDS" | "SECONDS" | "MICROSECONDS" | "NANOSECONDS")?,
                             version: ::Integer?,
                             measure_values: Array[
                               {
                                 name: ::String,
                                 value: ::String,
                                 type: ("DOUBLE" | "BIGINT" | "VARCHAR" | "BOOLEAN" | "TIMESTAMP" | "MULTI")
                               },
                             ]?
                           },
                           records: Array[
                             {
                               dimensions: Array[
                                 {
                                   name: ::String,
                                   value: ::String,
                                   dimension_value_type: ("VARCHAR")?
                                 },
                               ]?,
                               measure_name: ::String?,
                               measure_value: ::String?,
                               measure_value_type: ("DOUBLE" | "BIGINT" | "VARCHAR" | "BOOLEAN" | "TIMESTAMP" | "MULTI")?,
                               time: ::String?,
                               time_unit: ("MILLISECONDS" | "SECONDS" | "MICROSECONDS" | "NANOSECONDS")?,
                               version: ::Integer?,
                               measure_values: Array[
                                 {
                                   name: ::String,
                                   value: ::String,
                                   type: ("DOUBLE" | "BIGINT" | "VARCHAR" | "BOOLEAN" | "TIMESTAMP" | "MULTI")
                                 },
                               ]?
                             },
                           ]
                         ) -> _WriteRecordsResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _WriteRecordsResponseSuccess
    end
  end
end

