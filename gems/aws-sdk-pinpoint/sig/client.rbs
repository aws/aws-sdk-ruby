# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module Pinpoint
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CreateAppResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateAppResponse]
        def application_response: () -> Types::ApplicationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_app-instance_method
      def create_app: (
                        create_application_request: {
                          name: ::String,
                          tags: Hash[::String, ::String]?
                        }
                      ) -> _CreateAppResponseSuccess
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateAppResponseSuccess

      interface _CreateCampaignResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCampaignResponse]
        def campaign_response: () -> Types::CampaignResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_campaign-instance_method
      def create_campaign: (
                             application_id: ::String,
                             write_campaign_request: {
                               additional_treatments: Array[
                                 {
                                   custom_delivery_configuration: {
                                     delivery_uri: ::String,
                                     endpoint_types: Array[("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")]?
                                   }?,
                                   message_configuration: {
                                     adm_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     apns_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     baidu_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     custom_message: {
                                       data: ::String?
                                     }?,
                                     default_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     email_message: {
                                       body: ::String?,
                                       from_address: ::String?,
                                       html_body: ::String?,
                                       title: ::String?
                                     }?,
                                     gcm_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     sms_message: {
                                       body: ::String?,
                                       message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                       origination_number: ::String?,
                                       sender_id: ::String?,
                                       entity_id: ::String?,
                                       template_id: ::String?
                                     }?,
                                     in_app_message: {
                                       body: ::String?,
                                       content: Array[
                                         {
                                           background_color: ::String?,
                                           body_config: {
                                             alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                             body: ::String,
                                             text_color: ::String
                                           }?,
                                           header_config: {
                                             alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                             header: ::String,
                                             text_color: ::String
                                           }?,
                                           image_url: ::String?,
                                           primary_btn: {
                                             android: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             default_config: {
                                               background_color: ::String?,
                                               border_radius: ::Integer?,
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?,
                                               text: ::String,
                                               text_color: ::String?
                                             }?,
                                             ios: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             web: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?
                                           }?,
                                           secondary_btn: {
                                             android: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             default_config: {
                                               background_color: ::String?,
                                               border_radius: ::Integer?,
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?,
                                               text: ::String,
                                               text_color: ::String?
                                             }?,
                                             ios: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             web: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?
                                           }?
                                         },
                                       ]?,
                                       custom_config: Hash[::String, ::String]?,
                                       layout: ("BOTTOM_BANNER" | "TOP_BANNER" | "OVERLAYS" | "MOBILE_FEED" | "MIDDLE_BANNER" | "CAROUSEL")?
                                     }?
                                   }?,
                                   schedule: {
                                     end_time: ::String?,
                                     event_filter: {
                                       dimensions: {
                                         attributes: Hash[::String, {
                                             attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                             values: Array[::String]
                                           }]?,
                                         event_type: {
                                           dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                           values: Array[::String]
                                         }?,
                                         metrics: Hash[::String, {
                                             comparison_operator: ::String,
                                             value: ::Float
                                           }]?
                                       },
                                       filter_type: ("SYSTEM" | "ENDPOINT")
                                     }?,
                                     frequency: ("ONCE" | "HOURLY" | "DAILY" | "WEEKLY" | "MONTHLY" | "EVENT" | "IN_APP_EVENT")?,
                                     is_local_time: bool?,
                                     quiet_time: {
                                       end: ::String?,
                                       start: ::String?
                                     }?,
                                     start_time: ::String,
                                     timezone: ::String?
                                   }?,
                                   size_percent: ::Integer,
                                   template_configuration: {
                                     email_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     push_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     sms_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     voice_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     in_app_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?
                                   }?,
                                   treatment_description: ::String?,
                                   treatment_name: ::String?
                                 },
                               ]?,
                               custom_delivery_configuration: {
                                 delivery_uri: ::String,
                                 endpoint_types: Array[("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")]?
                               }?,
                               description: ::String?,
                               holdout_percent: ::Integer?,
                               hook: {
                                 lambda_function_name: ::String?,
                                 mode: ("DELIVERY" | "FILTER")?,
                                 web_url: ::String?
                               }?,
                               is_paused: bool?,
                               limits: {
                                 daily: ::Integer?,
                                 maximum_duration: ::Integer?,
                                 messages_per_second: ::Integer?,
                                 total: ::Integer?,
                                 session: ::Integer?
                               }?,
                               message_configuration: {
                                 adm_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 apns_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 baidu_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 custom_message: {
                                   data: ::String?
                                 }?,
                                 default_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 email_message: {
                                   body: ::String?,
                                   from_address: ::String?,
                                   html_body: ::String?,
                                   title: ::String?
                                 }?,
                                 gcm_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 sms_message: {
                                   body: ::String?,
                                   message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                   origination_number: ::String?,
                                   sender_id: ::String?,
                                   entity_id: ::String?,
                                   template_id: ::String?
                                 }?,
                                 in_app_message: {
                                   body: ::String?,
                                   content: Array[
                                     {
                                       background_color: ::String?,
                                       body_config: {
                                         alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                         body: ::String,
                                         text_color: ::String
                                       }?,
                                       header_config: {
                                         alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                         header: ::String,
                                         text_color: ::String
                                       }?,
                                       image_url: ::String?,
                                       primary_btn: {
                                         android: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         default_config: {
                                           background_color: ::String?,
                                           border_radius: ::Integer?,
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?,
                                           text: ::String,
                                           text_color: ::String?
                                         }?,
                                         ios: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         web: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?
                                       }?,
                                       secondary_btn: {
                                         android: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         default_config: {
                                           background_color: ::String?,
                                           border_radius: ::Integer?,
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?,
                                           text: ::String,
                                           text_color: ::String?
                                         }?,
                                         ios: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         web: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?
                                       }?
                                     },
                                   ]?,
                                   custom_config: Hash[::String, ::String]?,
                                   layout: ("BOTTOM_BANNER" | "TOP_BANNER" | "OVERLAYS" | "MOBILE_FEED" | "MIDDLE_BANNER" | "CAROUSEL")?
                                 }?
                               }?,
                               name: ::String?,
                               schedule: {
                                 end_time: ::String?,
                                 event_filter: {
                                   dimensions: {
                                     attributes: Hash[::String, {
                                         attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                         values: Array[::String]
                                       }]?,
                                     event_type: {
                                       dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                       values: Array[::String]
                                     }?,
                                     metrics: Hash[::String, {
                                         comparison_operator: ::String,
                                         value: ::Float
                                       }]?
                                   },
                                   filter_type: ("SYSTEM" | "ENDPOINT")
                                 }?,
                                 frequency: ("ONCE" | "HOURLY" | "DAILY" | "WEEKLY" | "MONTHLY" | "EVENT" | "IN_APP_EVENT")?,
                                 is_local_time: bool?,
                                 quiet_time: {
                                   end: ::String?,
                                   start: ::String?
                                 }?,
                                 start_time: ::String,
                                 timezone: ::String?
                               }?,
                               segment_id: ::String?,
                               segment_version: ::Integer?,
                               tags: Hash[::String, ::String]?,
                               template_configuration: {
                                 email_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 push_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 sms_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 voice_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 in_app_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?
                               }?,
                               treatment_description: ::String?,
                               treatment_name: ::String?,
                               priority: ::Integer?
                             }
                           ) -> _CreateCampaignResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCampaignResponseSuccess

      interface _CreateEmailTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateEmailTemplateResponse]
        def create_template_message_body: () -> Types::CreateTemplateMessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_email_template-instance_method
      def create_email_template: (
                                   email_template_request: {
                                     default_substitutions: ::String?,
                                     html_part: ::String?,
                                     recommender_id: ::String?,
                                     subject: ::String?,
                                     tags: Hash[::String, ::String]?,
                                     template_description: ::String?,
                                     text_part: ::String?
                                   },
                                   template_name: ::String
                                 ) -> _CreateEmailTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateEmailTemplateResponseSuccess

      interface _CreateExportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateExportJobResponse]
        def export_job_response: () -> Types::ExportJobResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_export_job-instance_method
      def create_export_job: (
                               application_id: ::String,
                               export_job_request: {
                                 role_arn: ::String,
                                 s3_url_prefix: ::String,
                                 segment_id: ::String?,
                                 segment_version: ::Integer?
                               }
                             ) -> _CreateExportJobResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateExportJobResponseSuccess

      interface _CreateImportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateImportJobResponse]
        def import_job_response: () -> Types::ImportJobResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_import_job-instance_method
      def create_import_job: (
                               application_id: ::String,
                               import_job_request: {
                                 define_segment: bool?,
                                 external_id: ::String?,
                                 format: ("CSV" | "JSON"),
                                 register_endpoints: bool?,
                                 role_arn: ::String,
                                 s3_url: ::String,
                                 segment_id: ::String?,
                                 segment_name: ::String?
                               }
                             ) -> _CreateImportJobResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateImportJobResponseSuccess

      interface _CreateInAppTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInAppTemplateResponse]
        def template_create_message_body: () -> Types::TemplateCreateMessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_in_app_template-instance_method
      def create_in_app_template: (
                                    in_app_template_request: {
                                      content: Array[
                                        {
                                          background_color: ::String?,
                                          body_config: {
                                            alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                            body: ::String,
                                            text_color: ::String
                                          }?,
                                          header_config: {
                                            alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                            header: ::String,
                                            text_color: ::String
                                          }?,
                                          image_url: ::String?,
                                          primary_btn: {
                                            android: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            default_config: {
                                              background_color: ::String?,
                                              border_radius: ::Integer?,
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?,
                                              text: ::String,
                                              text_color: ::String?
                                            }?,
                                            ios: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            web: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?
                                          }?,
                                          secondary_btn: {
                                            android: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            default_config: {
                                              background_color: ::String?,
                                              border_radius: ::Integer?,
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?,
                                              text: ::String,
                                              text_color: ::String?
                                            }?,
                                            ios: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            web: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?
                                          }?
                                        },
                                      ]?,
                                      custom_config: Hash[::String, ::String]?,
                                      layout: ("BOTTOM_BANNER" | "TOP_BANNER" | "OVERLAYS" | "MOBILE_FEED" | "MIDDLE_BANNER" | "CAROUSEL")?,
                                      tags: Hash[::String, ::String]?,
                                      template_description: ::String?
                                    },
                                    template_name: ::String
                                  ) -> _CreateInAppTemplateResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInAppTemplateResponseSuccess

      interface _CreateJourneyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateJourneyResponse]
        def journey_response: () -> Types::JourneyResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_journey-instance_method
      def create_journey: (
                            application_id: ::String,
                            write_journey_request: {
                              activities: Hash[::String, {
                                  custom: {
                                    delivery_uri: ::String?,
                                    endpoint_types: Array[("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")]?,
                                    message_config: {
                                      data: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  conditional_split: {
                                    condition: {
                                      conditions: Array[
                                        {
                                          event_condition: {
                                            dimensions: {
                                              attributes: Hash[::String, {
                                                  attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                  values: Array[::String]
                                                }]?,
                                              event_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              metrics: Hash[::String, {
                                                  comparison_operator: ::String,
                                                  value: ::Float
                                                }]?
                                            }?,
                                            message_activity: ::String?
                                          }?,
                                          segment_condition: {
                                            segment_id: ::String
                                          }?,
                                          segment_dimensions: {
                                            attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?,
                                            behavior: {
                                              recency: {
                                                duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                                recency_type: ("ACTIVE" | "INACTIVE")
                                              }?
                                            }?,
                                            demographic: {
                                              app_version: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              channel: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              device_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              make: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              model: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              platform: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?
                                            }?,
                                            location: {
                                              country: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              gps_point: {
                                                coordinates: {
                                                  latitude: ::Float,
                                                  longitude: ::Float
                                                },
                                                range_in_kilometers: ::Float?
                                              }?
                                            }?,
                                            metrics: Hash[::String, {
                                                comparison_operator: ::String,
                                                value: ::Float
                                              }]?,
                                            user_attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?
                                          }?
                                        },
                                      ]?,
                                      operator: ("ALL" | "ANY")?
                                    }?,
                                    evaluation_wait_time: {
                                      wait_for: ::String?,
                                      wait_until: ::String?
                                    }?,
                                    false_activity: ::String?,
                                    true_activity: ::String?
                                  }?,
                                  description: ::String?,
                                  email: {
                                    message_config: {
                                      from_address: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  holdout: {
                                    next_activity: ::String?,
                                    percentage: ::Integer
                                  }?,
                                  multi_condition: {
                                    branches: Array[
                                      {
                                        condition: {
                                          event_condition: {
                                            dimensions: {
                                              attributes: Hash[::String, {
                                                  attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                  values: Array[::String]
                                                }]?,
                                              event_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              metrics: Hash[::String, {
                                                  comparison_operator: ::String,
                                                  value: ::Float
                                                }]?
                                            }?,
                                            message_activity: ::String?
                                          }?,
                                          segment_condition: {
                                            segment_id: ::String
                                          }?,
                                          segment_dimensions: {
                                            attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?,
                                            behavior: {
                                              recency: {
                                                duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                                recency_type: ("ACTIVE" | "INACTIVE")
                                              }?
                                            }?,
                                            demographic: {
                                              app_version: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              channel: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              device_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              make: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              model: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              platform: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?
                                            }?,
                                            location: {
                                              country: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              gps_point: {
                                                coordinates: {
                                                  latitude: ::Float,
                                                  longitude: ::Float
                                                },
                                                range_in_kilometers: ::Float?
                                              }?
                                            }?,
                                            metrics: Hash[::String, {
                                                comparison_operator: ::String,
                                                value: ::Float
                                              }]?,
                                            user_attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?
                                          }?
                                        }?,
                                        next_activity: ::String?
                                      },
                                    ]?,
                                    default_activity: ::String?,
                                    evaluation_wait_time: {
                                      wait_for: ::String?,
                                      wait_until: ::String?
                                    }?
                                  }?,
                                  push: {
                                    message_config: {
                                      time_to_live: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  random_split: {
                                    branches: Array[
                                      {
                                        next_activity: ::String?,
                                        percentage: ::Integer?
                                      },
                                    ]?
                                  }?,
                                  sms: {
                                    message_config: {
                                      message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                      origination_number: ::String?,
                                      sender_id: ::String?,
                                      entity_id: ::String?,
                                      template_id: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  wait: {
                                    next_activity: ::String?,
                                    wait_time: {
                                      wait_for: ::String?,
                                      wait_until: ::String?
                                    }?
                                  }?,
                                  contact_center: {
                                    next_activity: ::String?
                                  }?
                                }]?,
                              creation_date: ::String?,
                              last_modified_date: ::String?,
                              limits: {
                                daily_cap: ::Integer?,
                                endpoint_reentry_cap: ::Integer?,
                                messages_per_second: ::Integer?,
                                endpoint_reentry_interval: ::String?,
                                timeframe_cap: {
                                  cap: ::Integer?,
                                  days: ::Integer?
                                }?,
                                total_cap: ::Integer?
                              }?,
                              local_time: bool?,
                              name: ::String,
                              quiet_time: {
                                end: ::String?,
                                start: ::String?
                              }?,
                              refresh_frequency: ::String?,
                              schedule: {
                                end_time: ::Time?,
                                start_time: ::Time?,
                                timezone: ::String?
                              }?,
                              start_activity: ::String?,
                              start_condition: {
                                description: ::String?,
                                event_start_condition: {
                                  event_filter: {
                                    dimensions: {
                                      attributes: Hash[::String, {
                                          attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                          values: Array[::String]
                                        }]?,
                                      event_type: {
                                        dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                        values: Array[::String]
                                      }?,
                                      metrics: Hash[::String, {
                                          comparison_operator: ::String,
                                          value: ::Float
                                        }]?
                                    },
                                    filter_type: ("SYSTEM" | "ENDPOINT")
                                  }?,
                                  segment_id: ::String?
                                }?,
                                segment_start_condition: {
                                  segment_id: ::String
                                }?
                              }?,
                              state: ("DRAFT" | "ACTIVE" | "COMPLETED" | "CANCELLED" | "CLOSED" | "PAUSED")?,
                              wait_for_quiet_time: bool?,
                              refresh_on_segment_update: bool?,
                              journey_channel_settings: {
                                connect_campaign_arn: ::String?,
                                connect_campaign_execution_role_arn: ::String?
                              }?,
                              sending_schedule: bool?,
                              open_hours: {
                                email: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                sms: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                push: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                voice: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                custom: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?
                              }?,
                              closed_days: {
                                email: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                sms: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                push: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                voice: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                custom: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?
                              }?,
                              timezone_estimation_methods: Array[("PHONE_NUMBER" | "POSTAL_CODE")]?
                            }
                          ) -> _CreateJourneyResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateJourneyResponseSuccess

      interface _CreatePushTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreatePushTemplateResponse]
        def create_template_message_body: () -> Types::CreateTemplateMessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_push_template-instance_method
      def create_push_template: (
                                  push_notification_template_request: {
                                    adm: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      image_icon_url: ::String?,
                                      image_url: ::String?,
                                      raw_content: ::String?,
                                      small_image_icon_url: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    apns: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      media_url: ::String?,
                                      raw_content: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    baidu: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      image_icon_url: ::String?,
                                      image_url: ::String?,
                                      raw_content: ::String?,
                                      small_image_icon_url: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    default: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    default_substitutions: ::String?,
                                    gcm: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      image_icon_url: ::String?,
                                      image_url: ::String?,
                                      raw_content: ::String?,
                                      small_image_icon_url: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    recommender_id: ::String?,
                                    tags: Hash[::String, ::String]?,
                                    template_description: ::String?
                                  },
                                  template_name: ::String
                                ) -> _CreatePushTemplateResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreatePushTemplateResponseSuccess

      interface _CreateRecommenderConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRecommenderConfigurationResponse]
        def recommender_configuration_response: () -> Types::RecommenderConfigurationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_recommender_configuration-instance_method
      def create_recommender_configuration: (
                                              create_recommender_configuration: {
                                                attributes: Hash[::String, ::String]?,
                                                description: ::String?,
                                                name: ::String?,
                                                recommendation_provider_id_type: ::String?,
                                                recommendation_provider_role_arn: ::String,
                                                recommendation_provider_uri: ::String,
                                                recommendation_transformer_uri: ::String?,
                                                recommendations_display_name: ::String?,
                                                recommendations_per_message: ::Integer?
                                              }
                                            ) -> _CreateRecommenderConfigurationResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRecommenderConfigurationResponseSuccess

      interface _CreateSegmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSegmentResponse]
        def segment_response: () -> Types::SegmentResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_segment-instance_method
      def create_segment: (
                            application_id: ::String,
                            write_segment_request: {
                              dimensions: {
                                attributes: Hash[::String, {
                                    attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                    values: Array[::String]
                                  }]?,
                                behavior: {
                                  recency: {
                                    duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                    recency_type: ("ACTIVE" | "INACTIVE")
                                  }?
                                }?,
                                demographic: {
                                  app_version: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  channel: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  device_type: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  make: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  model: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  platform: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?
                                }?,
                                location: {
                                  country: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  gps_point: {
                                    coordinates: {
                                      latitude: ::Float,
                                      longitude: ::Float
                                    },
                                    range_in_kilometers: ::Float?
                                  }?
                                }?,
                                metrics: Hash[::String, {
                                    comparison_operator: ::String,
                                    value: ::Float
                                  }]?,
                                user_attributes: Hash[::String, {
                                    attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                    values: Array[::String]
                                  }]?
                              }?,
                              name: ::String?,
                              segment_groups: {
                                groups: Array[
                                  {
                                    dimensions: Array[
                                      {
                                        attributes: Hash[::String, {
                                            attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                            values: Array[::String]
                                          }]?,
                                        behavior: {
                                          recency: {
                                            duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                            recency_type: ("ACTIVE" | "INACTIVE")
                                          }?
                                        }?,
                                        demographic: {
                                          app_version: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          channel: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          device_type: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          make: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          model: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          platform: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?
                                        }?,
                                        location: {
                                          country: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          gps_point: {
                                            coordinates: {
                                              latitude: ::Float,
                                              longitude: ::Float
                                            },
                                            range_in_kilometers: ::Float?
                                          }?
                                        }?,
                                        metrics: Hash[::String, {
                                            comparison_operator: ::String,
                                            value: ::Float
                                          }]?,
                                        user_attributes: Hash[::String, {
                                            attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                            values: Array[::String]
                                          }]?
                                      },
                                    ]?,
                                    source_segments: Array[
                                      {
                                        id: ::String,
                                        version: ::Integer?
                                      },
                                    ]?,
                                    source_type: ("ALL" | "ANY" | "NONE")?,
                                    type: ("ALL" | "ANY" | "NONE")?
                                  },
                                ]?,
                                include: ("ALL" | "ANY" | "NONE")?
                              }?,
                              tags: Hash[::String, ::String]?
                            }
                          ) -> _CreateSegmentResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSegmentResponseSuccess

      interface _CreateSmsTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSmsTemplateResponse]
        def create_template_message_body: () -> Types::CreateTemplateMessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_sms_template-instance_method
      def create_sms_template: (
                                 sms_template_request: {
                                   body: ::String?,
                                   default_substitutions: ::String?,
                                   recommender_id: ::String?,
                                   tags: Hash[::String, ::String]?,
                                   template_description: ::String?
                                 },
                                 template_name: ::String
                               ) -> _CreateSmsTemplateResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSmsTemplateResponseSuccess

      interface _CreateVoiceTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVoiceTemplateResponse]
        def create_template_message_body: () -> Types::CreateTemplateMessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#create_voice_template-instance_method
      def create_voice_template: (
                                   template_name: ::String,
                                   voice_template_request: {
                                     body: ::String?,
                                     default_substitutions: ::String?,
                                     language_code: ::String?,
                                     tags: Hash[::String, ::String]?,
                                     template_description: ::String?,
                                     voice_id: ::String?
                                   }
                                 ) -> _CreateVoiceTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVoiceTemplateResponseSuccess

      interface _DeleteAdmChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteAdmChannelResponse]
        def adm_channel_response: () -> Types::ADMChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_adm_channel-instance_method
      def delete_adm_channel: (
                                application_id: ::String
                              ) -> _DeleteAdmChannelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteAdmChannelResponseSuccess

      interface _DeleteApnsChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteApnsChannelResponse]
        def apns_channel_response: () -> Types::APNSChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_apns_channel-instance_method
      def delete_apns_channel: (
                                 application_id: ::String
                               ) -> _DeleteApnsChannelResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteApnsChannelResponseSuccess

      interface _DeleteApnsSandboxChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteApnsSandboxChannelResponse]
        def apns_sandbox_channel_response: () -> Types::APNSSandboxChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_apns_sandbox_channel-instance_method
      def delete_apns_sandbox_channel: (
                                         application_id: ::String
                                       ) -> _DeleteApnsSandboxChannelResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteApnsSandboxChannelResponseSuccess

      interface _DeleteApnsVoipChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteApnsVoipChannelResponse]
        def apns_voip_channel_response: () -> Types::APNSVoipChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_apns_voip_channel-instance_method
      def delete_apns_voip_channel: (
                                      application_id: ::String
                                    ) -> _DeleteApnsVoipChannelResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteApnsVoipChannelResponseSuccess

      interface _DeleteApnsVoipSandboxChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteApnsVoipSandboxChannelResponse]
        def apns_voip_sandbox_channel_response: () -> Types::APNSVoipSandboxChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_apns_voip_sandbox_channel-instance_method
      def delete_apns_voip_sandbox_channel: (
                                              application_id: ::String
                                            ) -> _DeleteApnsVoipSandboxChannelResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteApnsVoipSandboxChannelResponseSuccess

      interface _DeleteAppResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteAppResponse]
        def application_response: () -> Types::ApplicationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_app-instance_method
      def delete_app: (
                        application_id: ::String
                      ) -> _DeleteAppResponseSuccess
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteAppResponseSuccess

      interface _DeleteBaiduChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteBaiduChannelResponse]
        def baidu_channel_response: () -> Types::BaiduChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_baidu_channel-instance_method
      def delete_baidu_channel: (
                                  application_id: ::String
                                ) -> _DeleteBaiduChannelResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteBaiduChannelResponseSuccess

      interface _DeleteCampaignResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteCampaignResponse]
        def campaign_response: () -> Types::CampaignResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_campaign-instance_method
      def delete_campaign: (
                             application_id: ::String,
                             campaign_id: ::String
                           ) -> _DeleteCampaignResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteCampaignResponseSuccess

      interface _DeleteEmailChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEmailChannelResponse]
        def email_channel_response: () -> Types::EmailChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_email_channel-instance_method
      def delete_email_channel: (
                                  application_id: ::String
                                ) -> _DeleteEmailChannelResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEmailChannelResponseSuccess

      interface _DeleteEmailTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEmailTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_email_template-instance_method
      def delete_email_template: (
                                   template_name: ::String,
                                   ?version: ::String
                                 ) -> _DeleteEmailTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEmailTemplateResponseSuccess

      interface _DeleteEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEndpointResponse]
        def endpoint_response: () -> Types::EndpointResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_endpoint-instance_method
      def delete_endpoint: (
                             application_id: ::String,
                             endpoint_id: ::String
                           ) -> _DeleteEndpointResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEndpointResponseSuccess

      interface _DeleteEventStreamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEventStreamResponse]
        def event_stream: () -> Types::EventStream
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_event_stream-instance_method
      def delete_event_stream: (
                                 application_id: ::String
                               ) -> _DeleteEventStreamResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEventStreamResponseSuccess

      interface _DeleteGcmChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteGcmChannelResponse]
        def gcm_channel_response: () -> Types::GCMChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_gcm_channel-instance_method
      def delete_gcm_channel: (
                                application_id: ::String
                              ) -> _DeleteGcmChannelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteGcmChannelResponseSuccess

      interface _DeleteInAppTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteInAppTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_in_app_template-instance_method
      def delete_in_app_template: (
                                    template_name: ::String,
                                    ?version: ::String
                                  ) -> _DeleteInAppTemplateResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteInAppTemplateResponseSuccess

      interface _DeleteJourneyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteJourneyResponse]
        def journey_response: () -> Types::JourneyResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_journey-instance_method
      def delete_journey: (
                            application_id: ::String,
                            journey_id: ::String
                          ) -> _DeleteJourneyResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteJourneyResponseSuccess

      interface _DeletePushTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeletePushTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_push_template-instance_method
      def delete_push_template: (
                                  template_name: ::String,
                                  ?version: ::String
                                ) -> _DeletePushTemplateResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeletePushTemplateResponseSuccess

      interface _DeleteRecommenderConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteRecommenderConfigurationResponse]
        def recommender_configuration_response: () -> Types::RecommenderConfigurationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_recommender_configuration-instance_method
      def delete_recommender_configuration: (
                                              recommender_id: ::String
                                            ) -> _DeleteRecommenderConfigurationResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteRecommenderConfigurationResponseSuccess

      interface _DeleteSegmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteSegmentResponse]
        def segment_response: () -> Types::SegmentResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_segment-instance_method
      def delete_segment: (
                            application_id: ::String,
                            segment_id: ::String
                          ) -> _DeleteSegmentResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteSegmentResponseSuccess

      interface _DeleteSmsChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteSmsChannelResponse]
        def sms_channel_response: () -> Types::SMSChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_sms_channel-instance_method
      def delete_sms_channel: (
                                application_id: ::String
                              ) -> _DeleteSmsChannelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteSmsChannelResponseSuccess

      interface _DeleteSmsTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteSmsTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_sms_template-instance_method
      def delete_sms_template: (
                                 template_name: ::String,
                                 ?version: ::String
                               ) -> _DeleteSmsTemplateResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteSmsTemplateResponseSuccess

      interface _DeleteUserEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteUserEndpointsResponse]
        def endpoints_response: () -> Types::EndpointsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_user_endpoints-instance_method
      def delete_user_endpoints: (
                                   application_id: ::String,
                                   user_id: ::String
                                 ) -> _DeleteUserEndpointsResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteUserEndpointsResponseSuccess

      interface _DeleteVoiceChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVoiceChannelResponse]
        def voice_channel_response: () -> Types::VoiceChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_voice_channel-instance_method
      def delete_voice_channel: (
                                  application_id: ::String
                                ) -> _DeleteVoiceChannelResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVoiceChannelResponseSuccess

      interface _DeleteVoiceTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVoiceTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#delete_voice_template-instance_method
      def delete_voice_template: (
                                   template_name: ::String,
                                   ?version: ::String
                                 ) -> _DeleteVoiceTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVoiceTemplateResponseSuccess

      interface _GetAdmChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAdmChannelResponse]
        def adm_channel_response: () -> Types::ADMChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_adm_channel-instance_method
      def get_adm_channel: (
                             application_id: ::String
                           ) -> _GetAdmChannelResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAdmChannelResponseSuccess

      interface _GetApnsChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApnsChannelResponse]
        def apns_channel_response: () -> Types::APNSChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_apns_channel-instance_method
      def get_apns_channel: (
                              application_id: ::String
                            ) -> _GetApnsChannelResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApnsChannelResponseSuccess

      interface _GetApnsSandboxChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApnsSandboxChannelResponse]
        def apns_sandbox_channel_response: () -> Types::APNSSandboxChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_apns_sandbox_channel-instance_method
      def get_apns_sandbox_channel: (
                                      application_id: ::String
                                    ) -> _GetApnsSandboxChannelResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApnsSandboxChannelResponseSuccess

      interface _GetApnsVoipChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApnsVoipChannelResponse]
        def apns_voip_channel_response: () -> Types::APNSVoipChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_apns_voip_channel-instance_method
      def get_apns_voip_channel: (
                                   application_id: ::String
                                 ) -> _GetApnsVoipChannelResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApnsVoipChannelResponseSuccess

      interface _GetApnsVoipSandboxChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApnsVoipSandboxChannelResponse]
        def apns_voip_sandbox_channel_response: () -> Types::APNSVoipSandboxChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_apns_voip_sandbox_channel-instance_method
      def get_apns_voip_sandbox_channel: (
                                           application_id: ::String
                                         ) -> _GetApnsVoipSandboxChannelResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApnsVoipSandboxChannelResponseSuccess

      interface _GetAppResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAppResponse]
        def application_response: () -> Types::ApplicationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_app-instance_method
      def get_app: (
                     application_id: ::String
                   ) -> _GetAppResponseSuccess
                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAppResponseSuccess

      interface _GetApplicationDateRangeKpiResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApplicationDateRangeKpiResponse]
        def application_date_range_kpi_response: () -> Types::ApplicationDateRangeKpiResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_application_date_range_kpi-instance_method
      def get_application_date_range_kpi: (
                                            application_id: ::String,
                                            ?end_time: ::Time,
                                            kpi_name: ::String,
                                            ?next_token: ::String,
                                            ?page_size: ::String,
                                            ?start_time: ::Time
                                          ) -> _GetApplicationDateRangeKpiResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApplicationDateRangeKpiResponseSuccess

      interface _GetApplicationSettingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApplicationSettingsResponse]
        def application_settings_resource: () -> Types::ApplicationSettingsResource
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_application_settings-instance_method
      def get_application_settings: (
                                      application_id: ::String
                                    ) -> _GetApplicationSettingsResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApplicationSettingsResponseSuccess

      interface _GetAppsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAppsResponse]
        def applications_response: () -> Types::ApplicationsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_apps-instance_method
      def get_apps: (
                      ?page_size: ::String,
                      ?token: ::String
                    ) -> _GetAppsResponseSuccess
                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAppsResponseSuccess

      interface _GetBaiduChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetBaiduChannelResponse]
        def baidu_channel_response: () -> Types::BaiduChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_baidu_channel-instance_method
      def get_baidu_channel: (
                               application_id: ::String
                             ) -> _GetBaiduChannelResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetBaiduChannelResponseSuccess

      interface _GetCampaignResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCampaignResponse]
        def campaign_response: () -> Types::CampaignResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_campaign-instance_method
      def get_campaign: (
                          application_id: ::String,
                          campaign_id: ::String
                        ) -> _GetCampaignResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCampaignResponseSuccess

      interface _GetCampaignActivitiesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCampaignActivitiesResponse]
        def activities_response: () -> Types::ActivitiesResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_campaign_activities-instance_method
      def get_campaign_activities: (
                                     application_id: ::String,
                                     campaign_id: ::String,
                                     ?page_size: ::String,
                                     ?token: ::String
                                   ) -> _GetCampaignActivitiesResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCampaignActivitiesResponseSuccess

      interface _GetCampaignDateRangeKpiResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCampaignDateRangeKpiResponse]
        def campaign_date_range_kpi_response: () -> Types::CampaignDateRangeKpiResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_campaign_date_range_kpi-instance_method
      def get_campaign_date_range_kpi: (
                                         application_id: ::String,
                                         campaign_id: ::String,
                                         ?end_time: ::Time,
                                         kpi_name: ::String,
                                         ?next_token: ::String,
                                         ?page_size: ::String,
                                         ?start_time: ::Time
                                       ) -> _GetCampaignDateRangeKpiResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCampaignDateRangeKpiResponseSuccess

      interface _GetCampaignVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCampaignVersionResponse]
        def campaign_response: () -> Types::CampaignResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_campaign_version-instance_method
      def get_campaign_version: (
                                  application_id: ::String,
                                  campaign_id: ::String,
                                  version: ::String
                                ) -> _GetCampaignVersionResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCampaignVersionResponseSuccess

      interface _GetCampaignVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCampaignVersionsResponse]
        def campaigns_response: () -> Types::CampaignsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_campaign_versions-instance_method
      def get_campaign_versions: (
                                   application_id: ::String,
                                   campaign_id: ::String,
                                   ?page_size: ::String,
                                   ?token: ::String
                                 ) -> _GetCampaignVersionsResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCampaignVersionsResponseSuccess

      interface _GetCampaignsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCampaignsResponse]
        def campaigns_response: () -> Types::CampaignsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_campaigns-instance_method
      def get_campaigns: (
                           application_id: ::String,
                           ?page_size: ::String,
                           ?token: ::String
                         ) -> _GetCampaignsResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCampaignsResponseSuccess

      interface _GetChannelsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetChannelsResponse]
        def channels_response: () -> Types::ChannelsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_channels-instance_method
      def get_channels: (
                          application_id: ::String
                        ) -> _GetChannelsResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetChannelsResponseSuccess

      interface _GetEmailChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEmailChannelResponse]
        def email_channel_response: () -> Types::EmailChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_email_channel-instance_method
      def get_email_channel: (
                               application_id: ::String
                             ) -> _GetEmailChannelResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEmailChannelResponseSuccess

      interface _GetEmailTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEmailTemplateResponse]
        def email_template_response: () -> Types::EmailTemplateResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_email_template-instance_method
      def get_email_template: (
                                template_name: ::String,
                                ?version: ::String
                              ) -> _GetEmailTemplateResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEmailTemplateResponseSuccess

      interface _GetEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEndpointResponse]
        def endpoint_response: () -> Types::EndpointResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_endpoint-instance_method
      def get_endpoint: (
                          application_id: ::String,
                          endpoint_id: ::String
                        ) -> _GetEndpointResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEndpointResponseSuccess

      interface _GetEventStreamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEventStreamResponse]
        def event_stream: () -> Types::EventStream
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_event_stream-instance_method
      def get_event_stream: (
                              application_id: ::String
                            ) -> _GetEventStreamResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEventStreamResponseSuccess

      interface _GetExportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetExportJobResponse]
        def export_job_response: () -> Types::ExportJobResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_export_job-instance_method
      def get_export_job: (
                            application_id: ::String,
                            job_id: ::String
                          ) -> _GetExportJobResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetExportJobResponseSuccess

      interface _GetExportJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetExportJobsResponse]
        def export_jobs_response: () -> Types::ExportJobsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_export_jobs-instance_method
      def get_export_jobs: (
                             application_id: ::String,
                             ?page_size: ::String,
                             ?token: ::String
                           ) -> _GetExportJobsResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetExportJobsResponseSuccess

      interface _GetGcmChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetGcmChannelResponse]
        def gcm_channel_response: () -> Types::GCMChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_gcm_channel-instance_method
      def get_gcm_channel: (
                             application_id: ::String
                           ) -> _GetGcmChannelResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetGcmChannelResponseSuccess

      interface _GetImportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetImportJobResponse]
        def import_job_response: () -> Types::ImportJobResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_import_job-instance_method
      def get_import_job: (
                            application_id: ::String,
                            job_id: ::String
                          ) -> _GetImportJobResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetImportJobResponseSuccess

      interface _GetImportJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetImportJobsResponse]
        def import_jobs_response: () -> Types::ImportJobsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_import_jobs-instance_method
      def get_import_jobs: (
                             application_id: ::String,
                             ?page_size: ::String,
                             ?token: ::String
                           ) -> _GetImportJobsResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetImportJobsResponseSuccess

      interface _GetInAppMessagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetInAppMessagesResponse]
        def in_app_messages_response: () -> Types::InAppMessagesResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_in_app_messages-instance_method
      def get_in_app_messages: (
                                 application_id: ::String,
                                 endpoint_id: ::String
                               ) -> _GetInAppMessagesResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetInAppMessagesResponseSuccess

      interface _GetInAppTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetInAppTemplateResponse]
        def in_app_template_response: () -> Types::InAppTemplateResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_in_app_template-instance_method
      def get_in_app_template: (
                                 template_name: ::String,
                                 ?version: ::String
                               ) -> _GetInAppTemplateResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetInAppTemplateResponseSuccess

      interface _GetJourneyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyResponse]
        def journey_response: () -> Types::JourneyResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey-instance_method
      def get_journey: (
                         application_id: ::String,
                         journey_id: ::String
                       ) -> _GetJourneyResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyResponseSuccess

      interface _GetJourneyDateRangeKpiResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyDateRangeKpiResponse]
        def journey_date_range_kpi_response: () -> Types::JourneyDateRangeKpiResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey_date_range_kpi-instance_method
      def get_journey_date_range_kpi: (
                                        application_id: ::String,
                                        ?end_time: ::Time,
                                        journey_id: ::String,
                                        kpi_name: ::String,
                                        ?next_token: ::String,
                                        ?page_size: ::String,
                                        ?start_time: ::Time
                                      ) -> _GetJourneyDateRangeKpiResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyDateRangeKpiResponseSuccess

      interface _GetJourneyExecutionActivityMetricsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyExecutionActivityMetricsResponse]
        def journey_execution_activity_metrics_response: () -> Types::JourneyExecutionActivityMetricsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey_execution_activity_metrics-instance_method
      def get_journey_execution_activity_metrics: (
                                                    application_id: ::String,
                                                    journey_activity_id: ::String,
                                                    journey_id: ::String,
                                                    ?next_token: ::String,
                                                    ?page_size: ::String
                                                  ) -> _GetJourneyExecutionActivityMetricsResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyExecutionActivityMetricsResponseSuccess

      interface _GetJourneyExecutionMetricsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyExecutionMetricsResponse]
        def journey_execution_metrics_response: () -> Types::JourneyExecutionMetricsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey_execution_metrics-instance_method
      def get_journey_execution_metrics: (
                                           application_id: ::String,
                                           journey_id: ::String,
                                           ?next_token: ::String,
                                           ?page_size: ::String
                                         ) -> _GetJourneyExecutionMetricsResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyExecutionMetricsResponseSuccess

      interface _GetJourneyRunExecutionActivityMetricsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyRunExecutionActivityMetricsResponse]
        def journey_run_execution_activity_metrics_response: () -> Types::JourneyRunExecutionActivityMetricsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey_run_execution_activity_metrics-instance_method
      def get_journey_run_execution_activity_metrics: (
                                                        application_id: ::String,
                                                        journey_activity_id: ::String,
                                                        journey_id: ::String,
                                                        ?next_token: ::String,
                                                        ?page_size: ::String,
                                                        run_id: ::String
                                                      ) -> _GetJourneyRunExecutionActivityMetricsResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyRunExecutionActivityMetricsResponseSuccess

      interface _GetJourneyRunExecutionMetricsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyRunExecutionMetricsResponse]
        def journey_run_execution_metrics_response: () -> Types::JourneyRunExecutionMetricsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey_run_execution_metrics-instance_method
      def get_journey_run_execution_metrics: (
                                               application_id: ::String,
                                               journey_id: ::String,
                                               ?next_token: ::String,
                                               ?page_size: ::String,
                                               run_id: ::String
                                             ) -> _GetJourneyRunExecutionMetricsResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyRunExecutionMetricsResponseSuccess

      interface _GetJourneyRunsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetJourneyRunsResponse]
        def journey_runs_response: () -> Types::JourneyRunsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_journey_runs-instance_method
      def get_journey_runs: (
                              application_id: ::String,
                              journey_id: ::String,
                              ?page_size: ::String,
                              ?token: ::String
                            ) -> _GetJourneyRunsResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetJourneyRunsResponseSuccess

      interface _GetPushTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetPushTemplateResponse]
        def push_notification_template_response: () -> Types::PushNotificationTemplateResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_push_template-instance_method
      def get_push_template: (
                               template_name: ::String,
                               ?version: ::String
                             ) -> _GetPushTemplateResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetPushTemplateResponseSuccess

      interface _GetRecommenderConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetRecommenderConfigurationResponse]
        def recommender_configuration_response: () -> Types::RecommenderConfigurationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_recommender_configuration-instance_method
      def get_recommender_configuration: (
                                           recommender_id: ::String
                                         ) -> _GetRecommenderConfigurationResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetRecommenderConfigurationResponseSuccess

      interface _GetRecommenderConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetRecommenderConfigurationsResponse]
        def list_recommender_configurations_response: () -> Types::ListRecommenderConfigurationsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_recommender_configurations-instance_method
      def get_recommender_configurations: (
                                            ?page_size: ::String,
                                            ?token: ::String
                                          ) -> _GetRecommenderConfigurationsResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetRecommenderConfigurationsResponseSuccess

      interface _GetSegmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSegmentResponse]
        def segment_response: () -> Types::SegmentResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_segment-instance_method
      def get_segment: (
                         application_id: ::String,
                         segment_id: ::String
                       ) -> _GetSegmentResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSegmentResponseSuccess

      interface _GetSegmentExportJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSegmentExportJobsResponse]
        def export_jobs_response: () -> Types::ExportJobsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_segment_export_jobs-instance_method
      def get_segment_export_jobs: (
                                     application_id: ::String,
                                     ?page_size: ::String,
                                     segment_id: ::String,
                                     ?token: ::String
                                   ) -> _GetSegmentExportJobsResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSegmentExportJobsResponseSuccess

      interface _GetSegmentImportJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSegmentImportJobsResponse]
        def import_jobs_response: () -> Types::ImportJobsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_segment_import_jobs-instance_method
      def get_segment_import_jobs: (
                                     application_id: ::String,
                                     ?page_size: ::String,
                                     segment_id: ::String,
                                     ?token: ::String
                                   ) -> _GetSegmentImportJobsResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSegmentImportJobsResponseSuccess

      interface _GetSegmentVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSegmentVersionResponse]
        def segment_response: () -> Types::SegmentResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_segment_version-instance_method
      def get_segment_version: (
                                 application_id: ::String,
                                 segment_id: ::String,
                                 version: ::String
                               ) -> _GetSegmentVersionResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSegmentVersionResponseSuccess

      interface _GetSegmentVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSegmentVersionsResponse]
        def segments_response: () -> Types::SegmentsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_segment_versions-instance_method
      def get_segment_versions: (
                                  application_id: ::String,
                                  ?page_size: ::String,
                                  segment_id: ::String,
                                  ?token: ::String
                                ) -> _GetSegmentVersionsResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSegmentVersionsResponseSuccess

      interface _GetSegmentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSegmentsResponse]
        def segments_response: () -> Types::SegmentsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_segments-instance_method
      def get_segments: (
                          application_id: ::String,
                          ?page_size: ::String,
                          ?token: ::String
                        ) -> _GetSegmentsResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSegmentsResponseSuccess

      interface _GetSmsChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSmsChannelResponse]
        def sms_channel_response: () -> Types::SMSChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_sms_channel-instance_method
      def get_sms_channel: (
                             application_id: ::String
                           ) -> _GetSmsChannelResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSmsChannelResponseSuccess

      interface _GetSmsTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSmsTemplateResponse]
        def sms_template_response: () -> Types::SMSTemplateResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_sms_template-instance_method
      def get_sms_template: (
                              template_name: ::String,
                              ?version: ::String
                            ) -> _GetSmsTemplateResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSmsTemplateResponseSuccess

      interface _GetUserEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetUserEndpointsResponse]
        def endpoints_response: () -> Types::EndpointsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_user_endpoints-instance_method
      def get_user_endpoints: (
                                application_id: ::String,
                                user_id: ::String
                              ) -> _GetUserEndpointsResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetUserEndpointsResponseSuccess

      interface _GetVoiceChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVoiceChannelResponse]
        def voice_channel_response: () -> Types::VoiceChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_voice_channel-instance_method
      def get_voice_channel: (
                               application_id: ::String
                             ) -> _GetVoiceChannelResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVoiceChannelResponseSuccess

      interface _GetVoiceTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVoiceTemplateResponse]
        def voice_template_response: () -> Types::VoiceTemplateResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#get_voice_template-instance_method
      def get_voice_template: (
                                template_name: ::String,
                                ?version: ::String
                              ) -> _GetVoiceTemplateResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVoiceTemplateResponseSuccess

      interface _ListJourneysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListJourneysResponse]
        def journeys_response: () -> Types::JourneysResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#list_journeys-instance_method
      def list_journeys: (
                           application_id: ::String,
                           ?page_size: ::String,
                           ?token: ::String
                         ) -> _ListJourneysResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListJourneysResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags_model: () -> Types::TagsModel
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ListTemplateVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTemplateVersionsResponse]
        def template_versions_response: () -> Types::TemplateVersionsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#list_template_versions-instance_method
      def list_template_versions: (
                                    ?next_token: ::String,
                                    ?page_size: ::String,
                                    template_name: ::String,
                                    template_type: ::String
                                  ) -> _ListTemplateVersionsResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTemplateVersionsResponseSuccess

      interface _ListTemplatesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTemplatesResponse]
        def templates_response: () -> Types::TemplatesResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#list_templates-instance_method
      def list_templates: (
                            ?next_token: ::String,
                            ?page_size: ::String,
                            ?prefix: ::String,
                            ?template_type: ::String
                          ) -> _ListTemplatesResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTemplatesResponseSuccess

      interface _PhoneNumberValidateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PhoneNumberValidateResponse]
        def number_validate_response: () -> Types::NumberValidateResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#phone_number_validate-instance_method
      def phone_number_validate: (
                                   number_validate_request: {
                                     iso_country_code: ::String?,
                                     phone_number: ::String?
                                   }
                                 ) -> _PhoneNumberValidateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PhoneNumberValidateResponseSuccess

      interface _PutEventStreamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutEventStreamResponse]
        def event_stream: () -> Types::EventStream
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#put_event_stream-instance_method
      def put_event_stream: (
                              application_id: ::String,
                              write_event_stream: {
                                destination_stream_arn: ::String,
                                role_arn: ::String
                              }
                            ) -> _PutEventStreamResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutEventStreamResponseSuccess

      interface _PutEventsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutEventsResponse]
        def events_response: () -> Types::EventsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#put_events-instance_method
      def put_events: (
                        application_id: ::String,
                        events_request: {
                          batch_item: Hash[::String, {
                              endpoint: {
                                address: ::String?,
                                attributes: Hash[::String, Array[::String]]?,
                                channel_type: ("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")?,
                                demographic: {
                                  app_version: ::String?,
                                  locale: ::String?,
                                  make: ::String?,
                                  model: ::String?,
                                  model_version: ::String?,
                                  platform: ::String?,
                                  platform_version: ::String?,
                                  timezone: ::String?
                                }?,
                                effective_date: ::String?,
                                endpoint_status: ::String?,
                                location: {
                                  city: ::String?,
                                  country: ::String?,
                                  latitude: ::Float?,
                                  longitude: ::Float?,
                                  postal_code: ::String?,
                                  region: ::String?
                                }?,
                                metrics: Hash[::String, ::Float]?,
                                opt_out: ::String?,
                                request_id: ::String?,
                                user: {
                                  user_attributes: Hash[::String, Array[::String]]?,
                                  user_id: ::String?
                                }?
                              },
                              events: Hash[::String, {
                                  app_package_name: ::String?,
                                  app_title: ::String?,
                                  app_version_code: ::String?,
                                  attributes: Hash[::String, ::String]?,
                                  client_sdk_version: ::String?,
                                  event_type: ::String,
                                  metrics: Hash[::String, ::Float]?,
                                  sdk_name: ::String?,
                                  session: {
                                    duration: ::Integer?,
                                    id: ::String,
                                    start_timestamp: ::String,
                                    stop_timestamp: ::String?
                                  }?,
                                  timestamp: ::String
                                }]
                            }]
                        }
                      ) -> _PutEventsResponseSuccess
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutEventsResponseSuccess

      interface _RemoveAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RemoveAttributesResponse]
        def attributes_resource: () -> Types::AttributesResource
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#remove_attributes-instance_method
      def remove_attributes: (
                               application_id: ::String,
                               attribute_type: ::String,
                               update_attributes_request: {
                                 blacklist: Array[::String]?
                               }
                             ) -> _RemoveAttributesResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RemoveAttributesResponseSuccess

      interface _SendMessagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SendMessagesResponse]
        def message_response: () -> Types::MessageResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#send_messages-instance_method
      def send_messages: (
                           application_id: ::String,
                           message_request: {
                             addresses: Hash[::String, {
                                 body_override: ::String?,
                                 channel_type: ("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")?,
                                 context: Hash[::String, ::String]?,
                                 raw_content: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 title_override: ::String?
                               }]?,
                             context: Hash[::String, ::String]?,
                             endpoints: Hash[::String, {
                                 body_override: ::String?,
                                 context: Hash[::String, ::String]?,
                                 raw_content: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 title_override: ::String?
                               }]?,
                             message_configuration: {
                               adm_message: {
                                 action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                 body: ::String?,
                                 consolidation_key: ::String?,
                                 data: Hash[::String, ::String]?,
                                 expires_after: ::String?,
                                 icon_reference: ::String?,
                                 image_icon_url: ::String?,
                                 image_url: ::String?,
                                 md5: ::String?,
                                 raw_content: ::String?,
                                 silent_push: bool?,
                                 small_image_icon_url: ::String?,
                                 sound: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 title: ::String?,
                                 url: ::String?
                               }?,
                               apns_message: {
                                 apns_push_type: ::String?,
                                 action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                 badge: ::Integer?,
                                 body: ::String?,
                                 category: ::String?,
                                 collapse_id: ::String?,
                                 data: Hash[::String, ::String]?,
                                 media_url: ::String?,
                                 preferred_authentication_method: ::String?,
                                 priority: ::String?,
                                 raw_content: ::String?,
                                 silent_push: bool?,
                                 sound: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 thread_id: ::String?,
                                 time_to_live: ::Integer?,
                                 title: ::String?,
                                 url: ::String?
                               }?,
                               baidu_message: {
                                 action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                 body: ::String?,
                                 data: Hash[::String, ::String]?,
                                 icon_reference: ::String?,
                                 image_icon_url: ::String?,
                                 image_url: ::String?,
                                 raw_content: ::String?,
                                 silent_push: bool?,
                                 small_image_icon_url: ::String?,
                                 sound: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 time_to_live: ::Integer?,
                                 title: ::String?,
                                 url: ::String?
                               }?,
                               default_message: {
                                 body: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?
                               }?,
                               default_push_notification_message: {
                                 action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                 body: ::String?,
                                 data: Hash[::String, ::String]?,
                                 silent_push: bool?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 title: ::String?,
                                 url: ::String?
                               }?,
                               email_message: {
                                 body: ::String?,
                                 feedback_forwarding_address: ::String?,
                                 from_address: ::String?,
                                 raw_email: {
                                   data: ::String?
                                 }?,
                                 reply_to_addresses: Array[::String]?,
                                 simple_email: {
                                   html_part: {
                                     charset: ::String?,
                                     data: ::String?
                                   }?,
                                   subject: {
                                     charset: ::String?,
                                     data: ::String?
                                   }?,
                                   text_part: {
                                     charset: ::String?,
                                     data: ::String?
                                   }?
                                 }?,
                                 substitutions: Hash[::String, Array[::String]]?
                               }?,
                               gcm_message: {
                                 action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                 body: ::String?,
                                 collapse_key: ::String?,
                                 data: Hash[::String, ::String]?,
                                 icon_reference: ::String?,
                                 image_icon_url: ::String?,
                                 image_url: ::String?,
                                 preferred_authentication_method: ::String?,
                                 priority: ::String?,
                                 raw_content: ::String?,
                                 restricted_package_name: ::String?,
                                 silent_push: bool?,
                                 small_image_icon_url: ::String?,
                                 sound: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 time_to_live: ::Integer?,
                                 title: ::String?,
                                 url: ::String?
                               }?,
                               sms_message: {
                                 body: ::String?,
                                 keyword: ::String?,
                                 media_url: ::String?,
                                 message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                 origination_number: ::String?,
                                 sender_id: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 entity_id: ::String?,
                                 template_id: ::String?
                               }?,
                               voice_message: {
                                 body: ::String?,
                                 language_code: ::String?,
                                 origination_number: ::String?,
                                 substitutions: Hash[::String, Array[::String]]?,
                                 voice_id: ::String?
                               }?
                             },
                             template_configuration: {
                               email_template: {
                                 name: ::String?,
                                 version: ::String?
                               }?,
                               push_template: {
                                 name: ::String?,
                                 version: ::String?
                               }?,
                               sms_template: {
                                 name: ::String?,
                                 version: ::String?
                               }?,
                               voice_template: {
                                 name: ::String?,
                                 version: ::String?
                               }?,
                               in_app_template: {
                                 name: ::String?,
                                 version: ::String?
                               }?
                             }?,
                             trace_id: ::String?
                           }
                         ) -> _SendMessagesResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SendMessagesResponseSuccess

      interface _SendOTPMessageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SendOTPMessageResponse]
        def message_response: () -> Types::MessageResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#send_otp_message-instance_method
      def send_otp_message: (
                              application_id: ::String,
                              send_otp_message_request_parameters: {
                                allowed_attempts: ::Integer?,
                                brand_name: ::String,
                                channel: ::String,
                                code_length: ::Integer?,
                                destination_identity: ::String,
                                entity_id: ::String?,
                                language: ::String?,
                                origination_identity: ::String,
                                reference_id: ::String,
                                template_id: ::String?,
                                validity_period: ::Integer?
                              }
                            ) -> _SendOTPMessageResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SendOTPMessageResponseSuccess

      interface _SendUsersMessagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SendUsersMessagesResponse]
        def send_users_message_response: () -> Types::SendUsersMessageResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#send_users_messages-instance_method
      def send_users_messages: (
                                 application_id: ::String,
                                 send_users_message_request: {
                                   context: Hash[::String, ::String]?,
                                   message_configuration: {
                                     adm_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       consolidation_key: ::String?,
                                       data: Hash[::String, ::String]?,
                                       expires_after: ::String?,
                                       icon_reference: ::String?,
                                       image_icon_url: ::String?,
                                       image_url: ::String?,
                                       md5: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       small_image_icon_url: ::String?,
                                       sound: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     apns_message: {
                                       apns_push_type: ::String?,
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       badge: ::Integer?,
                                       body: ::String?,
                                       category: ::String?,
                                       collapse_id: ::String?,
                                       data: Hash[::String, ::String]?,
                                       media_url: ::String?,
                                       preferred_authentication_method: ::String?,
                                       priority: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       sound: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       thread_id: ::String?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     baidu_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       data: Hash[::String, ::String]?,
                                       icon_reference: ::String?,
                                       image_icon_url: ::String?,
                                       image_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       small_image_icon_url: ::String?,
                                       sound: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     default_message: {
                                       body: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?
                                     }?,
                                     default_push_notification_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       data: Hash[::String, ::String]?,
                                       silent_push: bool?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     email_message: {
                                       body: ::String?,
                                       feedback_forwarding_address: ::String?,
                                       from_address: ::String?,
                                       raw_email: {
                                         data: ::String?
                                       }?,
                                       reply_to_addresses: Array[::String]?,
                                       simple_email: {
                                         html_part: {
                                           charset: ::String?,
                                           data: ::String?
                                         }?,
                                         subject: {
                                           charset: ::String?,
                                           data: ::String?
                                         }?,
                                         text_part: {
                                           charset: ::String?,
                                           data: ::String?
                                         }?
                                       }?,
                                       substitutions: Hash[::String, Array[::String]]?
                                     }?,
                                     gcm_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       collapse_key: ::String?,
                                       data: Hash[::String, ::String]?,
                                       icon_reference: ::String?,
                                       image_icon_url: ::String?,
                                       image_url: ::String?,
                                       preferred_authentication_method: ::String?,
                                       priority: ::String?,
                                       raw_content: ::String?,
                                       restricted_package_name: ::String?,
                                       silent_push: bool?,
                                       small_image_icon_url: ::String?,
                                       sound: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     sms_message: {
                                       body: ::String?,
                                       keyword: ::String?,
                                       media_url: ::String?,
                                       message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                       origination_number: ::String?,
                                       sender_id: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       entity_id: ::String?,
                                       template_id: ::String?
                                     }?,
                                     voice_message: {
                                       body: ::String?,
                                       language_code: ::String?,
                                       origination_number: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       voice_id: ::String?
                                     }?
                                   },
                                   template_configuration: {
                                     email_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     push_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     sms_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     voice_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     in_app_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?
                                   }?,
                                   trace_id: ::String?,
                                   users: Hash[::String, {
                                       body_override: ::String?,
                                       context: Hash[::String, ::String]?,
                                       raw_content: ::String?,
                                       substitutions: Hash[::String, Array[::String]]?,
                                       title_override: ::String?
                                     }]
                                 }
                               ) -> _SendUsersMessagesResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SendUsersMessagesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags_model: {
                            tags: Hash[::String, ::String]
                          }
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _UpdateAdmChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateAdmChannelResponse]
        def adm_channel_response: () -> Types::ADMChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_adm_channel-instance_method
      def update_adm_channel: (
                                adm_channel_request: {
                                  client_id: ::String,
                                  client_secret: ::String,
                                  enabled: bool?
                                },
                                application_id: ::String
                              ) -> _UpdateAdmChannelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateAdmChannelResponseSuccess

      interface _UpdateApnsChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateApnsChannelResponse]
        def apns_channel_response: () -> Types::APNSChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_apns_channel-instance_method
      def update_apns_channel: (
                                 apns_channel_request: {
                                   bundle_id: ::String?,
                                   certificate: ::String?,
                                   default_authentication_method: ::String?,
                                   enabled: bool?,
                                   private_key: ::String?,
                                   team_id: ::String?,
                                   token_key: ::String?,
                                   token_key_id: ::String?
                                 },
                                 application_id: ::String
                               ) -> _UpdateApnsChannelResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateApnsChannelResponseSuccess

      interface _UpdateApnsSandboxChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateApnsSandboxChannelResponse]
        def apns_sandbox_channel_response: () -> Types::APNSSandboxChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_apns_sandbox_channel-instance_method
      def update_apns_sandbox_channel: (
                                         apns_sandbox_channel_request: {
                                           bundle_id: ::String?,
                                           certificate: ::String?,
                                           default_authentication_method: ::String?,
                                           enabled: bool?,
                                           private_key: ::String?,
                                           team_id: ::String?,
                                           token_key: ::String?,
                                           token_key_id: ::String?
                                         },
                                         application_id: ::String
                                       ) -> _UpdateApnsSandboxChannelResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateApnsSandboxChannelResponseSuccess

      interface _UpdateApnsVoipChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateApnsVoipChannelResponse]
        def apns_voip_channel_response: () -> Types::APNSVoipChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_apns_voip_channel-instance_method
      def update_apns_voip_channel: (
                                      apns_voip_channel_request: {
                                        bundle_id: ::String?,
                                        certificate: ::String?,
                                        default_authentication_method: ::String?,
                                        enabled: bool?,
                                        private_key: ::String?,
                                        team_id: ::String?,
                                        token_key: ::String?,
                                        token_key_id: ::String?
                                      },
                                      application_id: ::String
                                    ) -> _UpdateApnsVoipChannelResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateApnsVoipChannelResponseSuccess

      interface _UpdateApnsVoipSandboxChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateApnsVoipSandboxChannelResponse]
        def apns_voip_sandbox_channel_response: () -> Types::APNSVoipSandboxChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_apns_voip_sandbox_channel-instance_method
      def update_apns_voip_sandbox_channel: (
                                              apns_voip_sandbox_channel_request: {
                                                bundle_id: ::String?,
                                                certificate: ::String?,
                                                default_authentication_method: ::String?,
                                                enabled: bool?,
                                                private_key: ::String?,
                                                team_id: ::String?,
                                                token_key: ::String?,
                                                token_key_id: ::String?
                                              },
                                              application_id: ::String
                                            ) -> _UpdateApnsVoipSandboxChannelResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateApnsVoipSandboxChannelResponseSuccess

      interface _UpdateApplicationSettingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateApplicationSettingsResponse]
        def application_settings_resource: () -> Types::ApplicationSettingsResource
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_application_settings-instance_method
      def update_application_settings: (
                                         application_id: ::String,
                                         write_application_settings_request: {
                                           campaign_hook: {
                                             lambda_function_name: ::String?,
                                             mode: ("DELIVERY" | "FILTER")?,
                                             web_url: ::String?
                                           }?,
                                           cloud_watch_metrics_enabled: bool?,
                                           limits: {
                                             daily: ::Integer?,
                                             maximum_duration: ::Integer?,
                                             messages_per_second: ::Integer?,
                                             total: ::Integer?,
                                             session: ::Integer?
                                           }?,
                                           quiet_time: {
                                             end: ::String?,
                                             start: ::String?
                                           }?,
                                           journey_limits: {
                                             daily_cap: ::Integer?,
                                             timeframe_cap: {
                                               cap: ::Integer?,
                                               days: ::Integer?
                                             }?,
                                             total_cap: ::Integer?
                                           }?
                                         }
                                       ) -> _UpdateApplicationSettingsResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateApplicationSettingsResponseSuccess

      interface _UpdateBaiduChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateBaiduChannelResponse]
        def baidu_channel_response: () -> Types::BaiduChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_baidu_channel-instance_method
      def update_baidu_channel: (
                                  application_id: ::String,
                                  baidu_channel_request: {
                                    api_key: ::String,
                                    enabled: bool?,
                                    secret_key: ::String
                                  }
                                ) -> _UpdateBaiduChannelResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateBaiduChannelResponseSuccess

      interface _UpdateCampaignResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateCampaignResponse]
        def campaign_response: () -> Types::CampaignResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_campaign-instance_method
      def update_campaign: (
                             application_id: ::String,
                             campaign_id: ::String,
                             write_campaign_request: {
                               additional_treatments: Array[
                                 {
                                   custom_delivery_configuration: {
                                     delivery_uri: ::String,
                                     endpoint_types: Array[("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")]?
                                   }?,
                                   message_configuration: {
                                     adm_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     apns_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     baidu_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     custom_message: {
                                       data: ::String?
                                     }?,
                                     default_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     email_message: {
                                       body: ::String?,
                                       from_address: ::String?,
                                       html_body: ::String?,
                                       title: ::String?
                                     }?,
                                     gcm_message: {
                                       action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                       body: ::String?,
                                       image_icon_url: ::String?,
                                       image_small_icon_url: ::String?,
                                       image_url: ::String?,
                                       json_body: ::String?,
                                       media_url: ::String?,
                                       raw_content: ::String?,
                                       silent_push: bool?,
                                       time_to_live: ::Integer?,
                                       title: ::String?,
                                       url: ::String?
                                     }?,
                                     sms_message: {
                                       body: ::String?,
                                       message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                       origination_number: ::String?,
                                       sender_id: ::String?,
                                       entity_id: ::String?,
                                       template_id: ::String?
                                     }?,
                                     in_app_message: {
                                       body: ::String?,
                                       content: Array[
                                         {
                                           background_color: ::String?,
                                           body_config: {
                                             alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                             body: ::String,
                                             text_color: ::String
                                           }?,
                                           header_config: {
                                             alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                             header: ::String,
                                             text_color: ::String
                                           }?,
                                           image_url: ::String?,
                                           primary_btn: {
                                             android: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             default_config: {
                                               background_color: ::String?,
                                               border_radius: ::Integer?,
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?,
                                               text: ::String,
                                               text_color: ::String?
                                             }?,
                                             ios: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             web: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?
                                           }?,
                                           secondary_btn: {
                                             android: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             default_config: {
                                               background_color: ::String?,
                                               border_radius: ::Integer?,
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?,
                                               text: ::String,
                                               text_color: ::String?
                                             }?,
                                             ios: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?,
                                             web: {
                                               button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                               link: ::String?
                                             }?
                                           }?
                                         },
                                       ]?,
                                       custom_config: Hash[::String, ::String]?,
                                       layout: ("BOTTOM_BANNER" | "TOP_BANNER" | "OVERLAYS" | "MOBILE_FEED" | "MIDDLE_BANNER" | "CAROUSEL")?
                                     }?
                                   }?,
                                   schedule: {
                                     end_time: ::String?,
                                     event_filter: {
                                       dimensions: {
                                         attributes: Hash[::String, {
                                             attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                             values: Array[::String]
                                           }]?,
                                         event_type: {
                                           dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                           values: Array[::String]
                                         }?,
                                         metrics: Hash[::String, {
                                             comparison_operator: ::String,
                                             value: ::Float
                                           }]?
                                       },
                                       filter_type: ("SYSTEM" | "ENDPOINT")
                                     }?,
                                     frequency: ("ONCE" | "HOURLY" | "DAILY" | "WEEKLY" | "MONTHLY" | "EVENT" | "IN_APP_EVENT")?,
                                     is_local_time: bool?,
                                     quiet_time: {
                                       end: ::String?,
                                       start: ::String?
                                     }?,
                                     start_time: ::String,
                                     timezone: ::String?
                                   }?,
                                   size_percent: ::Integer,
                                   template_configuration: {
                                     email_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     push_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     sms_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     voice_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?,
                                     in_app_template: {
                                       name: ::String?,
                                       version: ::String?
                                     }?
                                   }?,
                                   treatment_description: ::String?,
                                   treatment_name: ::String?
                                 },
                               ]?,
                               custom_delivery_configuration: {
                                 delivery_uri: ::String,
                                 endpoint_types: Array[("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")]?
                               }?,
                               description: ::String?,
                               holdout_percent: ::Integer?,
                               hook: {
                                 lambda_function_name: ::String?,
                                 mode: ("DELIVERY" | "FILTER")?,
                                 web_url: ::String?
                               }?,
                               is_paused: bool?,
                               limits: {
                                 daily: ::Integer?,
                                 maximum_duration: ::Integer?,
                                 messages_per_second: ::Integer?,
                                 total: ::Integer?,
                                 session: ::Integer?
                               }?,
                               message_configuration: {
                                 adm_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 apns_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 baidu_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 custom_message: {
                                   data: ::String?
                                 }?,
                                 default_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 email_message: {
                                   body: ::String?,
                                   from_address: ::String?,
                                   html_body: ::String?,
                                   title: ::String?
                                 }?,
                                 gcm_message: {
                                   action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                   body: ::String?,
                                   image_icon_url: ::String?,
                                   image_small_icon_url: ::String?,
                                   image_url: ::String?,
                                   json_body: ::String?,
                                   media_url: ::String?,
                                   raw_content: ::String?,
                                   silent_push: bool?,
                                   time_to_live: ::Integer?,
                                   title: ::String?,
                                   url: ::String?
                                 }?,
                                 sms_message: {
                                   body: ::String?,
                                   message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                   origination_number: ::String?,
                                   sender_id: ::String?,
                                   entity_id: ::String?,
                                   template_id: ::String?
                                 }?,
                                 in_app_message: {
                                   body: ::String?,
                                   content: Array[
                                     {
                                       background_color: ::String?,
                                       body_config: {
                                         alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                         body: ::String,
                                         text_color: ::String
                                       }?,
                                       header_config: {
                                         alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                         header: ::String,
                                         text_color: ::String
                                       }?,
                                       image_url: ::String?,
                                       primary_btn: {
                                         android: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         default_config: {
                                           background_color: ::String?,
                                           border_radius: ::Integer?,
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?,
                                           text: ::String,
                                           text_color: ::String?
                                         }?,
                                         ios: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         web: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?
                                       }?,
                                       secondary_btn: {
                                         android: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         default_config: {
                                           background_color: ::String?,
                                           border_radius: ::Integer?,
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?,
                                           text: ::String,
                                           text_color: ::String?
                                         }?,
                                         ios: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?,
                                         web: {
                                           button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                           link: ::String?
                                         }?
                                       }?
                                     },
                                   ]?,
                                   custom_config: Hash[::String, ::String]?,
                                   layout: ("BOTTOM_BANNER" | "TOP_BANNER" | "OVERLAYS" | "MOBILE_FEED" | "MIDDLE_BANNER" | "CAROUSEL")?
                                 }?
                               }?,
                               name: ::String?,
                               schedule: {
                                 end_time: ::String?,
                                 event_filter: {
                                   dimensions: {
                                     attributes: Hash[::String, {
                                         attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                         values: Array[::String]
                                       }]?,
                                     event_type: {
                                       dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                       values: Array[::String]
                                     }?,
                                     metrics: Hash[::String, {
                                         comparison_operator: ::String,
                                         value: ::Float
                                       }]?
                                   },
                                   filter_type: ("SYSTEM" | "ENDPOINT")
                                 }?,
                                 frequency: ("ONCE" | "HOURLY" | "DAILY" | "WEEKLY" | "MONTHLY" | "EVENT" | "IN_APP_EVENT")?,
                                 is_local_time: bool?,
                                 quiet_time: {
                                   end: ::String?,
                                   start: ::String?
                                 }?,
                                 start_time: ::String,
                                 timezone: ::String?
                               }?,
                               segment_id: ::String?,
                               segment_version: ::Integer?,
                               tags: Hash[::String, ::String]?,
                               template_configuration: {
                                 email_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 push_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 sms_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 voice_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?,
                                 in_app_template: {
                                   name: ::String?,
                                   version: ::String?
                                 }?
                               }?,
                               treatment_description: ::String?,
                               treatment_name: ::String?,
                               priority: ::Integer?
                             }
                           ) -> _UpdateCampaignResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateCampaignResponseSuccess

      interface _UpdateEmailChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateEmailChannelResponse]
        def email_channel_response: () -> Types::EmailChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_email_channel-instance_method
      def update_email_channel: (
                                  application_id: ::String,
                                  email_channel_request: {
                                    configuration_set: ::String?,
                                    enabled: bool?,
                                    from_address: ::String,
                                    identity: ::String,
                                    role_arn: ::String?
                                  }
                                ) -> _UpdateEmailChannelResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateEmailChannelResponseSuccess

      interface _UpdateEmailTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateEmailTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_email_template-instance_method
      def update_email_template: (
                                   ?create_new_version: bool,
                                   email_template_request: {
                                     default_substitutions: ::String?,
                                     html_part: ::String?,
                                     recommender_id: ::String?,
                                     subject: ::String?,
                                     tags: Hash[::String, ::String]?,
                                     template_description: ::String?,
                                     text_part: ::String?
                                   },
                                   template_name: ::String,
                                   ?version: ::String
                                 ) -> _UpdateEmailTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateEmailTemplateResponseSuccess

      interface _UpdateEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateEndpointResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_endpoint-instance_method
      def update_endpoint: (
                             application_id: ::String,
                             endpoint_id: ::String,
                             endpoint_request: {
                               address: ::String?,
                               attributes: Hash[::String, Array[::String]]?,
                               channel_type: ("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")?,
                               demographic: {
                                 app_version: ::String?,
                                 locale: ::String?,
                                 make: ::String?,
                                 model: ::String?,
                                 model_version: ::String?,
                                 platform: ::String?,
                                 platform_version: ::String?,
                                 timezone: ::String?
                               }?,
                               effective_date: ::String?,
                               endpoint_status: ::String?,
                               location: {
                                 city: ::String?,
                                 country: ::String?,
                                 latitude: ::Float?,
                                 longitude: ::Float?,
                                 postal_code: ::String?,
                                 region: ::String?
                               }?,
                               metrics: Hash[::String, ::Float]?,
                               opt_out: ::String?,
                               request_id: ::String?,
                               user: {
                                 user_attributes: Hash[::String, Array[::String]]?,
                                 user_id: ::String?
                               }?
                             }
                           ) -> _UpdateEndpointResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateEndpointResponseSuccess

      interface _UpdateEndpointsBatchResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateEndpointsBatchResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_endpoints_batch-instance_method
      def update_endpoints_batch: (
                                    application_id: ::String,
                                    endpoint_batch_request: {
                                      item: Array[
                                        {
                                          address: ::String?,
                                          attributes: Hash[::String, Array[::String]]?,
                                          channel_type: ("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")?,
                                          demographic: {
                                            app_version: ::String?,
                                            locale: ::String?,
                                            make: ::String?,
                                            model: ::String?,
                                            model_version: ::String?,
                                            platform: ::String?,
                                            platform_version: ::String?,
                                            timezone: ::String?
                                          }?,
                                          effective_date: ::String?,
                                          endpoint_status: ::String?,
                                          id: ::String?,
                                          location: {
                                            city: ::String?,
                                            country: ::String?,
                                            latitude: ::Float?,
                                            longitude: ::Float?,
                                            postal_code: ::String?,
                                            region: ::String?
                                          }?,
                                          metrics: Hash[::String, ::Float]?,
                                          opt_out: ::String?,
                                          request_id: ::String?,
                                          user: {
                                            user_attributes: Hash[::String, Array[::String]]?,
                                            user_id: ::String?
                                          }?
                                        },
                                      ]
                                    }
                                  ) -> _UpdateEndpointsBatchResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateEndpointsBatchResponseSuccess

      interface _UpdateGcmChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateGcmChannelResponse]
        def gcm_channel_response: () -> Types::GCMChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_gcm_channel-instance_method
      def update_gcm_channel: (
                                application_id: ::String,
                                gcm_channel_request: {
                                  api_key: ::String?,
                                  default_authentication_method: ::String?,
                                  enabled: bool?,
                                  service_json: ::String?
                                }
                              ) -> _UpdateGcmChannelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateGcmChannelResponseSuccess

      interface _UpdateInAppTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateInAppTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_in_app_template-instance_method
      def update_in_app_template: (
                                    ?create_new_version: bool,
                                    in_app_template_request: {
                                      content: Array[
                                        {
                                          background_color: ::String?,
                                          body_config: {
                                            alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                            body: ::String,
                                            text_color: ::String
                                          }?,
                                          header_config: {
                                            alignment: ("LEFT" | "CENTER" | "RIGHT"),
                                            header: ::String,
                                            text_color: ::String
                                          }?,
                                          image_url: ::String?,
                                          primary_btn: {
                                            android: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            default_config: {
                                              background_color: ::String?,
                                              border_radius: ::Integer?,
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?,
                                              text: ::String,
                                              text_color: ::String?
                                            }?,
                                            ios: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            web: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?
                                          }?,
                                          secondary_btn: {
                                            android: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            default_config: {
                                              background_color: ::String?,
                                              border_radius: ::Integer?,
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?,
                                              text: ::String,
                                              text_color: ::String?
                                            }?,
                                            ios: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?,
                                            web: {
                                              button_action: ("LINK" | "DEEP_LINK" | "CLOSE"),
                                              link: ::String?
                                            }?
                                          }?
                                        },
                                      ]?,
                                      custom_config: Hash[::String, ::String]?,
                                      layout: ("BOTTOM_BANNER" | "TOP_BANNER" | "OVERLAYS" | "MOBILE_FEED" | "MIDDLE_BANNER" | "CAROUSEL")?,
                                      tags: Hash[::String, ::String]?,
                                      template_description: ::String?
                                    },
                                    template_name: ::String,
                                    ?version: ::String
                                  ) -> _UpdateInAppTemplateResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateInAppTemplateResponseSuccess

      interface _UpdateJourneyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateJourneyResponse]
        def journey_response: () -> Types::JourneyResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_journey-instance_method
      def update_journey: (
                            application_id: ::String,
                            journey_id: ::String,
                            write_journey_request: {
                              activities: Hash[::String, {
                                  custom: {
                                    delivery_uri: ::String?,
                                    endpoint_types: Array[("PUSH" | "GCM" | "APNS" | "APNS_SANDBOX" | "APNS_VOIP" | "APNS_VOIP_SANDBOX" | "ADM" | "SMS" | "VOICE" | "EMAIL" | "BAIDU" | "CUSTOM" | "IN_APP")]?,
                                    message_config: {
                                      data: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  conditional_split: {
                                    condition: {
                                      conditions: Array[
                                        {
                                          event_condition: {
                                            dimensions: {
                                              attributes: Hash[::String, {
                                                  attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                  values: Array[::String]
                                                }]?,
                                              event_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              metrics: Hash[::String, {
                                                  comparison_operator: ::String,
                                                  value: ::Float
                                                }]?
                                            }?,
                                            message_activity: ::String?
                                          }?,
                                          segment_condition: {
                                            segment_id: ::String
                                          }?,
                                          segment_dimensions: {
                                            attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?,
                                            behavior: {
                                              recency: {
                                                duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                                recency_type: ("ACTIVE" | "INACTIVE")
                                              }?
                                            }?,
                                            demographic: {
                                              app_version: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              channel: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              device_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              make: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              model: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              platform: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?
                                            }?,
                                            location: {
                                              country: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              gps_point: {
                                                coordinates: {
                                                  latitude: ::Float,
                                                  longitude: ::Float
                                                },
                                                range_in_kilometers: ::Float?
                                              }?
                                            }?,
                                            metrics: Hash[::String, {
                                                comparison_operator: ::String,
                                                value: ::Float
                                              }]?,
                                            user_attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?
                                          }?
                                        },
                                      ]?,
                                      operator: ("ALL" | "ANY")?
                                    }?,
                                    evaluation_wait_time: {
                                      wait_for: ::String?,
                                      wait_until: ::String?
                                    }?,
                                    false_activity: ::String?,
                                    true_activity: ::String?
                                  }?,
                                  description: ::String?,
                                  email: {
                                    message_config: {
                                      from_address: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  holdout: {
                                    next_activity: ::String?,
                                    percentage: ::Integer
                                  }?,
                                  multi_condition: {
                                    branches: Array[
                                      {
                                        condition: {
                                          event_condition: {
                                            dimensions: {
                                              attributes: Hash[::String, {
                                                  attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                  values: Array[::String]
                                                }]?,
                                              event_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              metrics: Hash[::String, {
                                                  comparison_operator: ::String,
                                                  value: ::Float
                                                }]?
                                            }?,
                                            message_activity: ::String?
                                          }?,
                                          segment_condition: {
                                            segment_id: ::String
                                          }?,
                                          segment_dimensions: {
                                            attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?,
                                            behavior: {
                                              recency: {
                                                duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                                recency_type: ("ACTIVE" | "INACTIVE")
                                              }?
                                            }?,
                                            demographic: {
                                              app_version: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              channel: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              device_type: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              make: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              model: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              platform: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?
                                            }?,
                                            location: {
                                              country: {
                                                dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                                values: Array[::String]
                                              }?,
                                              gps_point: {
                                                coordinates: {
                                                  latitude: ::Float,
                                                  longitude: ::Float
                                                },
                                                range_in_kilometers: ::Float?
                                              }?
                                            }?,
                                            metrics: Hash[::String, {
                                                comparison_operator: ::String,
                                                value: ::Float
                                              }]?,
                                            user_attributes: Hash[::String, {
                                                attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                                values: Array[::String]
                                              }]?
                                          }?
                                        }?,
                                        next_activity: ::String?
                                      },
                                    ]?,
                                    default_activity: ::String?,
                                    evaluation_wait_time: {
                                      wait_for: ::String?,
                                      wait_until: ::String?
                                    }?
                                  }?,
                                  push: {
                                    message_config: {
                                      time_to_live: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  random_split: {
                                    branches: Array[
                                      {
                                        next_activity: ::String?,
                                        percentage: ::Integer?
                                      },
                                    ]?
                                  }?,
                                  sms: {
                                    message_config: {
                                      message_type: ("TRANSACTIONAL" | "PROMOTIONAL")?,
                                      origination_number: ::String?,
                                      sender_id: ::String?,
                                      entity_id: ::String?,
                                      template_id: ::String?
                                    }?,
                                    next_activity: ::String?,
                                    template_name: ::String?,
                                    template_version: ::String?
                                  }?,
                                  wait: {
                                    next_activity: ::String?,
                                    wait_time: {
                                      wait_for: ::String?,
                                      wait_until: ::String?
                                    }?
                                  }?,
                                  contact_center: {
                                    next_activity: ::String?
                                  }?
                                }]?,
                              creation_date: ::String?,
                              last_modified_date: ::String?,
                              limits: {
                                daily_cap: ::Integer?,
                                endpoint_reentry_cap: ::Integer?,
                                messages_per_second: ::Integer?,
                                endpoint_reentry_interval: ::String?,
                                timeframe_cap: {
                                  cap: ::Integer?,
                                  days: ::Integer?
                                }?,
                                total_cap: ::Integer?
                              }?,
                              local_time: bool?,
                              name: ::String,
                              quiet_time: {
                                end: ::String?,
                                start: ::String?
                              }?,
                              refresh_frequency: ::String?,
                              schedule: {
                                end_time: ::Time?,
                                start_time: ::Time?,
                                timezone: ::String?
                              }?,
                              start_activity: ::String?,
                              start_condition: {
                                description: ::String?,
                                event_start_condition: {
                                  event_filter: {
                                    dimensions: {
                                      attributes: Hash[::String, {
                                          attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                          values: Array[::String]
                                        }]?,
                                      event_type: {
                                        dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                        values: Array[::String]
                                      }?,
                                      metrics: Hash[::String, {
                                          comparison_operator: ::String,
                                          value: ::Float
                                        }]?
                                    },
                                    filter_type: ("SYSTEM" | "ENDPOINT")
                                  }?,
                                  segment_id: ::String?
                                }?,
                                segment_start_condition: {
                                  segment_id: ::String
                                }?
                              }?,
                              state: ("DRAFT" | "ACTIVE" | "COMPLETED" | "CANCELLED" | "CLOSED" | "PAUSED")?,
                              wait_for_quiet_time: bool?,
                              refresh_on_segment_update: bool?,
                              journey_channel_settings: {
                                connect_campaign_arn: ::String?,
                                connect_campaign_execution_role_arn: ::String?
                              }?,
                              sending_schedule: bool?,
                              open_hours: {
                                email: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                sms: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                push: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                voice: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?,
                                custom: Hash[("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY"), Array[
                                    {
                                      start_time: ::String?,
                                      end_time: ::String?
                                    },
                                  ]]?
                              }?,
                              closed_days: {
                                email: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                sms: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                push: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                voice: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?,
                                custom: Array[
                                  {
                                    name: ::String?,
                                    start_date_time: ::String?,
                                    end_date_time: ::String?
                                  },
                                ]?
                              }?,
                              timezone_estimation_methods: Array[("PHONE_NUMBER" | "POSTAL_CODE")]?
                            }
                          ) -> _UpdateJourneyResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateJourneyResponseSuccess

      interface _UpdateJourneyStateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateJourneyStateResponse]
        def journey_response: () -> Types::JourneyResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_journey_state-instance_method
      def update_journey_state: (
                                  application_id: ::String,
                                  journey_id: ::String,
                                  journey_state_request: {
                                    state: ("DRAFT" | "ACTIVE" | "COMPLETED" | "CANCELLED" | "CLOSED" | "PAUSED")?
                                  }
                                ) -> _UpdateJourneyStateResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateJourneyStateResponseSuccess

      interface _UpdatePushTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdatePushTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_push_template-instance_method
      def update_push_template: (
                                  ?create_new_version: bool,
                                  push_notification_template_request: {
                                    adm: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      image_icon_url: ::String?,
                                      image_url: ::String?,
                                      raw_content: ::String?,
                                      small_image_icon_url: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    apns: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      media_url: ::String?,
                                      raw_content: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    baidu: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      image_icon_url: ::String?,
                                      image_url: ::String?,
                                      raw_content: ::String?,
                                      small_image_icon_url: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    default: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    default_substitutions: ::String?,
                                    gcm: {
                                      action: ("OPEN_APP" | "DEEP_LINK" | "URL")?,
                                      body: ::String?,
                                      image_icon_url: ::String?,
                                      image_url: ::String?,
                                      raw_content: ::String?,
                                      small_image_icon_url: ::String?,
                                      sound: ::String?,
                                      title: ::String?,
                                      url: ::String?
                                    }?,
                                    recommender_id: ::String?,
                                    tags: Hash[::String, ::String]?,
                                    template_description: ::String?
                                  },
                                  template_name: ::String,
                                  ?version: ::String
                                ) -> _UpdatePushTemplateResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdatePushTemplateResponseSuccess

      interface _UpdateRecommenderConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateRecommenderConfigurationResponse]
        def recommender_configuration_response: () -> Types::RecommenderConfigurationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_recommender_configuration-instance_method
      def update_recommender_configuration: (
                                              recommender_id: ::String,
                                              update_recommender_configuration: {
                                                attributes: Hash[::String, ::String]?,
                                                description: ::String?,
                                                name: ::String?,
                                                recommendation_provider_id_type: ::String?,
                                                recommendation_provider_role_arn: ::String,
                                                recommendation_provider_uri: ::String,
                                                recommendation_transformer_uri: ::String?,
                                                recommendations_display_name: ::String?,
                                                recommendations_per_message: ::Integer?
                                              }
                                            ) -> _UpdateRecommenderConfigurationResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateRecommenderConfigurationResponseSuccess

      interface _UpdateSegmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateSegmentResponse]
        def segment_response: () -> Types::SegmentResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_segment-instance_method
      def update_segment: (
                            application_id: ::String,
                            segment_id: ::String,
                            write_segment_request: {
                              dimensions: {
                                attributes: Hash[::String, {
                                    attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                    values: Array[::String]
                                  }]?,
                                behavior: {
                                  recency: {
                                    duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                    recency_type: ("ACTIVE" | "INACTIVE")
                                  }?
                                }?,
                                demographic: {
                                  app_version: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  channel: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  device_type: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  make: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  model: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  platform: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?
                                }?,
                                location: {
                                  country: {
                                    dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                    values: Array[::String]
                                  }?,
                                  gps_point: {
                                    coordinates: {
                                      latitude: ::Float,
                                      longitude: ::Float
                                    },
                                    range_in_kilometers: ::Float?
                                  }?
                                }?,
                                metrics: Hash[::String, {
                                    comparison_operator: ::String,
                                    value: ::Float
                                  }]?,
                                user_attributes: Hash[::String, {
                                    attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                    values: Array[::String]
                                  }]?
                              }?,
                              name: ::String?,
                              segment_groups: {
                                groups: Array[
                                  {
                                    dimensions: Array[
                                      {
                                        attributes: Hash[::String, {
                                            attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                            values: Array[::String]
                                          }]?,
                                        behavior: {
                                          recency: {
                                            duration: ("HR_24" | "DAY_7" | "DAY_14" | "DAY_30"),
                                            recency_type: ("ACTIVE" | "INACTIVE")
                                          }?
                                        }?,
                                        demographic: {
                                          app_version: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          channel: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          device_type: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          make: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          model: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          platform: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?
                                        }?,
                                        location: {
                                          country: {
                                            dimension_type: ("INCLUSIVE" | "EXCLUSIVE")?,
                                            values: Array[::String]
                                          }?,
                                          gps_point: {
                                            coordinates: {
                                              latitude: ::Float,
                                              longitude: ::Float
                                            },
                                            range_in_kilometers: ::Float?
                                          }?
                                        }?,
                                        metrics: Hash[::String, {
                                            comparison_operator: ::String,
                                            value: ::Float
                                          }]?,
                                        user_attributes: Hash[::String, {
                                            attribute_type: ("INCLUSIVE" | "EXCLUSIVE" | "CONTAINS" | "BEFORE" | "AFTER" | "BETWEEN" | "ON")?,
                                            values: Array[::String]
                                          }]?
                                      },
                                    ]?,
                                    source_segments: Array[
                                      {
                                        id: ::String,
                                        version: ::Integer?
                                      },
                                    ]?,
                                    source_type: ("ALL" | "ANY" | "NONE")?,
                                    type: ("ALL" | "ANY" | "NONE")?
                                  },
                                ]?,
                                include: ("ALL" | "ANY" | "NONE")?
                              }?,
                              tags: Hash[::String, ::String]?
                            }
                          ) -> _UpdateSegmentResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateSegmentResponseSuccess

      interface _UpdateSmsChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateSmsChannelResponse]
        def sms_channel_response: () -> Types::SMSChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_sms_channel-instance_method
      def update_sms_channel: (
                                application_id: ::String,
                                sms_channel_request: {
                                  enabled: bool?,
                                  sender_id: ::String?,
                                  short_code: ::String?
                                }
                              ) -> _UpdateSmsChannelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateSmsChannelResponseSuccess

      interface _UpdateSmsTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateSmsTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_sms_template-instance_method
      def update_sms_template: (
                                 ?create_new_version: bool,
                                 sms_template_request: {
                                   body: ::String?,
                                   default_substitutions: ::String?,
                                   recommender_id: ::String?,
                                   tags: Hash[::String, ::String]?,
                                   template_description: ::String?
                                 },
                                 template_name: ::String,
                                 ?version: ::String
                               ) -> _UpdateSmsTemplateResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateSmsTemplateResponseSuccess

      interface _UpdateTemplateActiveVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateTemplateActiveVersionResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_template_active_version-instance_method
      def update_template_active_version: (
                                            template_active_version_request: {
                                              version: ::String?
                                            },
                                            template_name: ::String,
                                            template_type: ::String
                                          ) -> _UpdateTemplateActiveVersionResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateTemplateActiveVersionResponseSuccess

      interface _UpdateVoiceChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateVoiceChannelResponse]
        def voice_channel_response: () -> Types::VoiceChannelResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_voice_channel-instance_method
      def update_voice_channel: (
                                  application_id: ::String,
                                  voice_channel_request: {
                                    enabled: bool?
                                  }
                                ) -> _UpdateVoiceChannelResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateVoiceChannelResponseSuccess

      interface _UpdateVoiceTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateVoiceTemplateResponse]
        def message_body: () -> Types::MessageBody
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#update_voice_template-instance_method
      def update_voice_template: (
                                   ?create_new_version: bool,
                                   template_name: ::String,
                                   ?version: ::String,
                                   voice_template_request: {
                                     body: ::String?,
                                     default_substitutions: ::String?,
                                     language_code: ::String?,
                                     tags: Hash[::String, ::String]?,
                                     template_description: ::String?,
                                     voice_id: ::String?
                                   }
                                 ) -> _UpdateVoiceTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateVoiceTemplateResponseSuccess

      interface _VerifyOTPMessageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::VerifyOTPMessageResponse]
        def verification_response: () -> Types::VerificationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Pinpoint/Client.html#verify_otp_message-instance_method
      def verify_otp_message: (
                                application_id: ::String,
                                verify_otp_message_request_parameters: {
                                  destination_identity: ::String,
                                  otp: ::String,
                                  reference_id: ::String
                                }
                              ) -> _VerifyOTPMessageResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _VerifyOTPMessageResponseSuccess
    end
  end
end

