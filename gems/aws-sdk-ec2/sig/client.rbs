# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module EC2
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _AcceptAddressTransferResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptAddressTransferResult]
        def address_transfer: () -> Types::AddressTransfer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_address_transfer-instance_method
      def accept_address_transfer: (
                                     address: ::String,
                                     ?tag_specifications: Array[
                                       {
                                         resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                         tags: Array[
                                           {
                                             key: ::String?,
                                             value: ::String?
                                           },
                                         ]?
                                       },
                                     ],
                                     ?dry_run: bool
                                   ) -> _AcceptAddressTransferResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptAddressTransferResponseSuccess

      interface _AcceptCapacityReservationBillingOwnershipResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptCapacityReservationBillingOwnershipResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_capacity_reservation_billing_ownership-instance_method
      def accept_capacity_reservation_billing_ownership: (
                                                           ?dry_run: bool,
                                                           capacity_reservation_id: ::String
                                                         ) -> _AcceptCapacityReservationBillingOwnershipResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptCapacityReservationBillingOwnershipResponseSuccess

      interface _AcceptReservedInstancesExchangeQuoteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptReservedInstancesExchangeQuoteResult]
        def exchange_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_reserved_instances_exchange_quote-instance_method
      def accept_reserved_instances_exchange_quote: (
                                                      ?dry_run: bool,
                                                      reserved_instance_ids: Array[::String],
                                                      ?target_configurations: Array[
                                                        {
                                                          instance_count: ::Integer?,
                                                          offering_id: ::String
                                                        },
                                                      ]
                                                    ) -> _AcceptReservedInstancesExchangeQuoteResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptReservedInstancesExchangeQuoteResponseSuccess

      interface _AcceptTransitGatewayMulticastDomainAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptTransitGatewayMulticastDomainAssociationsResult]
        def associations: () -> Types::TransitGatewayMulticastDomainAssociations
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_transit_gateway_multicast_domain_associations-instance_method
      def accept_transit_gateway_multicast_domain_associations: (
                                                                  ?transit_gateway_multicast_domain_id: ::String,
                                                                  ?transit_gateway_attachment_id: ::String,
                                                                  ?subnet_ids: Array[::String],
                                                                  ?dry_run: bool
                                                                ) -> _AcceptTransitGatewayMulticastDomainAssociationsResponseSuccess
                                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptTransitGatewayMulticastDomainAssociationsResponseSuccess

      interface _AcceptTransitGatewayPeeringAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptTransitGatewayPeeringAttachmentResult]
        def transit_gateway_peering_attachment: () -> Types::TransitGatewayPeeringAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_transit_gateway_peering_attachment-instance_method
      def accept_transit_gateway_peering_attachment: (
                                                       transit_gateway_attachment_id: ::String,
                                                       ?dry_run: bool
                                                     ) -> _AcceptTransitGatewayPeeringAttachmentResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptTransitGatewayPeeringAttachmentResponseSuccess

      interface _AcceptTransitGatewayVpcAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptTransitGatewayVpcAttachmentResult]
        def transit_gateway_vpc_attachment: () -> Types::TransitGatewayVpcAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_transit_gateway_vpc_attachment-instance_method
      def accept_transit_gateway_vpc_attachment: (
                                                   transit_gateway_attachment_id: ::String,
                                                   ?dry_run: bool
                                                 ) -> _AcceptTransitGatewayVpcAttachmentResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptTransitGatewayVpcAttachmentResponseSuccess

      interface _AcceptVpcEndpointConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptVpcEndpointConnectionsResult]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_vpc_endpoint_connections-instance_method
      def accept_vpc_endpoint_connections: (
                                             ?dry_run: bool,
                                             service_id: ::String,
                                             vpc_endpoint_ids: Array[::String]
                                           ) -> _AcceptVpcEndpointConnectionsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptVpcEndpointConnectionsResponseSuccess

      interface _AcceptVpcPeeringConnectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AcceptVpcPeeringConnectionResult]
        def vpc_peering_connection: () -> Types::VpcPeeringConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#accept_vpc_peering_connection-instance_method
      def accept_vpc_peering_connection: (
                                           ?dry_run: bool,
                                           vpc_peering_connection_id: ::String
                                         ) -> _AcceptVpcPeeringConnectionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AcceptVpcPeeringConnectionResponseSuccess

      interface _AdvertiseByoipCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AdvertiseByoipCidrResult]
        def byoip_cidr: () -> Types::ByoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#advertise_byoip_cidr-instance_method
      def advertise_byoip_cidr: (
                                  cidr: ::String,
                                  ?asn: ::String,
                                  ?dry_run: bool,
                                  ?network_border_group: ::String
                                ) -> _AdvertiseByoipCidrResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AdvertiseByoipCidrResponseSuccess

      interface _AllocateAddressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AllocateAddressResult]
        def allocation_id: () -> ::String
        def public_ipv_4_pool: () -> ::String
        def network_border_group: () -> ::String
        def domain: () -> ("vpc" | "standard")
        def customer_owned_ip: () -> ::String
        def customer_owned_ipv_4_pool: () -> ::String
        def carrier_ip: () -> ::String
        def public_ip: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#allocate_address-instance_method
      def allocate_address: (
                              ?domain: ("vpc" | "standard"),
                              ?address: ::String,
                              ?public_ipv_4_pool: ::String,
                              ?network_border_group: ::String,
                              ?customer_owned_ipv_4_pool: ::String,
                              ?tag_specifications: Array[
                                {
                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                  tags: Array[
                                    {
                                      key: ::String?,
                                      value: ::String?
                                    },
                                  ]?
                                },
                              ],
                              ?ipam_pool_id: ::String,
                              ?dry_run: bool
                            ) -> _AllocateAddressResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AllocateAddressResponseSuccess

      interface _AllocateHostsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AllocateHostsResult]
        def host_ids: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#allocate_hosts-instance_method
      def allocate_hosts: (
                            ?instance_family: ::String,
                            ?tag_specifications: Array[
                              {
                                resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                tags: Array[
                                  {
                                    key: ::String?,
                                    value: ::String?
                                  },
                                ]?
                              },
                            ],
                            ?host_recovery: ("on" | "off"),
                            ?outpost_arn: ::String,
                            ?host_maintenance: ("on" | "off"),
                            ?asset_ids: Array[::String],
                            ?auto_placement: ("on" | "off"),
                            ?client_token: ::String,
                            ?instance_type: ::String,
                            ?quantity: ::Integer,
                            availability_zone: ::String
                          ) -> _AllocateHostsResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AllocateHostsResponseSuccess

      interface _AllocateIpamPoolCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AllocateIpamPoolCidrResult]
        def ipam_pool_allocation: () -> Types::IpamPoolAllocation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#allocate_ipam_pool_cidr-instance_method
      def allocate_ipam_pool_cidr: (
                                     ?dry_run: bool,
                                     ipam_pool_id: ::String,
                                     ?cidr: ::String,
                                     ?netmask_length: ::Integer,
                                     ?client_token: ::String,
                                     ?description: ::String,
                                     ?preview_next_cidr: bool,
                                     ?allowed_cidrs: Array[::String],
                                     ?disallowed_cidrs: Array[::String]
                                   ) -> _AllocateIpamPoolCidrResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AllocateIpamPoolCidrResponseSuccess

      interface _ApplySecurityGroupsToClientVpnTargetNetworkResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ApplySecurityGroupsToClientVpnTargetNetworkResult]
        def security_group_ids: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#apply_security_groups_to_client_vpn_target_network-instance_method
      def apply_security_groups_to_client_vpn_target_network: (
                                                                client_vpn_endpoint_id: ::String,
                                                                vpc_id: ::String,
                                                                security_group_ids: Array[::String],
                                                                ?dry_run: bool
                                                              ) -> _ApplySecurityGroupsToClientVpnTargetNetworkResponseSuccess
                                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ApplySecurityGroupsToClientVpnTargetNetworkResponseSuccess

      interface _AssignIpv6AddressesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssignIpv6AddressesResult]
        def assigned_ipv_6_addresses: () -> ::Array[::String]
        def assigned_ipv_6_prefixes: () -> ::Array[::String]
        def network_interface_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#assign_ipv_6_addresses-instance_method
      def assign_ipv_6_addresses: (
                                    ?ipv_6_prefix_count: ::Integer,
                                    ?ipv_6_prefixes: Array[::String],
                                    network_interface_id: ::String,
                                    ?ipv_6_addresses: Array[::String],
                                    ?ipv_6_address_count: ::Integer
                                  ) -> _AssignIpv6AddressesResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssignIpv6AddressesResponseSuccess

      interface _AssignPrivateIpAddressesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssignPrivateIpAddressesResult]
        def network_interface_id: () -> ::String
        def assigned_private_ip_addresses: () -> ::Array[Types::AssignedPrivateIpAddress]
        def assigned_ipv_4_prefixes: () -> ::Array[Types::Ipv4PrefixSpecification]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#assign_private_ip_addresses-instance_method
      def assign_private_ip_addresses: (
                                         ?ipv_4_prefixes: Array[::String],
                                         ?ipv_4_prefix_count: ::Integer,
                                         network_interface_id: ::String,
                                         ?private_ip_addresses: Array[::String],
                                         ?secondary_private_ip_address_count: ::Integer,
                                         ?allow_reassignment: bool
                                       ) -> _AssignPrivateIpAddressesResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssignPrivateIpAddressesResponseSuccess

      interface _AssignPrivateNatGatewayAddressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssignPrivateNatGatewayAddressResult]
        def nat_gateway_id: () -> ::String
        def nat_gateway_addresses: () -> ::Array[Types::NatGatewayAddress]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#assign_private_nat_gateway_address-instance_method
      def assign_private_nat_gateway_address: (
                                                nat_gateway_id: ::String,
                                                ?private_ip_addresses: Array[::String],
                                                ?private_ip_address_count: ::Integer,
                                                ?dry_run: bool
                                              ) -> _AssignPrivateNatGatewayAddressResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssignPrivateNatGatewayAddressResponseSuccess

      interface _AssociateAddressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateAddressResult]
        def association_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_address-instance_method
      def associate_address: (
                               ?allocation_id: ::String,
                               ?instance_id: ::String,
                               ?public_ip: ::String,
                               ?dry_run: bool,
                               ?network_interface_id: ::String,
                               ?private_ip_address: ::String,
                               ?allow_reassociation: bool
                             ) -> _AssociateAddressResponseSuccess
                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateAddressResponseSuccess

      interface _AssociateCapacityReservationBillingOwnerResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateCapacityReservationBillingOwnerResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_capacity_reservation_billing_owner-instance_method
      def associate_capacity_reservation_billing_owner: (
                                                          ?dry_run: bool,
                                                          capacity_reservation_id: ::String,
                                                          unused_reservation_billing_owner_id: ::String
                                                        ) -> _AssociateCapacityReservationBillingOwnerResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateCapacityReservationBillingOwnerResponseSuccess

      interface _AssociateClientVpnTargetNetworkResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateClientVpnTargetNetworkResult]
        def association_id: () -> ::String
        def status: () -> Types::AssociationStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_client_vpn_target_network-instance_method
      def associate_client_vpn_target_network: (
                                                 client_vpn_endpoint_id: ::String,
                                                 subnet_id: ::String,
                                                 ?client_token: ::String,
                                                 ?dry_run: bool
                                               ) -> _AssociateClientVpnTargetNetworkResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateClientVpnTargetNetworkResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_dhcp_options-instance_method
      def associate_dhcp_options: (
                                    dhcp_options_id: ::String,
                                    vpc_id: ::String,
                                    ?dry_run: bool
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _AssociateEnclaveCertificateIamRoleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateEnclaveCertificateIamRoleResult]
        def certificate_s3_bucket_name: () -> ::String
        def certificate_s3_object_key: () -> ::String
        def encryption_kms_key_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_enclave_certificate_iam_role-instance_method
      def associate_enclave_certificate_iam_role: (
                                                    certificate_arn: ::String,
                                                    role_arn: ::String,
                                                    ?dry_run: bool
                                                  ) -> _AssociateEnclaveCertificateIamRoleResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateEnclaveCertificateIamRoleResponseSuccess

      interface _AssociateIamInstanceProfileResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateIamInstanceProfileResult]
        def iam_instance_profile_association: () -> Types::IamInstanceProfileAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_iam_instance_profile-instance_method
      def associate_iam_instance_profile: (
                                            iam_instance_profile: {
                                              arn: ::String?,
                                              name: ::String?
                                            },
                                            instance_id: ::String
                                          ) -> _AssociateIamInstanceProfileResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateIamInstanceProfileResponseSuccess

      interface _AssociateInstanceEventWindowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateInstanceEventWindowResult]
        def instance_event_window: () -> Types::InstanceEventWindow
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_instance_event_window-instance_method
      def associate_instance_event_window: (
                                             ?dry_run: bool,
                                             instance_event_window_id: ::String,
                                             association_target: {
                                               instance_ids: Array[::String]?,
                                               instance_tags: Array[
                                                 {
                                                   key: ::String?,
                                                   value: ::String?
                                                 },
                                               ]?,
                                               dedicated_host_ids: Array[::String]?
                                             }
                                           ) -> _AssociateInstanceEventWindowResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateInstanceEventWindowResponseSuccess

      interface _AssociateIpamByoasnResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateIpamByoasnResult]
        def asn_association: () -> Types::AsnAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_ipam_byoasn-instance_method
      def associate_ipam_byoasn: (
                                   ?dry_run: bool,
                                   asn: ::String,
                                   cidr: ::String
                                 ) -> _AssociateIpamByoasnResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateIpamByoasnResponseSuccess

      interface _AssociateIpamResourceDiscoveryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateIpamResourceDiscoveryResult]
        def ipam_resource_discovery_association: () -> Types::IpamResourceDiscoveryAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_ipam_resource_discovery-instance_method
      def associate_ipam_resource_discovery: (
                                               ?dry_run: bool,
                                               ipam_id: ::String,
                                               ipam_resource_discovery_id: ::String,
                                               ?tag_specifications: Array[
                                                 {
                                                   resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                   tags: Array[
                                                     {
                                                       key: ::String?,
                                                       value: ::String?
                                                     },
                                                   ]?
                                                 },
                                               ],
                                               ?client_token: ::String
                                             ) -> _AssociateIpamResourceDiscoveryResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateIpamResourceDiscoveryResponseSuccess

      interface _AssociateNatGatewayAddressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateNatGatewayAddressResult]
        def nat_gateway_id: () -> ::String
        def nat_gateway_addresses: () -> ::Array[Types::NatGatewayAddress]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_nat_gateway_address-instance_method
      def associate_nat_gateway_address: (
                                           nat_gateway_id: ::String,
                                           allocation_ids: Array[::String],
                                           ?private_ip_addresses: Array[::String],
                                           ?dry_run: bool
                                         ) -> _AssociateNatGatewayAddressResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateNatGatewayAddressResponseSuccess

      interface _AssociateRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateRouteTableResult]
        def association_id: () -> ::String
        def association_state: () -> Types::RouteTableAssociationState
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_route_table-instance_method
      def associate_route_table: (
                                   ?gateway_id: ::String,
                                   ?dry_run: bool,
                                   ?subnet_id: ::String,
                                   route_table_id: ::String
                                 ) -> _AssociateRouteTableResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateRouteTableResponseSuccess

      interface _AssociateSubnetCidrBlockResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateSubnetCidrBlockResult]
        def ipv_6_cidr_block_association: () -> Types::SubnetIpv6CidrBlockAssociation
        def subnet_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_subnet_cidr_block-instance_method
      def associate_subnet_cidr_block: (
                                         ?ipv_6_ipam_pool_id: ::String,
                                         ?ipv_6_netmask_length: ::Integer,
                                         subnet_id: ::String,
                                         ?ipv_6_cidr_block: ::String
                                       ) -> _AssociateSubnetCidrBlockResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateSubnetCidrBlockResponseSuccess

      interface _AssociateTransitGatewayMulticastDomainResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateTransitGatewayMulticastDomainResult]
        def associations: () -> Types::TransitGatewayMulticastDomainAssociations
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_transit_gateway_multicast_domain-instance_method
      def associate_transit_gateway_multicast_domain: (
                                                        transit_gateway_multicast_domain_id: ::String,
                                                        transit_gateway_attachment_id: ::String,
                                                        subnet_ids: Array[::String],
                                                        ?dry_run: bool
                                                      ) -> _AssociateTransitGatewayMulticastDomainResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateTransitGatewayMulticastDomainResponseSuccess

      interface _AssociateTransitGatewayPolicyTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateTransitGatewayPolicyTableResult]
        def association: () -> Types::TransitGatewayPolicyTableAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_transit_gateway_policy_table-instance_method
      def associate_transit_gateway_policy_table: (
                                                    transit_gateway_policy_table_id: ::String,
                                                    transit_gateway_attachment_id: ::String,
                                                    ?dry_run: bool
                                                  ) -> _AssociateTransitGatewayPolicyTableResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateTransitGatewayPolicyTableResponseSuccess

      interface _AssociateTransitGatewayRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateTransitGatewayRouteTableResult]
        def association: () -> Types::TransitGatewayAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_transit_gateway_route_table-instance_method
      def associate_transit_gateway_route_table: (
                                                   transit_gateway_route_table_id: ::String,
                                                   transit_gateway_attachment_id: ::String,
                                                   ?dry_run: bool
                                                 ) -> _AssociateTransitGatewayRouteTableResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateTransitGatewayRouteTableResponseSuccess

      interface _AssociateTrunkInterfaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateTrunkInterfaceResult]
        def interface_association: () -> Types::TrunkInterfaceAssociation
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_trunk_interface-instance_method
      def associate_trunk_interface: (
                                       branch_interface_id: ::String,
                                       trunk_interface_id: ::String,
                                       ?vlan_id: ::Integer,
                                       ?gre_key: ::Integer,
                                       ?client_token: ::String,
                                       ?dry_run: bool
                                     ) -> _AssociateTrunkInterfaceResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateTrunkInterfaceResponseSuccess

      interface _AssociateVpcCidrBlockResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AssociateVpcCidrBlockResult]
        def ipv_6_cidr_block_association: () -> Types::VpcIpv6CidrBlockAssociation
        def cidr_block_association: () -> Types::VpcCidrBlockAssociation
        def vpc_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#associate_vpc_cidr_block-instance_method
      def associate_vpc_cidr_block: (
                                      ?cidr_block: ::String,
                                      ?ipv_6_cidr_block_network_border_group: ::String,
                                      ?ipv_6_pool: ::String,
                                      ?ipv_6_cidr_block: ::String,
                                      ?ipv_4_ipam_pool_id: ::String,
                                      ?ipv_4_netmask_length: ::Integer,
                                      ?ipv_6_ipam_pool_id: ::String,
                                      ?ipv_6_netmask_length: ::Integer,
                                      vpc_id: ::String,
                                      ?amazon_provided_ipv_6_cidr_block: bool
                                    ) -> _AssociateVpcCidrBlockResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AssociateVpcCidrBlockResponseSuccess

      interface _AttachClassicLinkVpcResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AttachClassicLinkVpcResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#attach_classic_link_vpc-instance_method
      def attach_classic_link_vpc: (
                                     ?dry_run: bool,
                                     instance_id: ::String,
                                     vpc_id: ::String,
                                     groups: Array[::String]
                                   ) -> _AttachClassicLinkVpcResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AttachClassicLinkVpcResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#attach_internet_gateway-instance_method
      def attach_internet_gateway: (
                                     ?dry_run: bool,
                                     internet_gateway_id: ::String,
                                     vpc_id: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _AttachNetworkInterfaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AttachNetworkInterfaceResult]
        def attachment_id: () -> ::String
        def network_card_index: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#attach_network_interface-instance_method
      def attach_network_interface: (
                                      ?network_card_index: ::Integer,
                                      ?ena_srd_specification: {
                                        ena_srd_enabled: bool?,
                                        ena_srd_udp_specification: {
                                          ena_srd_udp_enabled: bool?
                                        }?
                                      },
                                      ?dry_run: bool,
                                      network_interface_id: ::String,
                                      instance_id: ::String,
                                      device_index: ::Integer
                                    ) -> _AttachNetworkInterfaceResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AttachNetworkInterfaceResponseSuccess

      interface _AttachVerifiedAccessTrustProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AttachVerifiedAccessTrustProviderResult]
        def verified_access_trust_provider: () -> Types::VerifiedAccessTrustProvider
        def verified_access_instance: () -> Types::VerifiedAccessInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#attach_verified_access_trust_provider-instance_method
      def attach_verified_access_trust_provider: (
                                                   verified_access_instance_id: ::String,
                                                   verified_access_trust_provider_id: ::String,
                                                   ?client_token: ::String,
                                                   ?dry_run: bool
                                                 ) -> _AttachVerifiedAccessTrustProviderResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AttachVerifiedAccessTrustProviderResponseSuccess

      interface _AttachVolumeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::VolumeAttachment]
        def delete_on_termination: () -> bool
        def associated_resource: () -> ::String
        def instance_owning_service: () -> ::String
        def volume_id: () -> ::String
        def instance_id: () -> ::String
        def device: () -> ::String
        def state: () -> ("attaching" | "attached" | "detaching" | "detached" | "busy")
        def attach_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#attach_volume-instance_method
      def attach_volume: (
                           device: ::String,
                           instance_id: ::String,
                           volume_id: ::String,
                           ?dry_run: bool
                         ) -> _AttachVolumeResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AttachVolumeResponseSuccess

      interface _AttachVpnGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AttachVpnGatewayResult]
        def vpc_attachment: () -> Types::VpcAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#attach_vpn_gateway-instance_method
      def attach_vpn_gateway: (
                                vpc_id: ::String,
                                vpn_gateway_id: ::String,
                                ?dry_run: bool
                              ) -> _AttachVpnGatewayResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AttachVpnGatewayResponseSuccess

      interface _AuthorizeClientVpnIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AuthorizeClientVpnIngressResult]
        def status: () -> Types::ClientVpnAuthorizationRuleStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#authorize_client_vpn_ingress-instance_method
      def authorize_client_vpn_ingress: (
                                          client_vpn_endpoint_id: ::String,
                                          target_network_cidr: ::String,
                                          ?access_group_id: ::String,
                                          ?authorize_all_groups: bool,
                                          ?description: ::String,
                                          ?client_token: ::String,
                                          ?dry_run: bool
                                        ) -> _AuthorizeClientVpnIngressResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AuthorizeClientVpnIngressResponseSuccess

      interface _AuthorizeSecurityGroupEgressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AuthorizeSecurityGroupEgressResult]
        def return: () -> bool
        def security_group_rules: () -> ::Array[Types::SecurityGroupRule]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#authorize_security_group_egress-instance_method
      def authorize_security_group_egress: (
                                             ?tag_specifications: Array[
                                               {
                                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                 tags: Array[
                                                   {
                                                     key: ::String?,
                                                     value: ::String?
                                                   },
                                                 ]?
                                               },
                                             ],
                                             ?dry_run: bool,
                                             group_id: ::String,
                                             ?source_security_group_name: ::String,
                                             ?source_security_group_owner_id: ::String,
                                             ?ip_protocol: ::String,
                                             ?from_port: ::Integer,
                                             ?to_port: ::Integer,
                                             ?cidr_ip: ::String,
                                             ?ip_permissions: Array[
                                               {
                                                 ip_protocol: ::String?,
                                                 from_port: ::Integer?,
                                                 to_port: ::Integer?,
                                                 user_id_group_pairs: Array[
                                                   {
                                                     description: ::String?,
                                                     user_id: ::String?,
                                                     group_name: ::String?,
                                                     group_id: ::String?,
                                                     vpc_id: ::String?,
                                                     vpc_peering_connection_id: ::String?,
                                                     peering_status: ::String?
                                                   },
                                                 ]?,
                                                 ip_ranges: Array[
                                                   {
                                                     description: ::String?,
                                                     cidr_ip: ::String?
                                                   },
                                                 ]?,
                                                 ipv_6_ranges: Array[
                                                   {
                                                     description: ::String?,
                                                     cidr_ipv_6: ::String?
                                                   },
                                                 ]?,
                                                 prefix_list_ids: Array[
                                                   {
                                                     description: ::String?,
                                                     prefix_list_id: ::String?
                                                   },
                                                 ]?
                                               },
                                             ]
                                           ) -> _AuthorizeSecurityGroupEgressResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AuthorizeSecurityGroupEgressResponseSuccess

      interface _AuthorizeSecurityGroupIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::AuthorizeSecurityGroupIngressResult]
        def return: () -> bool
        def security_group_rules: () -> ::Array[Types::SecurityGroupRule]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#authorize_security_group_ingress-instance_method
      def authorize_security_group_ingress: (
                                              ?cidr_ip: ::String,
                                              ?from_port: ::Integer,
                                              ?group_id: ::String,
                                              ?group_name: ::String,
                                              ?ip_permissions: Array[
                                                {
                                                  ip_protocol: ::String?,
                                                  from_port: ::Integer?,
                                                  to_port: ::Integer?,
                                                  user_id_group_pairs: Array[
                                                    {
                                                      description: ::String?,
                                                      user_id: ::String?,
                                                      group_name: ::String?,
                                                      group_id: ::String?,
                                                      vpc_id: ::String?,
                                                      vpc_peering_connection_id: ::String?,
                                                      peering_status: ::String?
                                                    },
                                                  ]?,
                                                  ip_ranges: Array[
                                                    {
                                                      description: ::String?,
                                                      cidr_ip: ::String?
                                                    },
                                                  ]?,
                                                  ipv_6_ranges: Array[
                                                    {
                                                      description: ::String?,
                                                      cidr_ipv_6: ::String?
                                                    },
                                                  ]?,
                                                  prefix_list_ids: Array[
                                                    {
                                                      description: ::String?,
                                                      prefix_list_id: ::String?
                                                    },
                                                  ]?
                                                },
                                              ],
                                              ?ip_protocol: ::String,
                                              ?source_security_group_name: ::String,
                                              ?source_security_group_owner_id: ::String,
                                              ?to_port: ::Integer,
                                              ?tag_specifications: Array[
                                                {
                                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                  tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ]?
                                                },
                                              ],
                                              ?dry_run: bool
                                            ) -> _AuthorizeSecurityGroupIngressResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _AuthorizeSecurityGroupIngressResponseSuccess

      interface _BundleInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BundleInstanceResult]
        def bundle_task: () -> Types::BundleTask
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#bundle_instance-instance_method
      def bundle_instance: (
                             instance_id: ::String,
                             storage: {
                               s3: {
                                 aws_access_key_id: ::String?,
                                 bucket: ::String?,
                                 prefix: ::String?,
                                 upload_policy: ::String?,
                                 upload_policy_signature: ::String?
                               }?
                             },
                             ?dry_run: bool
                           ) -> _BundleInstanceResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BundleInstanceResponseSuccess

      interface _CancelBundleTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelBundleTaskResult]
        def bundle_task: () -> Types::BundleTask
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_bundle_task-instance_method
      def cancel_bundle_task: (
                                bundle_id: ::String,
                                ?dry_run: bool
                              ) -> _CancelBundleTaskResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelBundleTaskResponseSuccess

      interface _CancelCapacityReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelCapacityReservationResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_capacity_reservation-instance_method
      def cancel_capacity_reservation: (
                                         capacity_reservation_id: ::String,
                                         ?dry_run: bool
                                       ) -> _CancelCapacityReservationResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelCapacityReservationResponseSuccess

      interface _CancelCapacityReservationFleetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelCapacityReservationFleetsResult]
        def successful_fleet_cancellations: () -> ::Array[Types::CapacityReservationFleetCancellationState]
        def failed_fleet_cancellations: () -> ::Array[Types::FailedCapacityReservationFleetCancellationResult]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_capacity_reservation_fleets-instance_method
      def cancel_capacity_reservation_fleets: (
                                                ?dry_run: bool,
                                                capacity_reservation_fleet_ids: Array[::String]
                                              ) -> _CancelCapacityReservationFleetsResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelCapacityReservationFleetsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_conversion_task-instance_method
      def cancel_conversion_task: (
                                    ?dry_run: bool,
                                    conversion_task_id: ::String,
                                    ?reason_message: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_export_task-instance_method
      def cancel_export_task: (
                                export_task_id: ::String
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _CancelImageLaunchPermissionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelImageLaunchPermissionResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_image_launch_permission-instance_method
      def cancel_image_launch_permission: (
                                            image_id: ::String,
                                            ?dry_run: bool
                                          ) -> _CancelImageLaunchPermissionResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelImageLaunchPermissionResponseSuccess

      interface _CancelImportTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelImportTaskResult]
        def import_task_id: () -> ::String
        def previous_state: () -> ::String
        def state: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_import_task-instance_method
      def cancel_import_task: (
                                ?cancel_reason: ::String,
                                ?dry_run: bool,
                                ?import_task_id: ::String
                              ) -> _CancelImportTaskResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelImportTaskResponseSuccess

      interface _CancelReservedInstancesListingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelReservedInstancesListingResult]
        def reserved_instances_listings: () -> ::Array[Types::ReservedInstancesListing]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_reserved_instances_listing-instance_method
      def cancel_reserved_instances_listing: (
                                               reserved_instances_listing_id: ::String
                                             ) -> _CancelReservedInstancesListingResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelReservedInstancesListingResponseSuccess

      interface _CancelSpotFleetRequestsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelSpotFleetRequestsResponse]
        def successful_fleet_requests: () -> ::Array[Types::CancelSpotFleetRequestsSuccessItem]
        def unsuccessful_fleet_requests: () -> ::Array[Types::CancelSpotFleetRequestsErrorItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_spot_fleet_requests-instance_method
      def cancel_spot_fleet_requests: (
                                        ?dry_run: bool,
                                        spot_fleet_request_ids: Array[::String],
                                        terminate_instances: bool
                                      ) -> _CancelSpotFleetRequestsResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelSpotFleetRequestsResponseSuccess

      interface _CancelSpotInstanceRequestsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelSpotInstanceRequestsResult]
        def cancelled_spot_instance_requests: () -> ::Array[Types::CancelledSpotInstanceRequest]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#cancel_spot_instance_requests-instance_method
      def cancel_spot_instance_requests: (
                                           ?dry_run: bool,
                                           spot_instance_request_ids: Array[::String]
                                         ) -> _CancelSpotInstanceRequestsResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelSpotInstanceRequestsResponseSuccess

      interface _ConfirmProductInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ConfirmProductInstanceResult]
        def return: () -> bool
        def owner_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#confirm_product_instance-instance_method
      def confirm_product_instance: (
                                      instance_id: ::String,
                                      product_code: ::String,
                                      ?dry_run: bool
                                    ) -> _ConfirmProductInstanceResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ConfirmProductInstanceResponseSuccess

      interface _CopyFpgaImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyFpgaImageResult]
        def fpga_image_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#copy_fpga_image-instance_method
      def copy_fpga_image: (
                             ?dry_run: bool,
                             source_fpga_image_id: ::String,
                             ?description: ::String,
                             ?name: ::String,
                             source_region: ::String,
                             ?client_token: ::String
                           ) -> _CopyFpgaImageResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyFpgaImageResponseSuccess

      interface _CopyImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopyImageResult]
        def image_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#copy_image-instance_method
      def copy_image: (
                        ?client_token: ::String,
                        ?description: ::String,
                        ?encrypted: bool,
                        ?kms_key_id: ::String,
                        name: ::String,
                        source_image_id: ::String,
                        source_region: ::String,
                        ?destination_outpost_arn: ::String,
                        ?copy_image_tags: bool,
                        ?tag_specifications: Array[
                          {
                            resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                            tags: Array[
                              {
                                key: ::String?,
                                value: ::String?
                              },
                            ]?
                          },
                        ],
                        ?dry_run: bool
                      ) -> _CopyImageResponseSuccess
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopyImageResponseSuccess

      interface _CopySnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CopySnapshotResult]
        def tags: () -> ::Array[Types::Tag]
        def snapshot_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#copy_snapshot-instance_method
      def copy_snapshot: (
                           ?description: ::String,
                           ?destination_outpost_arn: ::String,
                           ?destination_region: ::String,
                           ?encrypted: bool,
                           ?kms_key_id: ::String,
                           ?presigned_url: ::String,
                           source_region: ::String,
                           source_snapshot_id: ::String,
                           ?tag_specifications: Array[
                             {
                               resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                               tags: Array[
                                 {
                                   key: ::String?,
                                   value: ::String?
                                 },
                               ]?
                             },
                           ],
                           ?dry_run: bool
                         ) -> _CopySnapshotResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CopySnapshotResponseSuccess

      interface _CreateCapacityReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCapacityReservationResult]
        def capacity_reservation: () -> Types::CapacityReservation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_capacity_reservation-instance_method
      def create_capacity_reservation: (
                                         ?client_token: ::String,
                                         instance_type: ::String,
                                         instance_platform: ("Linux/UNIX" | "Red Hat Enterprise Linux" | "SUSE Linux" | "Windows" | "Windows with SQL Server" | "Windows with SQL Server Enterprise" | "Windows with SQL Server Standard" | "Windows with SQL Server Web" | "Linux with SQL Server Standard" | "Linux with SQL Server Web" | "Linux with SQL Server Enterprise" | "RHEL with SQL Server Standard" | "RHEL with SQL Server Enterprise" | "RHEL with SQL Server Web" | "RHEL with HA" | "RHEL with HA and SQL Server Standard" | "RHEL with HA and SQL Server Enterprise" | "Ubuntu Pro"),
                                         ?availability_zone: ::String,
                                         ?availability_zone_id: ::String,
                                         ?tenancy: ("default" | "dedicated"),
                                         instance_count: ::Integer,
                                         ?ebs_optimized: bool,
                                         ?ephemeral_storage: bool,
                                         ?end_date: ::Time,
                                         ?end_date_type: ("unlimited" | "limited"),
                                         ?instance_match_criteria: ("open" | "targeted"),
                                         ?tag_specifications: Array[
                                           {
                                             resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                             tags: Array[
                                               {
                                                 key: ::String?,
                                                 value: ::String?
                                               },
                                             ]?
                                           },
                                         ],
                                         ?dry_run: bool,
                                         ?outpost_arn: ::String,
                                         ?placement_group_arn: ::String
                                       ) -> _CreateCapacityReservationResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCapacityReservationResponseSuccess

      interface _CreateCapacityReservationBySplittingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCapacityReservationBySplittingResult]
        def source_capacity_reservation: () -> Types::CapacityReservation
        def destination_capacity_reservation: () -> Types::CapacityReservation
        def instance_count: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_capacity_reservation_by_splitting-instance_method
      def create_capacity_reservation_by_splitting: (
                                                      ?dry_run: bool,
                                                      ?client_token: ::String,
                                                      source_capacity_reservation_id: ::String,
                                                      instance_count: ::Integer,
                                                      ?tag_specifications: Array[
                                                        {
                                                          resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                          tags: Array[
                                                            {
                                                              key: ::String?,
                                                              value: ::String?
                                                            },
                                                          ]?
                                                        },
                                                      ]
                                                    ) -> _CreateCapacityReservationBySplittingResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCapacityReservationBySplittingResponseSuccess

      interface _CreateCapacityReservationFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCapacityReservationFleetResult]
        def capacity_reservation_fleet_id: () -> ::String
        def state: () -> ("submitted" | "modifying" | "active" | "partially_fulfilled" | "expiring" | "expired" | "cancelling" | "cancelled" | "failed")
        def total_target_capacity: () -> ::Integer
        def total_fulfilled_capacity: () -> ::Float
        def instance_match_criteria: () -> ("open")
        def allocation_strategy: () -> ::String
        def create_time: () -> ::Time
        def end_date: () -> ::Time
        def tenancy: () -> ("default")
        def fleet_capacity_reservations: () -> ::Array[Types::FleetCapacityReservation]
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_capacity_reservation_fleet-instance_method
      def create_capacity_reservation_fleet: (
                                               ?allocation_strategy: ::String,
                                               ?client_token: ::String,
                                               instance_type_specifications: Array[
                                                 {
                                                   instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                                   instance_platform: ("Linux/UNIX" | "Red Hat Enterprise Linux" | "SUSE Linux" | "Windows" | "Windows with SQL Server" | "Windows with SQL Server Enterprise" | "Windows with SQL Server Standard" | "Windows with SQL Server Web" | "Linux with SQL Server Standard" | "Linux with SQL Server Web" | "Linux with SQL Server Enterprise" | "RHEL with SQL Server Standard" | "RHEL with SQL Server Enterprise" | "RHEL with SQL Server Web" | "RHEL with HA" | "RHEL with HA and SQL Server Standard" | "RHEL with HA and SQL Server Enterprise" | "Ubuntu Pro")?,
                                                   weight: ::Float?,
                                                   availability_zone: ::String?,
                                                   availability_zone_id: ::String?,
                                                   ebs_optimized: bool?,
                                                   priority: ::Integer?
                                                 },
                                               ],
                                               ?tenancy: ("default"),
                                               total_target_capacity: ::Integer,
                                               ?end_date: ::Time,
                                               ?instance_match_criteria: ("open"),
                                               ?tag_specifications: Array[
                                                 {
                                                   resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                   tags: Array[
                                                     {
                                                       key: ::String?,
                                                       value: ::String?
                                                     },
                                                   ]?
                                                 },
                                               ],
                                               ?dry_run: bool
                                             ) -> _CreateCapacityReservationFleetResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCapacityReservationFleetResponseSuccess

      interface _CreateCarrierGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCarrierGatewayResult]
        def carrier_gateway: () -> Types::CarrierGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_carrier_gateway-instance_method
      def create_carrier_gateway: (
                                    vpc_id: ::String,
                                    ?tag_specifications: Array[
                                      {
                                        resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                        tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]?
                                      },
                                    ],
                                    ?dry_run: bool,
                                    ?client_token: ::String
                                  ) -> _CreateCarrierGatewayResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCarrierGatewayResponseSuccess

      interface _CreateClientVpnEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateClientVpnEndpointResult]
        def client_vpn_endpoint_id: () -> ::String
        def status: () -> Types::ClientVpnEndpointStatus
        def dns_name: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_client_vpn_endpoint-instance_method
      def create_client_vpn_endpoint: (
                                        client_cidr_block: ::String,
                                        server_certificate_arn: ::String,
                                        authentication_options: Array[
                                          {
                                            type: ("certificate-authentication" | "directory-service-authentication" | "federated-authentication")?,
                                            active_directory: {
                                              directory_id: ::String?
                                            }?,
                                            mutual_authentication: {
                                              client_root_certificate_chain_arn: ::String?
                                            }?,
                                            federated_authentication: {
                                              saml_provider_arn: ::String?,
                                              self_service_saml_provider_arn: ::String?
                                            }?
                                          },
                                        ],
                                        connection_log_options: {
                                          enabled: bool?,
                                          cloudwatch_log_group: ::String?,
                                          cloudwatch_log_stream: ::String?
                                        },
                                        ?dns_servers: Array[::String],
                                        ?transport_protocol: ("tcp" | "udp"),
                                        ?vpn_port: ::Integer,
                                        ?description: ::String,
                                        ?split_tunnel: bool,
                                        ?dry_run: bool,
                                        ?client_token: ::String,
                                        ?tag_specifications: Array[
                                          {
                                            resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                            tags: Array[
                                              {
                                                key: ::String?,
                                                value: ::String?
                                              },
                                            ]?
                                          },
                                        ],
                                        ?security_group_ids: Array[::String],
                                        ?vpc_id: ::String,
                                        ?self_service_portal: ("enabled" | "disabled"),
                                        ?client_connect_options: {
                                          enabled: bool?,
                                          lambda_function_arn: ::String?
                                        },
                                        ?session_timeout_hours: ::Integer,
                                        ?client_login_banner_options: {
                                          enabled: bool?,
                                          banner_text: ::String?
                                        }
                                      ) -> _CreateClientVpnEndpointResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateClientVpnEndpointResponseSuccess

      interface _CreateClientVpnRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateClientVpnRouteResult]
        def status: () -> Types::ClientVpnRouteStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_client_vpn_route-instance_method
      def create_client_vpn_route: (
                                     client_vpn_endpoint_id: ::String,
                                     destination_cidr_block: ::String,
                                     target_vpc_subnet_id: ::String,
                                     ?description: ::String,
                                     ?client_token: ::String,
                                     ?dry_run: bool
                                   ) -> _CreateClientVpnRouteResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateClientVpnRouteResponseSuccess

      interface _CreateCoipCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCoipCidrResult]
        def coip_cidr: () -> Types::CoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_coip_cidr-instance_method
      def create_coip_cidr: (
                              cidr: ::String,
                              coip_pool_id: ::String,
                              ?dry_run: bool
                            ) -> _CreateCoipCidrResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCoipCidrResponseSuccess

      interface _CreateCoipPoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCoipPoolResult]
        def coip_pool: () -> Types::CoipPool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_coip_pool-instance_method
      def create_coip_pool: (
                              local_gateway_route_table_id: ::String,
                              ?tag_specifications: Array[
                                {
                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                  tags: Array[
                                    {
                                      key: ::String?,
                                      value: ::String?
                                    },
                                  ]?
                                },
                              ],
                              ?dry_run: bool
                            ) -> _CreateCoipPoolResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCoipPoolResponseSuccess

      interface _CreateCustomerGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateCustomerGatewayResult]
        def customer_gateway: () -> Types::CustomerGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_customer_gateway-instance_method
      def create_customer_gateway: (
                                     ?bgp_asn: ::Integer,
                                     ?public_ip: ::String,
                                     ?certificate_arn: ::String,
                                     type: ("ipsec.1"),
                                     ?tag_specifications: Array[
                                       {
                                         resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                         tags: Array[
                                           {
                                             key: ::String?,
                                             value: ::String?
                                           },
                                         ]?
                                       },
                                     ],
                                     ?device_name: ::String,
                                     ?ip_address: ::String,
                                     ?bgp_asn_extended: ::Integer,
                                     ?dry_run: bool
                                   ) -> _CreateCustomerGatewayResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateCustomerGatewayResponseSuccess

      interface _CreateDefaultSubnetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDefaultSubnetResult]
        def subnet: () -> Types::Subnet
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_default_subnet-instance_method
      def create_default_subnet: (
                                   availability_zone: ::String,
                                   ?dry_run: bool,
                                   ?ipv_6_native: bool
                                 ) -> _CreateDefaultSubnetResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDefaultSubnetResponseSuccess

      interface _CreateDefaultVpcResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDefaultVpcResult]
        def vpc: () -> Types::Vpc
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_default_vpc-instance_method
      def create_default_vpc: (
                                ?dry_run: bool
                              ) -> _CreateDefaultVpcResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDefaultVpcResponseSuccess

      interface _CreateDhcpOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDhcpOptionsResult]
        def dhcp_options: () -> Types::DhcpOptions
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_dhcp_options-instance_method
      def create_dhcp_options: (
                                 dhcp_configurations: Array[
                                   {
                                     key: ::String?,
                                     values: Array[::String]?
                                   },
                                 ],
                                 ?tag_specifications: Array[
                                   {
                                     resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                     tags: Array[
                                       {
                                         key: ::String?,
                                         value: ::String?
                                       },
                                     ]?
                                   },
                                 ],
                                 ?dry_run: bool
                               ) -> _CreateDhcpOptionsResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDhcpOptionsResponseSuccess

      interface _CreateEgressOnlyInternetGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateEgressOnlyInternetGatewayResult]
        def client_token: () -> ::String
        def egress_only_internet_gateway: () -> Types::EgressOnlyInternetGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_egress_only_internet_gateway-instance_method
      def create_egress_only_internet_gateway: (
                                                 ?client_token: ::String,
                                                 ?dry_run: bool,
                                                 vpc_id: ::String,
                                                 ?tag_specifications: Array[
                                                   {
                                                     resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                     tags: Array[
                                                       {
                                                         key: ::String?,
                                                         value: ::String?
                                                       },
                                                     ]?
                                                   },
                                                 ]
                                               ) -> _CreateEgressOnlyInternetGatewayResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateEgressOnlyInternetGatewayResponseSuccess

      interface _CreateFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateFleetResult]
        def fleet_id: () -> ::String
        def errors: () -> ::Array[Types::CreateFleetError]
        def instances: () -> ::Array[Types::CreateFleetInstance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_fleet-instance_method
      def create_fleet: (
                          ?dry_run: bool,
                          ?client_token: ::String,
                          ?spot_options: {
                            allocation_strategy: ("lowest-price" | "diversified" | "capacity-optimized" | "capacity-optimized-prioritized" | "price-capacity-optimized")?,
                            maintenance_strategies: {
                              capacity_rebalance: {
                                replacement_strategy: ("launch" | "launch-before-terminate")?,
                                termination_delay: ::Integer?
                              }?
                            }?,
                            instance_interruption_behavior: ("hibernate" | "stop" | "terminate")?,
                            instance_pools_to_use_count: ::Integer?,
                            single_instance_type: bool?,
                            single_availability_zone: bool?,
                            min_target_capacity: ::Integer?,
                            max_total_price: ::String?
                          },
                          ?on_demand_options: {
                            allocation_strategy: ("lowest-price" | "prioritized")?,
                            capacity_reservation_options: {
                              usage_strategy: ("use-capacity-reservations-first" | "use-capacity-reservations-only" | "none")?
                            }?,
                            single_instance_type: bool?,
                            single_availability_zone: bool?,
                            min_target_capacity: ::Integer?,
                            max_total_price: ::String?
                          },
                          ?excess_capacity_termination_policy: ("no-termination" | "termination"),
                          launch_template_configs: Array[
                            {
                              launch_template_specification: {
                                launch_template_id: ::String?,
                                launch_template_name: ::String?,
                                version: ::String?
                              }?,
                              overrides: Array[
                                {
                                  instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                  max_price: ::String?,
                                  subnet_id: ::String?,
                                  availability_zone: ::String?,
                                  weighted_capacity: ::Float?,
                                  priority: ::Float?,
                                  placement: {
                                    affinity: ::String?,
                                    group_name: ::String?,
                                    partition_number: ::Integer?,
                                    host_id: ::String?,
                                    tenancy: ("default" | "dedicated" | "host")?,
                                    spread_domain: ::String?,
                                    host_resource_group_arn: ::String?,
                                    group_id: ::String?,
                                    availability_zone: ::String?
                                  }?,
                                  instance_requirements: {
                                    v_cpu_count: {
                                      min: ::Integer,
                                      max: ::Integer?
                                    },
                                    memory_mi_b: {
                                      min: ::Integer,
                                      max: ::Integer?
                                    },
                                    cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                    memory_gi_b_per_v_cpu: {
                                      min: ::Float?,
                                      max: ::Float?
                                    }?,
                                    excluded_instance_types: Array[::String]?,
                                    instance_generations: Array[("current" | "previous")]?,
                                    spot_max_price_percentage_over_lowest_price: ::Integer?,
                                    on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                    bare_metal: ("included" | "required" | "excluded")?,
                                    burstable_performance: ("included" | "required" | "excluded")?,
                                    require_hibernate_support: bool?,
                                    network_interface_count: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    local_storage: ("included" | "required" | "excluded")?,
                                    local_storage_types: Array[("hdd" | "ssd")]?,
                                    total_local_storage_gb: {
                                      min: ::Float?,
                                      max: ::Float?
                                    }?,
                                    baseline_ebs_bandwidth_mbps: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                    accelerator_count: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                    accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                    accelerator_total_memory_mi_b: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    network_bandwidth_gbps: {
                                      min: ::Float?,
                                      max: ::Float?
                                    }?,
                                    allowed_instance_types: Array[::String]?,
                                    max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                  }?,
                                  image_id: ::String?
                                },
                              ]?
                            },
                          ],
                          target_capacity_specification: {
                            total_target_capacity: ::Integer,
                            on_demand_target_capacity: ::Integer?,
                            spot_target_capacity: ::Integer?,
                            default_target_capacity_type: ("spot" | "on-demand" | "capacity-block")?,
                            target_capacity_unit_type: ("vcpu" | "memory-mib" | "units")?
                          },
                          ?terminate_instances_with_expiration: bool,
                          ?type: ("request" | "maintain" | "instant"),
                          ?valid_from: ::Time,
                          ?valid_until: ::Time,
                          ?replace_unhealthy_instances: bool,
                          ?tag_specifications: Array[
                            {
                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                              tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ]?
                            },
                          ],
                          ?context: ::String
                        ) -> _CreateFleetResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateFleetResponseSuccess

      interface _CreateFlowLogsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateFlowLogsResult]
        def client_token: () -> ::String
        def flow_log_ids: () -> ::Array[::String]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_flow_logs-instance_method
      def create_flow_logs: (
                              ?dry_run: bool,
                              ?client_token: ::String,
                              ?deliver_logs_permission_arn: ::String,
                              ?deliver_cross_account_role: ::String,
                              ?log_group_name: ::String,
                              resource_ids: Array[::String],
                              resource_type: ("VPC" | "Subnet" | "NetworkInterface" | "TransitGateway" | "TransitGatewayAttachment"),
                              ?traffic_type: ("ACCEPT" | "REJECT" | "ALL"),
                              ?log_destination_type: ("cloud-watch-logs" | "s3" | "kinesis-data-firehose"),
                              ?log_destination: ::String,
                              ?log_format: ::String,
                              ?tag_specifications: Array[
                                {
                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                  tags: Array[
                                    {
                                      key: ::String?,
                                      value: ::String?
                                    },
                                  ]?
                                },
                              ],
                              ?max_aggregation_interval: ::Integer,
                              ?destination_options: {
                                file_format: ("plain-text" | "parquet")?,
                                hive_compatible_partitions: bool?,
                                per_hour_partition: bool?
                              }
                            ) -> _CreateFlowLogsResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateFlowLogsResponseSuccess

      interface _CreateFpgaImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateFpgaImageResult]
        def fpga_image_id: () -> ::String
        def fpga_image_global_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_fpga_image-instance_method
      def create_fpga_image: (
                               ?dry_run: bool,
                               input_storage_location: {
                                 bucket: ::String?,
                                 key: ::String?
                               },
                               ?logs_storage_location: {
                                 bucket: ::String?,
                                 key: ::String?
                               },
                               ?description: ::String,
                               ?name: ::String,
                               ?client_token: ::String,
                               ?tag_specifications: Array[
                                 {
                                   resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                   tags: Array[
                                     {
                                       key: ::String?,
                                       value: ::String?
                                     },
                                   ]?
                                 },
                               ]
                             ) -> _CreateFpgaImageResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateFpgaImageResponseSuccess

      interface _CreateImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateImageResult]
        def image_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_image-instance_method
      def create_image: (
                          ?tag_specifications: Array[
                            {
                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                              tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ]?
                            },
                          ],
                          ?dry_run: bool,
                          instance_id: ::String,
                          name: ::String,
                          ?description: ::String,
                          ?no_reboot: bool,
                          ?block_device_mappings: Array[
                            {
                              ebs: {
                                delete_on_termination: bool?,
                                iops: ::Integer?,
                                snapshot_id: ::String?,
                                volume_size: ::Integer?,
                                volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                kms_key_id: ::String?,
                                throughput: ::Integer?,
                                outpost_arn: ::String?,
                                encrypted: bool?
                              }?,
                              no_device: ::String?,
                              device_name: ::String?,
                              virtual_name: ::String?
                            },
                          ]
                        ) -> _CreateImageResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateImageResponseSuccess

      interface _CreateInstanceConnectEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInstanceConnectEndpointResult]
        def instance_connect_endpoint: () -> Types::Ec2InstanceConnectEndpoint
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_instance_connect_endpoint-instance_method
      def create_instance_connect_endpoint: (
                                              ?dry_run: bool,
                                              subnet_id: ::String,
                                              ?security_group_ids: Array[::String],
                                              ?preserve_client_ip: bool,
                                              ?client_token: ::String,
                                              ?tag_specifications: Array[
                                                {
                                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                  tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ]?
                                                },
                                              ]
                                            ) -> _CreateInstanceConnectEndpointResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInstanceConnectEndpointResponseSuccess

      interface _CreateInstanceEventWindowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInstanceEventWindowResult]
        def instance_event_window: () -> Types::InstanceEventWindow
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_instance_event_window-instance_method
      def create_instance_event_window: (
                                          ?dry_run: bool,
                                          ?name: ::String,
                                          ?time_ranges: Array[
                                            {
                                              start_week_day: ("sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday")?,
                                              start_hour: ::Integer?,
                                              end_week_day: ("sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday")?,
                                              end_hour: ::Integer?
                                            },
                                          ],
                                          ?cron_expression: ::String,
                                          ?tag_specifications: Array[
                                            {
                                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                              tags: Array[
                                                {
                                                  key: ::String?,
                                                  value: ::String?
                                                },
                                              ]?
                                            },
                                          ]
                                        ) -> _CreateInstanceEventWindowResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInstanceEventWindowResponseSuccess

      interface _CreateInstanceExportTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInstanceExportTaskResult]
        def export_task: () -> Types::ExportTask
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_instance_export_task-instance_method
      def create_instance_export_task: (
                                         ?tag_specifications: Array[
                                           {
                                             resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                             tags: Array[
                                               {
                                                 key: ::String?,
                                                 value: ::String?
                                               },
                                             ]?
                                           },
                                         ],
                                         ?description: ::String,
                                         instance_id: ::String,
                                         target_environment: ("citrix" | "vmware" | "microsoft"),
                                         export_to_s3_task: {
                                           disk_image_format: ("VMDK" | "RAW" | "VHD")?,
                                           container_format: ("ova")?,
                                           s3_bucket: ::String?,
                                           s3_prefix: ::String?
                                         }
                                       ) -> _CreateInstanceExportTaskResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInstanceExportTaskResponseSuccess

      interface _CreateInternetGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInternetGatewayResult]
        def internet_gateway: () -> Types::InternetGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_internet_gateway-instance_method
      def create_internet_gateway: (
                                     ?tag_specifications: Array[
                                       {
                                         resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                         tags: Array[
                                           {
                                             key: ::String?,
                                             value: ::String?
                                           },
                                         ]?
                                       },
                                     ],
                                     ?dry_run: bool
                                   ) -> _CreateInternetGatewayResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInternetGatewayResponseSuccess

      interface _CreateIpamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateIpamResult]
        def ipam: () -> Types::Ipam
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_ipam-instance_method
      def create_ipam: (
                         ?dry_run: bool,
                         ?description: ::String,
                         ?operating_regions: Array[
                           {
                             region_name: ::String?
                           },
                         ],
                         ?tag_specifications: Array[
                           {
                             resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                             tags: Array[
                               {
                                 key: ::String?,
                                 value: ::String?
                               },
                             ]?
                           },
                         ],
                         ?client_token: ::String,
                         ?tier: ("free" | "advanced"),
                         ?enable_private_gua: bool
                       ) -> _CreateIpamResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIpamResponseSuccess

      interface _CreateIpamExternalResourceVerificationTokenResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateIpamExternalResourceVerificationTokenResult]
        def ipam_external_resource_verification_token: () -> Types::IpamExternalResourceVerificationToken
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_ipam_external_resource_verification_token-instance_method
      def create_ipam_external_resource_verification_token: (
                                                              ?dry_run: bool,
                                                              ipam_id: ::String,
                                                              ?tag_specifications: Array[
                                                                {
                                                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                                  tags: Array[
                                                                    {
                                                                      key: ::String?,
                                                                      value: ::String?
                                                                    },
                                                                  ]?
                                                                },
                                                              ],
                                                              ?client_token: ::String
                                                            ) -> _CreateIpamExternalResourceVerificationTokenResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIpamExternalResourceVerificationTokenResponseSuccess

      interface _CreateIpamPoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateIpamPoolResult]
        def ipam_pool: () -> Types::IpamPool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_ipam_pool-instance_method
      def create_ipam_pool: (
                              ?dry_run: bool,
                              ipam_scope_id: ::String,
                              ?locale: ::String,
                              ?source_ipam_pool_id: ::String,
                              ?description: ::String,
                              address_family: ("ipv4" | "ipv6"),
                              ?auto_import: bool,
                              ?publicly_advertisable: bool,
                              ?allocation_min_netmask_length: ::Integer,
                              ?allocation_max_netmask_length: ::Integer,
                              ?allocation_default_netmask_length: ::Integer,
                              ?allocation_resource_tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ],
                              ?tag_specifications: Array[
                                {
                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                  tags: Array[
                                    {
                                      key: ::String?,
                                      value: ::String?
                                    },
                                  ]?
                                },
                              ],
                              ?client_token: ::String,
                              ?aws_service: ("ec2"),
                              ?public_ip_source: ("amazon" | "byoip"),
                              ?source_resource: {
                                resource_id: ::String?,
                                resource_type: ("vpc")?,
                                resource_region: ::String?,
                                resource_owner: ::String?
                              }
                            ) -> _CreateIpamPoolResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIpamPoolResponseSuccess

      interface _CreateIpamResourceDiscoveryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateIpamResourceDiscoveryResult]
        def ipam_resource_discovery: () -> Types::IpamResourceDiscovery
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_ipam_resource_discovery-instance_method
      def create_ipam_resource_discovery: (
                                            ?dry_run: bool,
                                            ?description: ::String,
                                            ?operating_regions: Array[
                                              {
                                                region_name: ::String?
                                              },
                                            ],
                                            ?tag_specifications: Array[
                                              {
                                                resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                tags: Array[
                                                  {
                                                    key: ::String?,
                                                    value: ::String?
                                                  },
                                                ]?
                                              },
                                            ],
                                            ?client_token: ::String
                                          ) -> _CreateIpamResourceDiscoveryResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIpamResourceDiscoveryResponseSuccess

      interface _CreateIpamScopeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateIpamScopeResult]
        def ipam_scope: () -> Types::IpamScope
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_ipam_scope-instance_method
      def create_ipam_scope: (
                               ?dry_run: bool,
                               ipam_id: ::String,
                               ?description: ::String,
                               ?tag_specifications: Array[
                                 {
                                   resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                   tags: Array[
                                     {
                                       key: ::String?,
                                       value: ::String?
                                     },
                                   ]?
                                 },
                               ],
                               ?client_token: ::String
                             ) -> _CreateIpamScopeResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIpamScopeResponseSuccess

      interface _CreateKeyPairResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::KeyPair]
        def key_pair_id: () -> ::String
        def tags: () -> ::Array[Types::Tag]
        def key_name: () -> ::String
        def key_fingerprint: () -> ::String
        def key_material: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_key_pair-instance_method
      def create_key_pair: (
                             key_name: ::String,
                             ?key_type: ("rsa" | "ed25519"),
                             ?tag_specifications: Array[
                               {
                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                 tags: Array[
                                   {
                                     key: ::String?,
                                     value: ::String?
                                   },
                                 ]?
                               },
                             ],
                             ?key_format: ("pem" | "ppk"),
                             ?dry_run: bool
                           ) -> _CreateKeyPairResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateKeyPairResponseSuccess

      interface _CreateLaunchTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLaunchTemplateResult]
        def launch_template: () -> Types::LaunchTemplate
        def warning: () -> Types::ValidationWarning
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_launch_template-instance_method
      def create_launch_template: (
                                    ?dry_run: bool,
                                    ?client_token: ::String,
                                    launch_template_name: ::String,
                                    ?version_description: ::String,
                                    launch_template_data: {
                                      kernel_id: ::String?,
                                      ebs_optimized: bool?,
                                      iam_instance_profile: {
                                        arn: ::String?,
                                        name: ::String?
                                      }?,
                                      block_device_mappings: Array[
                                        {
                                          device_name: ::String?,
                                          virtual_name: ::String?,
                                          ebs: {
                                            encrypted: bool?,
                                            delete_on_termination: bool?,
                                            iops: ::Integer?,
                                            kms_key_id: ::String?,
                                            snapshot_id: ::String?,
                                            volume_size: ::Integer?,
                                            volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                            throughput: ::Integer?
                                          }?,
                                          no_device: ::String?
                                        },
                                      ]?,
                                      network_interfaces: Array[
                                        {
                                          associate_carrier_ip_address: bool?,
                                          associate_public_ip_address: bool?,
                                          delete_on_termination: bool?,
                                          description: ::String?,
                                          device_index: ::Integer?,
                                          groups: Array[::String]?,
                                          interface_type: ::String?,
                                          ipv_6_address_count: ::Integer?,
                                          ipv_6_addresses: Array[
                                            {
                                              ipv_6_address: ::String?
                                            },
                                          ]?,
                                          network_interface_id: ::String?,
                                          private_ip_address: ::String?,
                                          private_ip_addresses: Array[
                                            {
                                              primary: bool?,
                                              private_ip_address: ::String?
                                            },
                                          ]?,
                                          secondary_private_ip_address_count: ::Integer?,
                                          subnet_id: ::String?,
                                          network_card_index: ::Integer?,
                                          ipv_4_prefixes: Array[
                                            {
                                              ipv_4_prefix: ::String?
                                            },
                                          ]?,
                                          ipv_4_prefix_count: ::Integer?,
                                          ipv_6_prefixes: Array[
                                            {
                                              ipv_6_prefix: ::String?
                                            },
                                          ]?,
                                          ipv_6_prefix_count: ::Integer?,
                                          primary_ipv_6: bool?,
                                          ena_srd_specification: {
                                            ena_srd_enabled: bool?,
                                            ena_srd_udp_specification: {
                                              ena_srd_udp_enabled: bool?
                                            }?
                                          }?,
                                          connection_tracking_specification: {
                                            tcp_established_timeout: ::Integer?,
                                            udp_stream_timeout: ::Integer?,
                                            udp_timeout: ::Integer?
                                          }?
                                        },
                                      ]?,
                                      image_id: ::String?,
                                      instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                      key_name: ::String?,
                                      monitoring: {
                                        enabled: bool?
                                      }?,
                                      placement: {
                                        availability_zone: ::String?,
                                        affinity: ::String?,
                                        group_name: ::String?,
                                        host_id: ::String?,
                                        tenancy: ("default" | "dedicated" | "host")?,
                                        spread_domain: ::String?,
                                        host_resource_group_arn: ::String?,
                                        partition_number: ::Integer?,
                                        group_id: ::String?
                                      }?,
                                      ram_disk_id: ::String?,
                                      disable_api_termination: bool?,
                                      instance_initiated_shutdown_behavior: ("stop" | "terminate")?,
                                      user_data: ::String?,
                                      tag_specifications: Array[
                                        {
                                          resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                          tags: Array[
                                            {
                                              key: ::String?,
                                              value: ::String?
                                            },
                                          ]?
                                        },
                                      ]?,
                                      elastic_gpu_specifications: Array[
                                        {
                                          type: ::String
                                        },
                                      ]?,
                                      elastic_inference_accelerators: Array[
                                        {
                                          type: ::String,
                                          count: ::Integer?
                                        },
                                      ]?,
                                      security_group_ids: Array[::String]?,
                                      security_groups: Array[::String]?,
                                      instance_market_options: {
                                        market_type: ("spot" | "capacity-block")?,
                                        spot_options: {
                                          max_price: ::String?,
                                          spot_instance_type: ("one-time" | "persistent")?,
                                          block_duration_minutes: ::Integer?,
                                          valid_until: ::Time?,
                                          instance_interruption_behavior: ("hibernate" | "stop" | "terminate")?
                                        }?
                                      }?,
                                      credit_specification: {
                                        cpu_credits: ::String
                                      }?,
                                      cpu_options: {
                                        core_count: ::Integer?,
                                        threads_per_core: ::Integer?,
                                        amd_sev_snp: ("enabled" | "disabled")?
                                      }?,
                                      capacity_reservation_specification: {
                                        capacity_reservation_preference: ("open" | "none")?,
                                        capacity_reservation_target: {
                                          capacity_reservation_id: ::String?,
                                          capacity_reservation_resource_group_arn: ::String?
                                        }?
                                      }?,
                                      license_specifications: Array[
                                        {
                                          license_configuration_arn: ::String?
                                        },
                                      ]?,
                                      hibernation_options: {
                                        configured: bool?
                                      }?,
                                      metadata_options: {
                                        http_tokens: ("optional" | "required")?,
                                        http_put_response_hop_limit: ::Integer?,
                                        http_endpoint: ("disabled" | "enabled")?,
                                        http_protocol_ipv_6: ("disabled" | "enabled")?,
                                        instance_metadata_tags: ("disabled" | "enabled")?
                                      }?,
                                      enclave_options: {
                                        enabled: bool?
                                      }?,
                                      instance_requirements: {
                                        v_cpu_count: {
                                          min: ::Integer,
                                          max: ::Integer?
                                        },
                                        memory_mi_b: {
                                          min: ::Integer,
                                          max: ::Integer?
                                        },
                                        cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                        memory_gi_b_per_v_cpu: {
                                          min: ::Float?,
                                          max: ::Float?
                                        }?,
                                        excluded_instance_types: Array[::String]?,
                                        instance_generations: Array[("current" | "previous")]?,
                                        spot_max_price_percentage_over_lowest_price: ::Integer?,
                                        on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                        bare_metal: ("included" | "required" | "excluded")?,
                                        burstable_performance: ("included" | "required" | "excluded")?,
                                        require_hibernate_support: bool?,
                                        network_interface_count: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        local_storage: ("included" | "required" | "excluded")?,
                                        local_storage_types: Array[("hdd" | "ssd")]?,
                                        total_local_storage_gb: {
                                          min: ::Float?,
                                          max: ::Float?
                                        }?,
                                        baseline_ebs_bandwidth_mbps: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                        accelerator_count: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                        accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                        accelerator_total_memory_mi_b: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        network_bandwidth_gbps: {
                                          min: ::Float?,
                                          max: ::Float?
                                        }?,
                                        allowed_instance_types: Array[::String]?,
                                        max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                      }?,
                                      private_dns_name_options: {
                                        hostname_type: ("ip-name" | "resource-name")?,
                                        enable_resource_name_dns_a_record: bool?,
                                        enable_resource_name_dns_aaaa_record: bool?
                                      }?,
                                      maintenance_options: {
                                        auto_recovery: ("default" | "disabled")?
                                      }?,
                                      disable_api_stop: bool?
                                    },
                                    ?tag_specifications: Array[
                                      {
                                        resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                        tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]?
                                      },
                                    ]
                                  ) -> _CreateLaunchTemplateResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLaunchTemplateResponseSuccess

      interface _CreateLaunchTemplateVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLaunchTemplateVersionResult]
        def launch_template_version: () -> Types::LaunchTemplateVersion
        def warning: () -> Types::ValidationWarning
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_launch_template_version-instance_method
      def create_launch_template_version: (
                                            ?dry_run: bool,
                                            ?client_token: ::String,
                                            ?launch_template_id: ::String,
                                            ?launch_template_name: ::String,
                                            ?source_version: ::String,
                                            ?version_description: ::String,
                                            launch_template_data: {
                                              kernel_id: ::String?,
                                              ebs_optimized: bool?,
                                              iam_instance_profile: {
                                                arn: ::String?,
                                                name: ::String?
                                              }?,
                                              block_device_mappings: Array[
                                                {
                                                  device_name: ::String?,
                                                  virtual_name: ::String?,
                                                  ebs: {
                                                    encrypted: bool?,
                                                    delete_on_termination: bool?,
                                                    iops: ::Integer?,
                                                    kms_key_id: ::String?,
                                                    snapshot_id: ::String?,
                                                    volume_size: ::Integer?,
                                                    volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                                    throughput: ::Integer?
                                                  }?,
                                                  no_device: ::String?
                                                },
                                              ]?,
                                              network_interfaces: Array[
                                                {
                                                  associate_carrier_ip_address: bool?,
                                                  associate_public_ip_address: bool?,
                                                  delete_on_termination: bool?,
                                                  description: ::String?,
                                                  device_index: ::Integer?,
                                                  groups: Array[::String]?,
                                                  interface_type: ::String?,
                                                  ipv_6_address_count: ::Integer?,
                                                  ipv_6_addresses: Array[
                                                    {
                                                      ipv_6_address: ::String?
                                                    },
                                                  ]?,
                                                  network_interface_id: ::String?,
                                                  private_ip_address: ::String?,
                                                  private_ip_addresses: Array[
                                                    {
                                                      primary: bool?,
                                                      private_ip_address: ::String?
                                                    },
                                                  ]?,
                                                  secondary_private_ip_address_count: ::Integer?,
                                                  subnet_id: ::String?,
                                                  network_card_index: ::Integer?,
                                                  ipv_4_prefixes: Array[
                                                    {
                                                      ipv_4_prefix: ::String?
                                                    },
                                                  ]?,
                                                  ipv_4_prefix_count: ::Integer?,
                                                  ipv_6_prefixes: Array[
                                                    {
                                                      ipv_6_prefix: ::String?
                                                    },
                                                  ]?,
                                                  ipv_6_prefix_count: ::Integer?,
                                                  primary_ipv_6: bool?,
                                                  ena_srd_specification: {
                                                    ena_srd_enabled: bool?,
                                                    ena_srd_udp_specification: {
                                                      ena_srd_udp_enabled: bool?
                                                    }?
                                                  }?,
                                                  connection_tracking_specification: {
                                                    tcp_established_timeout: ::Integer?,
                                                    udp_stream_timeout: ::Integer?,
                                                    udp_timeout: ::Integer?
                                                  }?
                                                },
                                              ]?,
                                              image_id: ::String?,
                                              instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                              key_name: ::String?,
                                              monitoring: {
                                                enabled: bool?
                                              }?,
                                              placement: {
                                                availability_zone: ::String?,
                                                affinity: ::String?,
                                                group_name: ::String?,
                                                host_id: ::String?,
                                                tenancy: ("default" | "dedicated" | "host")?,
                                                spread_domain: ::String?,
                                                host_resource_group_arn: ::String?,
                                                partition_number: ::Integer?,
                                                group_id: ::String?
                                              }?,
                                              ram_disk_id: ::String?,
                                              disable_api_termination: bool?,
                                              instance_initiated_shutdown_behavior: ("stop" | "terminate")?,
                                              user_data: ::String?,
                                              tag_specifications: Array[
                                                {
                                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                  tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ]?
                                                },
                                              ]?,
                                              elastic_gpu_specifications: Array[
                                                {
                                                  type: ::String
                                                },
                                              ]?,
                                              elastic_inference_accelerators: Array[
                                                {
                                                  type: ::String,
                                                  count: ::Integer?
                                                },
                                              ]?,
                                              security_group_ids: Array[::String]?,
                                              security_groups: Array[::String]?,
                                              instance_market_options: {
                                                market_type: ("spot" | "capacity-block")?,
                                                spot_options: {
                                                  max_price: ::String?,
                                                  spot_instance_type: ("one-time" | "persistent")?,
                                                  block_duration_minutes: ::Integer?,
                                                  valid_until: ::Time?,
                                                  instance_interruption_behavior: ("hibernate" | "stop" | "terminate")?
                                                }?
                                              }?,
                                              credit_specification: {
                                                cpu_credits: ::String
                                              }?,
                                              cpu_options: {
                                                core_count: ::Integer?,
                                                threads_per_core: ::Integer?,
                                                amd_sev_snp: ("enabled" | "disabled")?
                                              }?,
                                              capacity_reservation_specification: {
                                                capacity_reservation_preference: ("open" | "none")?,
                                                capacity_reservation_target: {
                                                  capacity_reservation_id: ::String?,
                                                  capacity_reservation_resource_group_arn: ::String?
                                                }?
                                              }?,
                                              license_specifications: Array[
                                                {
                                                  license_configuration_arn: ::String?
                                                },
                                              ]?,
                                              hibernation_options: {
                                                configured: bool?
                                              }?,
                                              metadata_options: {
                                                http_tokens: ("optional" | "required")?,
                                                http_put_response_hop_limit: ::Integer?,
                                                http_endpoint: ("disabled" | "enabled")?,
                                                http_protocol_ipv_6: ("disabled" | "enabled")?,
                                                instance_metadata_tags: ("disabled" | "enabled")?
                                              }?,
                                              enclave_options: {
                                                enabled: bool?
                                              }?,
                                              instance_requirements: {
                                                v_cpu_count: {
                                                  min: ::Integer,
                                                  max: ::Integer?
                                                },
                                                memory_mi_b: {
                                                  min: ::Integer,
                                                  max: ::Integer?
                                                },
                                                cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                                memory_gi_b_per_v_cpu: {
                                                  min: ::Float?,
                                                  max: ::Float?
                                                }?,
                                                excluded_instance_types: Array[::String]?,
                                                instance_generations: Array[("current" | "previous")]?,
                                                spot_max_price_percentage_over_lowest_price: ::Integer?,
                                                on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                                bare_metal: ("included" | "required" | "excluded")?,
                                                burstable_performance: ("included" | "required" | "excluded")?,
                                                require_hibernate_support: bool?,
                                                network_interface_count: {
                                                  min: ::Integer?,
                                                  max: ::Integer?
                                                }?,
                                                local_storage: ("included" | "required" | "excluded")?,
                                                local_storage_types: Array[("hdd" | "ssd")]?,
                                                total_local_storage_gb: {
                                                  min: ::Float?,
                                                  max: ::Float?
                                                }?,
                                                baseline_ebs_bandwidth_mbps: {
                                                  min: ::Integer?,
                                                  max: ::Integer?
                                                }?,
                                                accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                                accelerator_count: {
                                                  min: ::Integer?,
                                                  max: ::Integer?
                                                }?,
                                                accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                                accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                                accelerator_total_memory_mi_b: {
                                                  min: ::Integer?,
                                                  max: ::Integer?
                                                }?,
                                                network_bandwidth_gbps: {
                                                  min: ::Float?,
                                                  max: ::Float?
                                                }?,
                                                allowed_instance_types: Array[::String]?,
                                                max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                              }?,
                                              private_dns_name_options: {
                                                hostname_type: ("ip-name" | "resource-name")?,
                                                enable_resource_name_dns_a_record: bool?,
                                                enable_resource_name_dns_aaaa_record: bool?
                                              }?,
                                              maintenance_options: {
                                                auto_recovery: ("default" | "disabled")?
                                              }?,
                                              disable_api_stop: bool?
                                            },
                                            ?resolve_alias: bool
                                          ) -> _CreateLaunchTemplateVersionResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLaunchTemplateVersionResponseSuccess

      interface _CreateLocalGatewayRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLocalGatewayRouteResult]
        def route: () -> Types::LocalGatewayRoute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_local_gateway_route-instance_method
      def create_local_gateway_route: (
                                        ?destination_cidr_block: ::String,
                                        local_gateway_route_table_id: ::String,
                                        ?local_gateway_virtual_interface_group_id: ::String,
                                        ?dry_run: bool,
                                        ?network_interface_id: ::String,
                                        ?destination_prefix_list_id: ::String
                                      ) -> _CreateLocalGatewayRouteResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLocalGatewayRouteResponseSuccess

      interface _CreateLocalGatewayRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLocalGatewayRouteTableResult]
        def local_gateway_route_table: () -> Types::LocalGatewayRouteTable
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_local_gateway_route_table-instance_method
      def create_local_gateway_route_table: (
                                              local_gateway_id: ::String,
                                              ?mode: ("direct-vpc-routing" | "coip"),
                                              ?tag_specifications: Array[
                                                {
                                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                  tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ]?
                                                },
                                              ],
                                              ?dry_run: bool
                                            ) -> _CreateLocalGatewayRouteTableResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLocalGatewayRouteTableResponseSuccess

      interface _CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult]
        def local_gateway_route_table_virtual_interface_group_association: () -> Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_local_gateway_route_table_virtual_interface_group_association-instance_method
      def create_local_gateway_route_table_virtual_interface_group_association: (
                                                                                  local_gateway_route_table_id: ::String,
                                                                                  local_gateway_virtual_interface_group_id: ::String,
                                                                                  ?tag_specifications: Array[
                                                                                    {
                                                                                      resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                                                      tags: Array[
                                                                                        {
                                                                                          key: ::String?,
                                                                                          value: ::String?
                                                                                        },
                                                                                      ]?
                                                                                    },
                                                                                  ],
                                                                                  ?dry_run: bool
                                                                                ) -> _CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponseSuccess
                                                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponseSuccess

      interface _CreateLocalGatewayRouteTableVpcAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLocalGatewayRouteTableVpcAssociationResult]
        def local_gateway_route_table_vpc_association: () -> Types::LocalGatewayRouteTableVpcAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_local_gateway_route_table_vpc_association-instance_method
      def create_local_gateway_route_table_vpc_association: (
                                                              local_gateway_route_table_id: ::String,
                                                              vpc_id: ::String,
                                                              ?tag_specifications: Array[
                                                                {
                                                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                                  tags: Array[
                                                                    {
                                                                      key: ::String?,
                                                                      value: ::String?
                                                                    },
                                                                  ]?
                                                                },
                                                              ],
                                                              ?dry_run: bool
                                                            ) -> _CreateLocalGatewayRouteTableVpcAssociationResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLocalGatewayRouteTableVpcAssociationResponseSuccess

      interface _CreateManagedPrefixListResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateManagedPrefixListResult]
        def prefix_list: () -> Types::ManagedPrefixList
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_managed_prefix_list-instance_method
      def create_managed_prefix_list: (
                                        ?dry_run: bool,
                                        prefix_list_name: ::String,
                                        ?entries: Array[
                                          {
                                            cidr: ::String,
                                            description: ::String?
                                          },
                                        ],
                                        max_entries: ::Integer,
                                        ?tag_specifications: Array[
                                          {
                                            resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                            tags: Array[
                                              {
                                                key: ::String?,
                                                value: ::String?
                                              },
                                            ]?
                                          },
                                        ],
                                        address_family: ::String,
                                        ?client_token: ::String
                                      ) -> _CreateManagedPrefixListResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateManagedPrefixListResponseSuccess

      interface _CreateNatGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNatGatewayResult]
        def client_token: () -> ::String
        def nat_gateway: () -> Types::NatGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_nat_gateway-instance_method
      def create_nat_gateway: (
                                ?allocation_id: ::String,
                                ?client_token: ::String,
                                ?dry_run: bool,
                                subnet_id: ::String,
                                ?tag_specifications: Array[
                                  {
                                    resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                    tags: Array[
                                      {
                                        key: ::String?,
                                        value: ::String?
                                      },
                                    ]?
                                  },
                                ],
                                ?connectivity_type: ("private" | "public"),
                                ?private_ip_address: ::String,
                                ?secondary_allocation_ids: Array[::String],
                                ?secondary_private_ip_addresses: Array[::String],
                                ?secondary_private_ip_address_count: ::Integer
                              ) -> _CreateNatGatewayResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNatGatewayResponseSuccess

      interface _CreateNetworkAclResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNetworkAclResult]
        def network_acl: () -> Types::NetworkAcl
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_network_acl-instance_method
      def create_network_acl: (
                                ?tag_specifications: Array[
                                  {
                                    resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                    tags: Array[
                                      {
                                        key: ::String?,
                                        value: ::String?
                                      },
                                    ]?
                                  },
                                ],
                                ?client_token: ::String,
                                ?dry_run: bool,
                                vpc_id: ::String
                              ) -> _CreateNetworkAclResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNetworkAclResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_network_acl_entry-instance_method
      def create_network_acl_entry: (
                                      ?dry_run: bool,
                                      network_acl_id: ::String,
                                      rule_number: ::Integer,
                                      protocol: ::String,
                                      rule_action: ("allow" | "deny"),
                                      egress: bool,
                                      ?cidr_block: ::String,
                                      ?ipv_6_cidr_block: ::String,
                                      ?icmp_type_code: {
                                        code: ::Integer?,
                                        type: ::Integer?
                                      },
                                      ?port_range: {
                                        from: ::Integer?,
                                        to: ::Integer?
                                      }
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _CreateNetworkInsightsAccessScopeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNetworkInsightsAccessScopeResult]
        def network_insights_access_scope: () -> Types::NetworkInsightsAccessScope
        def network_insights_access_scope_content: () -> Types::NetworkInsightsAccessScopeContent
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_network_insights_access_scope-instance_method
      def create_network_insights_access_scope: (
                                                  ?match_paths: Array[
                                                    {
                                                      source: {
                                                        packet_header_statement: {
                                                          source_addresses: Array[::String]?,
                                                          destination_addresses: Array[::String]?,
                                                          source_ports: Array[::String]?,
                                                          destination_ports: Array[::String]?,
                                                          source_prefix_lists: Array[::String]?,
                                                          destination_prefix_lists: Array[::String]?,
                                                          protocols: Array[("tcp" | "udp")]?
                                                        }?,
                                                        resource_statement: {
                                                          resources: Array[::String]?,
                                                          resource_types: Array[::String]?
                                                        }?
                                                      }?,
                                                      destination: {
                                                        packet_header_statement: {
                                                          source_addresses: Array[::String]?,
                                                          destination_addresses: Array[::String]?,
                                                          source_ports: Array[::String]?,
                                                          destination_ports: Array[::String]?,
                                                          source_prefix_lists: Array[::String]?,
                                                          destination_prefix_lists: Array[::String]?,
                                                          protocols: Array[("tcp" | "udp")]?
                                                        }?,
                                                        resource_statement: {
                                                          resources: Array[::String]?,
                                                          resource_types: Array[::String]?
                                                        }?
                                                      }?,
                                                      through_resources: Array[
                                                        {
                                                          resource_statement: {
                                                            resources: Array[::String]?,
                                                            resource_types: Array[::String]?
                                                          }?
                                                        },
                                                      ]?
                                                    },
                                                  ],
                                                  ?exclude_paths: Array[
                                                    {
                                                      source: {
                                                        packet_header_statement: {
                                                          source_addresses: Array[::String]?,
                                                          destination_addresses: Array[::String]?,
                                                          source_ports: Array[::String]?,
                                                          destination_ports: Array[::String]?,
                                                          source_prefix_lists: Array[::String]?,
                                                          destination_prefix_lists: Array[::String]?,
                                                          protocols: Array[("tcp" | "udp")]?
                                                        }?,
                                                        resource_statement: {
                                                          resources: Array[::String]?,
                                                          resource_types: Array[::String]?
                                                        }?
                                                      }?,
                                                      destination: {
                                                        packet_header_statement: {
                                                          source_addresses: Array[::String]?,
                                                          destination_addresses: Array[::String]?,
                                                          source_ports: Array[::String]?,
                                                          destination_ports: Array[::String]?,
                                                          source_prefix_lists: Array[::String]?,
                                                          destination_prefix_lists: Array[::String]?,
                                                          protocols: Array[("tcp" | "udp")]?
                                                        }?,
                                                        resource_statement: {
                                                          resources: Array[::String]?,
                                                          resource_types: Array[::String]?
                                                        }?
                                                      }?,
                                                      through_resources: Array[
                                                        {
                                                          resource_statement: {
                                                            resources: Array[::String]?,
                                                            resource_types: Array[::String]?
                                                          }?
                                                        },
                                                      ]?
                                                    },
                                                  ],
                                                  client_token: ::String,
                                                  ?tag_specifications: Array[
                                                    {
                                                      resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                      tags: Array[
                                                        {
                                                          key: ::String?,
                                                          value: ::String?
                                                        },
                                                      ]?
                                                    },
                                                  ],
                                                  ?dry_run: bool
                                                ) -> _CreateNetworkInsightsAccessScopeResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNetworkInsightsAccessScopeResponseSuccess

      interface _CreateNetworkInsightsPathResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNetworkInsightsPathResult]
        def network_insights_path: () -> Types::NetworkInsightsPath
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_network_insights_path-instance_method
      def create_network_insights_path: (
                                          ?source_ip: ::String,
                                          ?destination_ip: ::String,
                                          source: ::String,
                                          ?destination: ::String,
                                          protocol: ("tcp" | "udp"),
                                          ?destination_port: ::Integer,
                                          ?tag_specifications: Array[
                                            {
                                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                              tags: Array[
                                                {
                                                  key: ::String?,
                                                  value: ::String?
                                                },
                                              ]?
                                            },
                                          ],
                                          ?dry_run: bool,
                                          client_token: ::String,
                                          ?filter_at_source: {
                                            source_address: ::String?,
                                            source_port_range: {
                                              from_port: ::Integer?,
                                              to_port: ::Integer?
                                            }?,
                                            destination_address: ::String?,
                                            destination_port_range: {
                                              from_port: ::Integer?,
                                              to_port: ::Integer?
                                            }?
                                          },
                                          ?filter_at_destination: {
                                            source_address: ::String?,
                                            source_port_range: {
                                              from_port: ::Integer?,
                                              to_port: ::Integer?
                                            }?,
                                            destination_address: ::String?,
                                            destination_port_range: {
                                              from_port: ::Integer?,
                                              to_port: ::Integer?
                                            }?
                                          }
                                        ) -> _CreateNetworkInsightsPathResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNetworkInsightsPathResponseSuccess

      interface _CreateNetworkInterfaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNetworkInterfaceResult]
        def network_interface: () -> Types::NetworkInterface
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_network_interface-instance_method
      def create_network_interface: (
                                      ?ipv_4_prefixes: Array[
                                        {
                                          ipv_4_prefix: ::String?
                                        },
                                      ],
                                      ?ipv_4_prefix_count: ::Integer,
                                      ?ipv_6_prefixes: Array[
                                        {
                                          ipv_6_prefix: ::String?
                                        },
                                      ],
                                      ?ipv_6_prefix_count: ::Integer,
                                      ?interface_type: ("efa" | "branch" | "trunk"),
                                      ?tag_specifications: Array[
                                        {
                                          resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                          tags: Array[
                                            {
                                              key: ::String?,
                                              value: ::String?
                                            },
                                          ]?
                                        },
                                      ],
                                      ?client_token: ::String,
                                      ?enable_primary_ipv_6: bool,
                                      ?connection_tracking_specification: {
                                        tcp_established_timeout: ::Integer?,
                                        udp_stream_timeout: ::Integer?,
                                        udp_timeout: ::Integer?
                                      },
                                      subnet_id: ::String,
                                      ?description: ::String,
                                      ?private_ip_address: ::String,
                                      ?groups: Array[::String],
                                      ?private_ip_addresses: Array[
                                        {
                                          primary: bool?,
                                          private_ip_address: ::String?
                                        },
                                      ],
                                      ?secondary_private_ip_address_count: ::Integer,
                                      ?ipv_6_addresses: Array[
                                        {
                                          ipv_6_address: ::String?,
                                          is_primary_ipv_6: bool?
                                        },
                                      ],
                                      ?ipv_6_address_count: ::Integer,
                                      ?dry_run: bool
                                    ) -> _CreateNetworkInterfaceResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNetworkInterfaceResponseSuccess

      interface _CreateNetworkInterfacePermissionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNetworkInterfacePermissionResult]
        def interface_permission: () -> Types::NetworkInterfacePermission
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_network_interface_permission-instance_method
      def create_network_interface_permission: (
                                                 network_interface_id: ::String,
                                                 ?aws_account_id: ::String,
                                                 ?aws_service: ::String,
                                                 permission: ("INSTANCE-ATTACH" | "EIP-ASSOCIATE"),
                                                 ?dry_run: bool
                                               ) -> _CreateNetworkInterfacePermissionResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNetworkInterfacePermissionResponseSuccess

      interface _CreatePlacementGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreatePlacementGroupResult]
        def placement_group: () -> Types::PlacementGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_placement_group-instance_method
      def create_placement_group: (
                                    ?partition_count: ::Integer,
                                    ?tag_specifications: Array[
                                      {
                                        resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                        tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]?
                                      },
                                    ],
                                    ?spread_level: ("host" | "rack"),
                                    ?dry_run: bool,
                                    ?group_name: ::String,
                                    ?strategy: ("cluster" | "spread" | "partition")
                                  ) -> _CreatePlacementGroupResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreatePlacementGroupResponseSuccess

      interface _CreatePublicIpv4PoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreatePublicIpv4PoolResult]
        def pool_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_public_ipv_4_pool-instance_method
      def create_public_ipv_4_pool: (
                                      ?dry_run: bool,
                                      ?tag_specifications: Array[
                                        {
                                          resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                          tags: Array[
                                            {
                                              key: ::String?,
                                              value: ::String?
                                            },
                                          ]?
                                        },
                                      ],
                                      ?network_border_group: ::String
                                    ) -> _CreatePublicIpv4PoolResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreatePublicIpv4PoolResponseSuccess

      interface _CreateReplaceRootVolumeTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateReplaceRootVolumeTaskResult]
        def replace_root_volume_task: () -> Types::ReplaceRootVolumeTask
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_replace_root_volume_task-instance_method
      def create_replace_root_volume_task: (
                                             instance_id: ::String,
                                             ?snapshot_id: ::String,
                                             ?client_token: ::String,
                                             ?dry_run: bool,
                                             ?tag_specifications: Array[
                                               {
                                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                 tags: Array[
                                                   {
                                                     key: ::String?,
                                                     value: ::String?
                                                   },
                                                 ]?
                                               },
                                             ],
                                             ?image_id: ::String,
                                             ?delete_replaced_root_volume: bool
                                           ) -> _CreateReplaceRootVolumeTaskResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateReplaceRootVolumeTaskResponseSuccess

      interface _CreateReservedInstancesListingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateReservedInstancesListingResult]
        def reserved_instances_listings: () -> ::Array[Types::ReservedInstancesListing]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_reserved_instances_listing-instance_method
      def create_reserved_instances_listing: (
                                               reserved_instances_id: ::String,
                                               instance_count: ::Integer,
                                               price_schedules: Array[
                                                 {
                                                   term: ::Integer?,
                                                   price: ::Float?,
                                                   currency_code: ("USD")?
                                                 },
                                               ],
                                               client_token: ::String
                                             ) -> _CreateReservedInstancesListingResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateReservedInstancesListingResponseSuccess

      interface _CreateRestoreImageTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRestoreImageTaskResult]
        def image_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_restore_image_task-instance_method
      def create_restore_image_task: (
                                       bucket: ::String,
                                       object_key: ::String,
                                       ?name: ::String,
                                       ?tag_specifications: Array[
                                         {
                                           resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                           tags: Array[
                                             {
                                               key: ::String?,
                                               value: ::String?
                                             },
                                           ]?
                                         },
                                       ],
                                       ?dry_run: bool
                                     ) -> _CreateRestoreImageTaskResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRestoreImageTaskResponseSuccess

      interface _CreateRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRouteResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_route-instance_method
      def create_route: (
                          ?destination_prefix_list_id: ::String,
                          ?vpc_endpoint_id: ::String,
                          ?transit_gateway_id: ::String,
                          ?local_gateway_id: ::String,
                          ?carrier_gateway_id: ::String,
                          ?core_network_arn: ::String,
                          ?dry_run: bool,
                          route_table_id: ::String,
                          ?destination_cidr_block: ::String,
                          ?gateway_id: ::String,
                          ?destination_ipv_6_cidr_block: ::String,
                          ?egress_only_internet_gateway_id: ::String,
                          ?instance_id: ::String,
                          ?network_interface_id: ::String,
                          ?vpc_peering_connection_id: ::String,
                          ?nat_gateway_id: ::String
                        ) -> _CreateRouteResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRouteResponseSuccess

      interface _CreateRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRouteTableResult]
        def route_table: () -> Types::RouteTable
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_route_table-instance_method
      def create_route_table: (
                                ?tag_specifications: Array[
                                  {
                                    resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                    tags: Array[
                                      {
                                        key: ::String?,
                                        value: ::String?
                                      },
                                    ]?
                                  },
                                ],
                                ?client_token: ::String,
                                ?dry_run: bool,
                                vpc_id: ::String
                              ) -> _CreateRouteTableResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRouteTableResponseSuccess

      interface _CreateSecurityGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSecurityGroupResult]
        def group_id: () -> ::String
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_security_group-instance_method
      def create_security_group: (
                                   description: ::String,
                                   group_name: ::String,
                                   ?vpc_id: ::String,
                                   ?tag_specifications: Array[
                                     {
                                       resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                       tags: Array[
                                         {
                                           key: ::String?,
                                           value: ::String?
                                         },
                                       ]?
                                     },
                                   ],
                                   ?dry_run: bool
                                 ) -> _CreateSecurityGroupResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSecurityGroupResponseSuccess

      interface _CreateSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::Snapshot]
        def owner_alias: () -> ::String
        def outpost_arn: () -> ::String
        def tags: () -> ::Array[Types::Tag]
        def storage_tier: () -> ("archive" | "standard")
        def restore_expiry_time: () -> ::Time
        def sse_type: () -> ("sse-ebs" | "sse-kms" | "none")
        def snapshot_id: () -> ::String
        def volume_id: () -> ::String
        def state: () -> ("pending" | "completed" | "error" | "recoverable" | "recovering")
        def state_message: () -> ::String
        def start_time: () -> ::Time
        def progress: () -> ::String
        def owner_id: () -> ::String
        def description: () -> ::String
        def volume_size: () -> ::Integer
        def encrypted: () -> bool
        def kms_key_id: () -> ::String
        def data_encryption_key_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_snapshot-instance_method
      def create_snapshot: (
                             ?description: ::String,
                             ?outpost_arn: ::String,
                             volume_id: ::String,
                             ?tag_specifications: Array[
                               {
                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                 tags: Array[
                                   {
                                     key: ::String?,
                                     value: ::String?
                                   },
                                 ]?
                               },
                             ],
                             ?dry_run: bool
                           ) -> _CreateSnapshotResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSnapshotResponseSuccess

      interface _CreateSnapshotsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSnapshotsResult]
        def snapshots: () -> ::Array[Types::SnapshotInfo]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_snapshots-instance_method
      def create_snapshots: (
                              ?description: ::String,
                              instance_specification: {
                                instance_id: ::String,
                                exclude_boot_volume: bool?,
                                exclude_data_volume_ids: Array[::String]?
                              },
                              ?outpost_arn: ::String,
                              ?tag_specifications: Array[
                                {
                                  resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                  tags: Array[
                                    {
                                      key: ::String?,
                                      value: ::String?
                                    },
                                  ]?
                                },
                              ],
                              ?dry_run: bool,
                              ?copy_tags_from_source: ("volume")
                            ) -> _CreateSnapshotsResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSnapshotsResponseSuccess

      interface _CreateSpotDatafeedSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSpotDatafeedSubscriptionResult]
        def spot_datafeed_subscription: () -> Types::SpotDatafeedSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_spot_datafeed_subscription-instance_method
      def create_spot_datafeed_subscription: (
                                               ?dry_run: bool,
                                               bucket: ::String,
                                               ?prefix: ::String
                                             ) -> _CreateSpotDatafeedSubscriptionResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSpotDatafeedSubscriptionResponseSuccess

      interface _CreateStoreImageTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateStoreImageTaskResult]
        def object_key: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_store_image_task-instance_method
      def create_store_image_task: (
                                     image_id: ::String,
                                     bucket: ::String,
                                     ?s3_object_tags: Array[
                                       {
                                         key: ::String?,
                                         value: ::String?
                                       },
                                     ],
                                     ?dry_run: bool
                                   ) -> _CreateStoreImageTaskResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateStoreImageTaskResponseSuccess

      interface _CreateSubnetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSubnetResult]
        def subnet: () -> Types::Subnet
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_subnet-instance_method
      def create_subnet: (
                           ?tag_specifications: Array[
                             {
                               resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                               tags: Array[
                                 {
                                   key: ::String?,
                                   value: ::String?
                                 },
                               ]?
                             },
                           ],
                           ?availability_zone: ::String,
                           ?availability_zone_id: ::String,
                           ?cidr_block: ::String,
                           ?ipv_6_cidr_block: ::String,
                           ?outpost_arn: ::String,
                           vpc_id: ::String,
                           ?ipv_6_native: bool,
                           ?ipv_4_ipam_pool_id: ::String,
                           ?ipv_4_netmask_length: ::Integer,
                           ?ipv_6_ipam_pool_id: ::String,
                           ?ipv_6_netmask_length: ::Integer,
                           ?dry_run: bool
                         ) -> _CreateSubnetResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSubnetResponseSuccess

      interface _CreateSubnetCidrReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSubnetCidrReservationResult]
        def subnet_cidr_reservation: () -> Types::SubnetCidrReservation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_subnet_cidr_reservation-instance_method
      def create_subnet_cidr_reservation: (
                                            subnet_id: ::String,
                                            cidr: ::String,
                                            reservation_type: ("prefix" | "explicit"),
                                            ?description: ::String,
                                            ?dry_run: bool,
                                            ?tag_specifications: Array[
                                              {
                                                resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                tags: Array[
                                                  {
                                                    key: ::String?,
                                                    value: ::String?
                                                  },
                                                ]?
                                              },
                                            ]
                                          ) -> _CreateSubnetCidrReservationResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSubnetCidrReservationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_tags-instance_method
      def create_tags: (
                         ?dry_run: bool,
                         resources: Array[::String],
                         tags: Array[
                           {
                             key: ::String?,
                             value: ::String?
                           },
                         ]
                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _CreateTrafficMirrorFilterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTrafficMirrorFilterResult]
        def traffic_mirror_filter: () -> Types::TrafficMirrorFilter
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_traffic_mirror_filter-instance_method
      def create_traffic_mirror_filter: (
                                          ?description: ::String,
                                          ?tag_specifications: Array[
                                            {
                                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                              tags: Array[
                                                {
                                                  key: ::String?,
                                                  value: ::String?
                                                },
                                              ]?
                                            },
                                          ],
                                          ?dry_run: bool,
                                          ?client_token: ::String
                                        ) -> _CreateTrafficMirrorFilterResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTrafficMirrorFilterResponseSuccess

      interface _CreateTrafficMirrorFilterRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTrafficMirrorFilterRuleResult]
        def traffic_mirror_filter_rule: () -> Types::TrafficMirrorFilterRule
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_traffic_mirror_filter_rule-instance_method
      def create_traffic_mirror_filter_rule: (
                                               traffic_mirror_filter_id: ::String,
                                               traffic_direction: ("ingress" | "egress"),
                                               rule_number: ::Integer,
                                               rule_action: ("accept" | "reject"),
                                               ?destination_port_range: {
                                                 from_port: ::Integer?,
                                                 to_port: ::Integer?
                                               },
                                               ?source_port_range: {
                                                 from_port: ::Integer?,
                                                 to_port: ::Integer?
                                               },
                                               ?protocol: ::Integer,
                                               destination_cidr_block: ::String,
                                               source_cidr_block: ::String,
                                               ?description: ::String,
                                               ?dry_run: bool,
                                               ?client_token: ::String,
                                               ?tag_specifications: Array[
                                                 {
                                                   resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                   tags: Array[
                                                     {
                                                       key: ::String?,
                                                       value: ::String?
                                                     },
                                                   ]?
                                                 },
                                               ]
                                             ) -> _CreateTrafficMirrorFilterRuleResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTrafficMirrorFilterRuleResponseSuccess

      interface _CreateTrafficMirrorSessionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTrafficMirrorSessionResult]
        def traffic_mirror_session: () -> Types::TrafficMirrorSession
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_traffic_mirror_session-instance_method
      def create_traffic_mirror_session: (
                                           network_interface_id: ::String,
                                           traffic_mirror_target_id: ::String,
                                           traffic_mirror_filter_id: ::String,
                                           ?packet_length: ::Integer,
                                           session_number: ::Integer,
                                           ?virtual_network_id: ::Integer,
                                           ?description: ::String,
                                           ?tag_specifications: Array[
                                             {
                                               resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                               tags: Array[
                                                 {
                                                   key: ::String?,
                                                   value: ::String?
                                                 },
                                               ]?
                                             },
                                           ],
                                           ?dry_run: bool,
                                           ?client_token: ::String
                                         ) -> _CreateTrafficMirrorSessionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTrafficMirrorSessionResponseSuccess

      interface _CreateTrafficMirrorTargetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTrafficMirrorTargetResult]
        def traffic_mirror_target: () -> Types::TrafficMirrorTarget
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_traffic_mirror_target-instance_method
      def create_traffic_mirror_target: (
                                          ?network_interface_id: ::String,
                                          ?network_load_balancer_arn: ::String,
                                          ?description: ::String,
                                          ?tag_specifications: Array[
                                            {
                                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                              tags: Array[
                                                {
                                                  key: ::String?,
                                                  value: ::String?
                                                },
                                              ]?
                                            },
                                          ],
                                          ?dry_run: bool,
                                          ?client_token: ::String,
                                          ?gateway_load_balancer_endpoint_id: ::String
                                        ) -> _CreateTrafficMirrorTargetResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTrafficMirrorTargetResponseSuccess

      interface _CreateTransitGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayResult]
        def transit_gateway: () -> Types::TransitGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway-instance_method
      def create_transit_gateway: (
                                    ?description: ::String,
                                    ?options: {
                                      amazon_side_asn: ::Integer?,
                                      auto_accept_shared_attachments: ("enable" | "disable")?,
                                      default_route_table_association: ("enable" | "disable")?,
                                      default_route_table_propagation: ("enable" | "disable")?,
                                      vpn_ecmp_support: ("enable" | "disable")?,
                                      dns_support: ("enable" | "disable")?,
                                      security_group_referencing_support: ("enable" | "disable")?,
                                      multicast_support: ("enable" | "disable")?,
                                      transit_gateway_cidr_blocks: Array[::String]?
                                    },
                                    ?tag_specifications: Array[
                                      {
                                        resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                        tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]?
                                      },
                                    ],
                                    ?dry_run: bool
                                  ) -> _CreateTransitGatewayResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayResponseSuccess

      interface _CreateTransitGatewayConnectResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayConnectResult]
        def transit_gateway_connect: () -> Types::TransitGatewayConnect
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_connect-instance_method
      def create_transit_gateway_connect: (
                                            transport_transit_gateway_attachment_id: ::String,
                                            options: {
                                              protocol: ("gre")
                                            },
                                            ?tag_specifications: Array[
                                              {
                                                resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                tags: Array[
                                                  {
                                                    key: ::String?,
                                                    value: ::String?
                                                  },
                                                ]?
                                              },
                                            ],
                                            ?dry_run: bool
                                          ) -> _CreateTransitGatewayConnectResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayConnectResponseSuccess

      interface _CreateTransitGatewayConnectPeerResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayConnectPeerResult]
        def transit_gateway_connect_peer: () -> Types::TransitGatewayConnectPeer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_connect_peer-instance_method
      def create_transit_gateway_connect_peer: (
                                                 transit_gateway_attachment_id: ::String,
                                                 ?transit_gateway_address: ::String,
                                                 peer_address: ::String,
                                                 ?bgp_options: {
                                                   peer_asn: ::Integer?
                                                 },
                                                 inside_cidr_blocks: Array[::String],
                                                 ?tag_specifications: Array[
                                                   {
                                                     resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                     tags: Array[
                                                       {
                                                         key: ::String?,
                                                         value: ::String?
                                                       },
                                                     ]?
                                                   },
                                                 ],
                                                 ?dry_run: bool
                                               ) -> _CreateTransitGatewayConnectPeerResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayConnectPeerResponseSuccess

      interface _CreateTransitGatewayMulticastDomainResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayMulticastDomainResult]
        def transit_gateway_multicast_domain: () -> Types::TransitGatewayMulticastDomain
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_multicast_domain-instance_method
      def create_transit_gateway_multicast_domain: (
                                                     transit_gateway_id: ::String,
                                                     ?options: {
                                                       igmpv_2_support: ("enable" | "disable")?,
                                                       static_sources_support: ("enable" | "disable")?,
                                                       auto_accept_shared_associations: ("enable" | "disable")?
                                                     },
                                                     ?tag_specifications: Array[
                                                       {
                                                         resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                         tags: Array[
                                                           {
                                                             key: ::String?,
                                                             value: ::String?
                                                           },
                                                         ]?
                                                       },
                                                     ],
                                                     ?dry_run: bool
                                                   ) -> _CreateTransitGatewayMulticastDomainResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayMulticastDomainResponseSuccess

      interface _CreateTransitGatewayPeeringAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayPeeringAttachmentResult]
        def transit_gateway_peering_attachment: () -> Types::TransitGatewayPeeringAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_peering_attachment-instance_method
      def create_transit_gateway_peering_attachment: (
                                                       transit_gateway_id: ::String,
                                                       peer_transit_gateway_id: ::String,
                                                       peer_account_id: ::String,
                                                       peer_region: ::String,
                                                       ?options: {
                                                         dynamic_routing: ("enable" | "disable")?
                                                       },
                                                       ?tag_specifications: Array[
                                                         {
                                                           resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                           tags: Array[
                                                             {
                                                               key: ::String?,
                                                               value: ::String?
                                                             },
                                                           ]?
                                                         },
                                                       ],
                                                       ?dry_run: bool
                                                     ) -> _CreateTransitGatewayPeeringAttachmentResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayPeeringAttachmentResponseSuccess

      interface _CreateTransitGatewayPolicyTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayPolicyTableResult]
        def transit_gateway_policy_table: () -> Types::TransitGatewayPolicyTable
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_policy_table-instance_method
      def create_transit_gateway_policy_table: (
                                                 transit_gateway_id: ::String,
                                                 ?tag_specifications: Array[
                                                   {
                                                     resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                     tags: Array[
                                                       {
                                                         key: ::String?,
                                                         value: ::String?
                                                       },
                                                     ]?
                                                   },
                                                 ],
                                                 ?dry_run: bool
                                               ) -> _CreateTransitGatewayPolicyTableResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayPolicyTableResponseSuccess

      interface _CreateTransitGatewayPrefixListReferenceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayPrefixListReferenceResult]
        def transit_gateway_prefix_list_reference: () -> Types::TransitGatewayPrefixListReference
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_prefix_list_reference-instance_method
      def create_transit_gateway_prefix_list_reference: (
                                                          transit_gateway_route_table_id: ::String,
                                                          prefix_list_id: ::String,
                                                          ?transit_gateway_attachment_id: ::String,
                                                          ?blackhole: bool,
                                                          ?dry_run: bool
                                                        ) -> _CreateTransitGatewayPrefixListReferenceResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayPrefixListReferenceResponseSuccess

      interface _CreateTransitGatewayRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayRouteResult]
        def route: () -> Types::TransitGatewayRoute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_route-instance_method
      def create_transit_gateway_route: (
                                          destination_cidr_block: ::String,
                                          transit_gateway_route_table_id: ::String,
                                          ?transit_gateway_attachment_id: ::String,
                                          ?blackhole: bool,
                                          ?dry_run: bool
                                        ) -> _CreateTransitGatewayRouteResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayRouteResponseSuccess

      interface _CreateTransitGatewayRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayRouteTableResult]
        def transit_gateway_route_table: () -> Types::TransitGatewayRouteTable
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_route_table-instance_method
      def create_transit_gateway_route_table: (
                                                transit_gateway_id: ::String,
                                                ?tag_specifications: Array[
                                                  {
                                                    resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                    tags: Array[
                                                      {
                                                        key: ::String?,
                                                        value: ::String?
                                                      },
                                                    ]?
                                                  },
                                                ],
                                                ?dry_run: bool
                                              ) -> _CreateTransitGatewayRouteTableResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayRouteTableResponseSuccess

      interface _CreateTransitGatewayRouteTableAnnouncementResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayRouteTableAnnouncementResult]
        def transit_gateway_route_table_announcement: () -> Types::TransitGatewayRouteTableAnnouncement
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_route_table_announcement-instance_method
      def create_transit_gateway_route_table_announcement: (
                                                             transit_gateway_route_table_id: ::String,
                                                             peering_attachment_id: ::String,
                                                             ?tag_specifications: Array[
                                                               {
                                                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                                 tags: Array[
                                                                   {
                                                                     key: ::String?,
                                                                     value: ::String?
                                                                   },
                                                                 ]?
                                                               },
                                                             ],
                                                             ?dry_run: bool
                                                           ) -> _CreateTransitGatewayRouteTableAnnouncementResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayRouteTableAnnouncementResponseSuccess

      interface _CreateTransitGatewayVpcAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTransitGatewayVpcAttachmentResult]
        def transit_gateway_vpc_attachment: () -> Types::TransitGatewayVpcAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_transit_gateway_vpc_attachment-instance_method
      def create_transit_gateway_vpc_attachment: (
                                                   transit_gateway_id: ::String,
                                                   vpc_id: ::String,
                                                   subnet_ids: Array[::String],
                                                   ?options: {
                                                     dns_support: ("enable" | "disable")?,
                                                     security_group_referencing_support: ("enable" | "disable")?,
                                                     ipv_6_support: ("enable" | "disable")?,
                                                     appliance_mode_support: ("enable" | "disable")?
                                                   },
                                                   ?tag_specifications: Array[
                                                     {
                                                       resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                       tags: Array[
                                                         {
                                                           key: ::String?,
                                                           value: ::String?
                                                         },
                                                       ]?
                                                     },
                                                   ],
                                                   ?dry_run: bool
                                                 ) -> _CreateTransitGatewayVpcAttachmentResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTransitGatewayVpcAttachmentResponseSuccess

      interface _CreateVerifiedAccessEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVerifiedAccessEndpointResult]
        def verified_access_endpoint: () -> Types::VerifiedAccessEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_verified_access_endpoint-instance_method
      def create_verified_access_endpoint: (
                                             verified_access_group_id: ::String,
                                             endpoint_type: ("load-balancer" | "network-interface"),
                                             attachment_type: ("vpc"),
                                             domain_certificate_arn: ::String,
                                             application_domain: ::String,
                                             endpoint_domain_prefix: ::String,
                                             ?security_group_ids: Array[::String],
                                             ?load_balancer_options: {
                                               protocol: ("http" | "https")?,
                                               port: ::Integer?,
                                               load_balancer_arn: ::String?,
                                               subnet_ids: Array[::String]?
                                             },
                                             ?network_interface_options: {
                                               network_interface_id: ::String?,
                                               protocol: ("http" | "https")?,
                                               port: ::Integer?
                                             },
                                             ?description: ::String,
                                             ?policy_document: ::String,
                                             ?tag_specifications: Array[
                                               {
                                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                 tags: Array[
                                                   {
                                                     key: ::String?,
                                                     value: ::String?
                                                   },
                                                 ]?
                                               },
                                             ],
                                             ?client_token: ::String,
                                             ?dry_run: bool,
                                             ?sse_specification: {
                                               customer_managed_key_enabled: bool?,
                                               kms_key_arn: ::String?
                                             }
                                           ) -> _CreateVerifiedAccessEndpointResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVerifiedAccessEndpointResponseSuccess

      interface _CreateVerifiedAccessGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVerifiedAccessGroupResult]
        def verified_access_group: () -> Types::VerifiedAccessGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_verified_access_group-instance_method
      def create_verified_access_group: (
                                          verified_access_instance_id: ::String,
                                          ?description: ::String,
                                          ?policy_document: ::String,
                                          ?tag_specifications: Array[
                                            {
                                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                              tags: Array[
                                                {
                                                  key: ::String?,
                                                  value: ::String?
                                                },
                                              ]?
                                            },
                                          ],
                                          ?client_token: ::String,
                                          ?dry_run: bool,
                                          ?sse_specification: {
                                            customer_managed_key_enabled: bool?,
                                            kms_key_arn: ::String?
                                          }
                                        ) -> _CreateVerifiedAccessGroupResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVerifiedAccessGroupResponseSuccess

      interface _CreateVerifiedAccessInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVerifiedAccessInstanceResult]
        def verified_access_instance: () -> Types::VerifiedAccessInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_verified_access_instance-instance_method
      def create_verified_access_instance: (
                                             ?description: ::String,
                                             ?tag_specifications: Array[
                                               {
                                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                 tags: Array[
                                                   {
                                                     key: ::String?,
                                                     value: ::String?
                                                   },
                                                 ]?
                                               },
                                             ],
                                             ?client_token: ::String,
                                             ?dry_run: bool,
                                             ?fips_enabled: bool
                                           ) -> _CreateVerifiedAccessInstanceResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVerifiedAccessInstanceResponseSuccess

      interface _CreateVerifiedAccessTrustProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVerifiedAccessTrustProviderResult]
        def verified_access_trust_provider: () -> Types::VerifiedAccessTrustProvider
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_verified_access_trust_provider-instance_method
      def create_verified_access_trust_provider: (
                                                   trust_provider_type: ("user" | "device"),
                                                   ?user_trust_provider_type: ("iam-identity-center" | "oidc"),
                                                   ?device_trust_provider_type: ("jamf" | "crowdstrike" | "jumpcloud"),
                                                   ?oidc_options: {
                                                     issuer: ::String?,
                                                     authorization_endpoint: ::String?,
                                                     token_endpoint: ::String?,
                                                     user_info_endpoint: ::String?,
                                                     client_id: ::String?,
                                                     client_secret: ::String?,
                                                     scope: ::String?
                                                   },
                                                   ?device_options: {
                                                     tenant_id: ::String?,
                                                     public_signing_key_url: ::String?
                                                   },
                                                   policy_reference_name: ::String,
                                                   ?description: ::String,
                                                   ?tag_specifications: Array[
                                                     {
                                                       resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                       tags: Array[
                                                         {
                                                           key: ::String?,
                                                           value: ::String?
                                                         },
                                                       ]?
                                                     },
                                                   ],
                                                   ?client_token: ::String,
                                                   ?dry_run: bool,
                                                   ?sse_specification: {
                                                     customer_managed_key_enabled: bool?,
                                                     kms_key_arn: ::String?
                                                   }
                                                 ) -> _CreateVerifiedAccessTrustProviderResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVerifiedAccessTrustProviderResponseSuccess

      interface _CreateVolumeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::Volume]
        def outpost_arn: () -> ::String
        def iops: () -> ::Integer
        def tags: () -> ::Array[Types::Tag]
        def volume_type: () -> ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")
        def fast_restored: () -> bool
        def multi_attach_enabled: () -> bool
        def throughput: () -> ::Integer
        def sse_type: () -> ("sse-ebs" | "sse-kms" | "none")
        def volume_id: () -> ::String
        def size: () -> ::Integer
        def snapshot_id: () -> ::String
        def availability_zone: () -> ::String
        def state: () -> ("creating" | "available" | "in-use" | "deleting" | "deleted" | "error")
        def create_time: () -> ::Time
        def attachments: () -> ::Array[Types::VolumeAttachment]
        def encrypted: () -> bool
        def kms_key_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_volume-instance_method
      def create_volume: (
                           availability_zone: ::String,
                           ?encrypted: bool,
                           ?iops: ::Integer,
                           ?kms_key_id: ::String,
                           ?outpost_arn: ::String,
                           ?size: ::Integer,
                           ?snapshot_id: ::String,
                           ?volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3"),
                           ?tag_specifications: Array[
                             {
                               resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                               tags: Array[
                                 {
                                   key: ::String?,
                                   value: ::String?
                                 },
                               ]?
                             },
                           ],
                           ?multi_attach_enabled: bool,
                           ?throughput: ::Integer,
                           ?client_token: ::String,
                           ?dry_run: bool
                         ) -> _CreateVolumeResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVolumeResponseSuccess

      interface _CreateVpcResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpcResult]
        def vpc: () -> Types::Vpc
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpc-instance_method
      def create_vpc: (
                        ?cidr_block: ::String,
                        ?ipv_6_pool: ::String,
                        ?ipv_6_cidr_block: ::String,
                        ?ipv_4_ipam_pool_id: ::String,
                        ?ipv_4_netmask_length: ::Integer,
                        ?ipv_6_ipam_pool_id: ::String,
                        ?ipv_6_netmask_length: ::Integer,
                        ?ipv_6_cidr_block_network_border_group: ::String,
                        ?tag_specifications: Array[
                          {
                            resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                            tags: Array[
                              {
                                key: ::String?,
                                value: ::String?
                              },
                            ]?
                          },
                        ],
                        ?dry_run: bool,
                        ?instance_tenancy: ("default" | "dedicated" | "host"),
                        ?amazon_provided_ipv_6_cidr_block: bool
                      ) -> _CreateVpcResponseSuccess
                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpcResponseSuccess

      interface _CreateVpcEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpcEndpointResult]
        def vpc_endpoint: () -> Types::VpcEndpoint
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpc_endpoint-instance_method
      def create_vpc_endpoint: (
                                 ?dry_run: bool,
                                 ?vpc_endpoint_type: ("Interface" | "Gateway" | "GatewayLoadBalancer"),
                                 vpc_id: ::String,
                                 service_name: ::String,
                                 ?policy_document: ::String,
                                 ?route_table_ids: Array[::String],
                                 ?subnet_ids: Array[::String],
                                 ?security_group_ids: Array[::String],
                                 ?ip_address_type: ("ipv4" | "dualstack" | "ipv6"),
                                 ?dns_options: {
                                   dns_record_ip_type: ("ipv4" | "dualstack" | "ipv6" | "service-defined")?,
                                   private_dns_only_for_inbound_resolver_endpoint: bool?
                                 },
                                 ?client_token: ::String,
                                 ?private_dns_enabled: bool,
                                 ?tag_specifications: Array[
                                   {
                                     resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                     tags: Array[
                                       {
                                         key: ::String?,
                                         value: ::String?
                                       },
                                     ]?
                                   },
                                 ],
                                 ?subnet_configurations: Array[
                                   {
                                     subnet_id: ::String?,
                                     ipv_4: ::String?,
                                     ipv_6: ::String?
                                   },
                                 ]
                               ) -> _CreateVpcEndpointResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpcEndpointResponseSuccess

      interface _CreateVpcEndpointConnectionNotificationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpcEndpointConnectionNotificationResult]
        def connection_notification: () -> Types::ConnectionNotification
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpc_endpoint_connection_notification-instance_method
      def create_vpc_endpoint_connection_notification: (
                                                         ?dry_run: bool,
                                                         ?service_id: ::String,
                                                         ?vpc_endpoint_id: ::String,
                                                         connection_notification_arn: ::String,
                                                         connection_events: Array[::String],
                                                         ?client_token: ::String
                                                       ) -> _CreateVpcEndpointConnectionNotificationResponseSuccess
                                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpcEndpointConnectionNotificationResponseSuccess

      interface _CreateVpcEndpointServiceConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpcEndpointServiceConfigurationResult]
        def service_configuration: () -> Types::ServiceConfiguration
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpc_endpoint_service_configuration-instance_method
      def create_vpc_endpoint_service_configuration: (
                                                       ?dry_run: bool,
                                                       ?acceptance_required: bool,
                                                       ?private_dns_name: ::String,
                                                       ?network_load_balancer_arns: Array[::String],
                                                       ?gateway_load_balancer_arns: Array[::String],
                                                       ?supported_ip_address_types: Array[::String],
                                                       ?client_token: ::String,
                                                       ?tag_specifications: Array[
                                                         {
                                                           resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                           tags: Array[
                                                             {
                                                               key: ::String?,
                                                               value: ::String?
                                                             },
                                                           ]?
                                                         },
                                                       ]
                                                     ) -> _CreateVpcEndpointServiceConfigurationResponseSuccess
                                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpcEndpointServiceConfigurationResponseSuccess

      interface _CreateVpcPeeringConnectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpcPeeringConnectionResult]
        def vpc_peering_connection: () -> Types::VpcPeeringConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpc_peering_connection-instance_method
      def create_vpc_peering_connection: (
                                           ?peer_region: ::String,
                                           ?tag_specifications: Array[
                                             {
                                               resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                               tags: Array[
                                                 {
                                                   key: ::String?,
                                                   value: ::String?
                                                 },
                                               ]?
                                             },
                                           ],
                                           ?dry_run: bool,
                                           vpc_id: ::String,
                                           ?peer_vpc_id: ::String,
                                           ?peer_owner_id: ::String
                                         ) -> _CreateVpcPeeringConnectionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpcPeeringConnectionResponseSuccess

      interface _CreateVpnConnectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpnConnectionResult]
        def vpn_connection: () -> Types::VpnConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpn_connection-instance_method
      def create_vpn_connection: (
                                   customer_gateway_id: ::String,
                                   type: ::String,
                                   ?vpn_gateway_id: ::String,
                                   ?transit_gateway_id: ::String,
                                   ?tag_specifications: Array[
                                     {
                                       resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                       tags: Array[
                                         {
                                           key: ::String?,
                                           value: ::String?
                                         },
                                       ]?
                                     },
                                   ],
                                   ?dry_run: bool,
                                   ?options: {
                                     enable_acceleration: bool?,
                                     tunnel_inside_ip_version: ("ipv4" | "ipv6")?,
                                     tunnel_options: Array[
                                       {
                                         tunnel_inside_cidr: ::String?,
                                         tunnel_inside_ipv_6_cidr: ::String?,
                                         pre_shared_key: ::String?,
                                         phase_1_lifetime_seconds: ::Integer?,
                                         phase_2_lifetime_seconds: ::Integer?,
                                         rekey_margin_time_seconds: ::Integer?,
                                         rekey_fuzz_percentage: ::Integer?,
                                         replay_window_size: ::Integer?,
                                         dpd_timeout_seconds: ::Integer?,
                                         dpd_timeout_action: ::String?,
                                         phase_1_encryption_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_2_encryption_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_1_integrity_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_2_integrity_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_1_dh_group_numbers: Array[
                                           {
                                             value: ::Integer?
                                           },
                                         ]?,
                                         phase_2_dh_group_numbers: Array[
                                           {
                                             value: ::Integer?
                                           },
                                         ]?,
                                         ike_versions: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         startup_action: ::String?,
                                         log_options: {
                                           cloud_watch_log_options: {
                                             log_enabled: bool?,
                                             log_group_arn: ::String?,
                                             log_output_format: ::String?
                                           }?
                                         }?,
                                         enable_tunnel_lifecycle_control: bool?
                                       },
                                     ]?,
                                     local_ipv_4_network_cidr: ::String?,
                                     remote_ipv_4_network_cidr: ::String?,
                                     local_ipv_6_network_cidr: ::String?,
                                     remote_ipv_6_network_cidr: ::String?,
                                     outside_ip_address_type: ::String?,
                                     transport_transit_gateway_attachment_id: ::String?,
                                     static_routes_only: bool?
                                   }
                                 ) -> _CreateVpnConnectionResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpnConnectionResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpn_connection_route-instance_method
      def create_vpn_connection_route: (
                                         destination_cidr_block: ::String,
                                         vpn_connection_id: ::String
                                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _CreateVpnGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateVpnGatewayResult]
        def vpn_gateway: () -> Types::VpnGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#create_vpn_gateway-instance_method
      def create_vpn_gateway: (
                                ?availability_zone: ::String,
                                type: ("ipsec.1"),
                                ?tag_specifications: Array[
                                  {
                                    resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                    tags: Array[
                                      {
                                        key: ::String?,
                                        value: ::String?
                                      },
                                    ]?
                                  },
                                ],
                                ?amazon_side_asn: ::Integer,
                                ?dry_run: bool
                              ) -> _CreateVpnGatewayResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateVpnGatewayResponseSuccess

      interface _DeleteCarrierGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteCarrierGatewayResult]
        def carrier_gateway: () -> Types::CarrierGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_carrier_gateway-instance_method
      def delete_carrier_gateway: (
                                    carrier_gateway_id: ::String,
                                    ?dry_run: bool
                                  ) -> _DeleteCarrierGatewayResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteCarrierGatewayResponseSuccess

      interface _DeleteClientVpnEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteClientVpnEndpointResult]
        def status: () -> Types::ClientVpnEndpointStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_client_vpn_endpoint-instance_method
      def delete_client_vpn_endpoint: (
                                        client_vpn_endpoint_id: ::String,
                                        ?dry_run: bool
                                      ) -> _DeleteClientVpnEndpointResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteClientVpnEndpointResponseSuccess

      interface _DeleteClientVpnRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteClientVpnRouteResult]
        def status: () -> Types::ClientVpnRouteStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_client_vpn_route-instance_method
      def delete_client_vpn_route: (
                                     client_vpn_endpoint_id: ::String,
                                     ?target_vpc_subnet_id: ::String,
                                     destination_cidr_block: ::String,
                                     ?dry_run: bool
                                   ) -> _DeleteClientVpnRouteResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteClientVpnRouteResponseSuccess

      interface _DeleteCoipCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteCoipCidrResult]
        def coip_cidr: () -> Types::CoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_coip_cidr-instance_method
      def delete_coip_cidr: (
                              cidr: ::String,
                              coip_pool_id: ::String,
                              ?dry_run: bool
                            ) -> _DeleteCoipCidrResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteCoipCidrResponseSuccess

      interface _DeleteCoipPoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteCoipPoolResult]
        def coip_pool: () -> Types::CoipPool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_coip_pool-instance_method
      def delete_coip_pool: (
                              coip_pool_id: ::String,
                              ?dry_run: bool
                            ) -> _DeleteCoipPoolResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteCoipPoolResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_customer_gateway-instance_method
      def delete_customer_gateway: (
                                     customer_gateway_id: ::String,
                                     ?dry_run: bool
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_dhcp_options-instance_method
      def delete_dhcp_options: (
                                 dhcp_options_id: ::String,
                                 ?dry_run: bool
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteEgressOnlyInternetGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteEgressOnlyInternetGatewayResult]
        def return_code: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_egress_only_internet_gateway-instance_method
      def delete_egress_only_internet_gateway: (
                                                 ?dry_run: bool,
                                                 egress_only_internet_gateway_id: ::String
                                               ) -> _DeleteEgressOnlyInternetGatewayResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteEgressOnlyInternetGatewayResponseSuccess

      interface _DeleteFleetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteFleetsResult]
        def successful_fleet_deletions: () -> ::Array[Types::DeleteFleetSuccessItem]
        def unsuccessful_fleet_deletions: () -> ::Array[Types::DeleteFleetErrorItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_fleets-instance_method
      def delete_fleets: (
                           ?dry_run: bool,
                           fleet_ids: Array[::String],
                           terminate_instances: bool
                         ) -> _DeleteFleetsResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteFleetsResponseSuccess

      interface _DeleteFlowLogsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteFlowLogsResult]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_flow_logs-instance_method
      def delete_flow_logs: (
                              ?dry_run: bool,
                              flow_log_ids: Array[::String]
                            ) -> _DeleteFlowLogsResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteFlowLogsResponseSuccess

      interface _DeleteFpgaImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteFpgaImageResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_fpga_image-instance_method
      def delete_fpga_image: (
                               ?dry_run: bool,
                               fpga_image_id: ::String
                             ) -> _DeleteFpgaImageResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteFpgaImageResponseSuccess

      interface _DeleteInstanceConnectEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteInstanceConnectEndpointResult]
        def instance_connect_endpoint: () -> Types::Ec2InstanceConnectEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_instance_connect_endpoint-instance_method
      def delete_instance_connect_endpoint: (
                                              ?dry_run: bool,
                                              instance_connect_endpoint_id: ::String
                                            ) -> _DeleteInstanceConnectEndpointResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteInstanceConnectEndpointResponseSuccess

      interface _DeleteInstanceEventWindowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteInstanceEventWindowResult]
        def instance_event_window_state: () -> Types::InstanceEventWindowStateChange
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_instance_event_window-instance_method
      def delete_instance_event_window: (
                                          ?dry_run: bool,
                                          ?force_delete: bool,
                                          instance_event_window_id: ::String
                                        ) -> _DeleteInstanceEventWindowResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteInstanceEventWindowResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_internet_gateway-instance_method
      def delete_internet_gateway: (
                                     ?dry_run: bool,
                                     internet_gateway_id: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteIpamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteIpamResult]
        def ipam: () -> Types::Ipam
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_ipam-instance_method
      def delete_ipam: (
                         ?dry_run: bool,
                         ipam_id: ::String,
                         ?cascade: bool
                       ) -> _DeleteIpamResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIpamResponseSuccess

      interface _DeleteIpamExternalResourceVerificationTokenResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteIpamExternalResourceVerificationTokenResult]
        def ipam_external_resource_verification_token: () -> Types::IpamExternalResourceVerificationToken
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_ipam_external_resource_verification_token-instance_method
      def delete_ipam_external_resource_verification_token: (
                                                              ?dry_run: bool,
                                                              ipam_external_resource_verification_token_id: ::String
                                                            ) -> _DeleteIpamExternalResourceVerificationTokenResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIpamExternalResourceVerificationTokenResponseSuccess

      interface _DeleteIpamPoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteIpamPoolResult]
        def ipam_pool: () -> Types::IpamPool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_ipam_pool-instance_method
      def delete_ipam_pool: (
                              ?dry_run: bool,
                              ipam_pool_id: ::String,
                              ?cascade: bool
                            ) -> _DeleteIpamPoolResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIpamPoolResponseSuccess

      interface _DeleteIpamResourceDiscoveryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteIpamResourceDiscoveryResult]
        def ipam_resource_discovery: () -> Types::IpamResourceDiscovery
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_ipam_resource_discovery-instance_method
      def delete_ipam_resource_discovery: (
                                            ?dry_run: bool,
                                            ipam_resource_discovery_id: ::String
                                          ) -> _DeleteIpamResourceDiscoveryResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIpamResourceDiscoveryResponseSuccess

      interface _DeleteIpamScopeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteIpamScopeResult]
        def ipam_scope: () -> Types::IpamScope
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_ipam_scope-instance_method
      def delete_ipam_scope: (
                               ?dry_run: bool,
                               ipam_scope_id: ::String
                             ) -> _DeleteIpamScopeResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIpamScopeResponseSuccess

      interface _DeleteKeyPairResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteKeyPairResult]
        def return: () -> bool
        def key_pair_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_key_pair-instance_method
      def delete_key_pair: (
                             ?key_name: ::String,
                             ?key_pair_id: ::String,
                             ?dry_run: bool
                           ) -> _DeleteKeyPairResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteKeyPairResponseSuccess

      interface _DeleteLaunchTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteLaunchTemplateResult]
        def launch_template: () -> Types::LaunchTemplate
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_launch_template-instance_method
      def delete_launch_template: (
                                    ?dry_run: bool,
                                    ?launch_template_id: ::String,
                                    ?launch_template_name: ::String
                                  ) -> _DeleteLaunchTemplateResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteLaunchTemplateResponseSuccess

      interface _DeleteLaunchTemplateVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteLaunchTemplateVersionsResult]
        def successfully_deleted_launch_template_versions: () -> ::Array[Types::DeleteLaunchTemplateVersionsResponseSuccessItem]
        def unsuccessfully_deleted_launch_template_versions: () -> ::Array[Types::DeleteLaunchTemplateVersionsResponseErrorItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_launch_template_versions-instance_method
      def delete_launch_template_versions: (
                                             ?dry_run: bool,
                                             ?launch_template_id: ::String,
                                             ?launch_template_name: ::String,
                                             versions: Array[::String]
                                           ) -> _DeleteLaunchTemplateVersionsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteLaunchTemplateVersionsResponseSuccess

      interface _DeleteLocalGatewayRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteLocalGatewayRouteResult]
        def route: () -> Types::LocalGatewayRoute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_local_gateway_route-instance_method
      def delete_local_gateway_route: (
                                        ?destination_cidr_block: ::String,
                                        local_gateway_route_table_id: ::String,
                                        ?dry_run: bool,
                                        ?destination_prefix_list_id: ::String
                                      ) -> _DeleteLocalGatewayRouteResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteLocalGatewayRouteResponseSuccess

      interface _DeleteLocalGatewayRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteLocalGatewayRouteTableResult]
        def local_gateway_route_table: () -> Types::LocalGatewayRouteTable
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_local_gateway_route_table-instance_method
      def delete_local_gateway_route_table: (
                                              local_gateway_route_table_id: ::String,
                                              ?dry_run: bool
                                            ) -> _DeleteLocalGatewayRouteTableResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteLocalGatewayRouteTableResponseSuccess

      interface _DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult]
        def local_gateway_route_table_virtual_interface_group_association: () -> Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_local_gateway_route_table_virtual_interface_group_association-instance_method
      def delete_local_gateway_route_table_virtual_interface_group_association: (
                                                                                  local_gateway_route_table_virtual_interface_group_association_id: ::String,
                                                                                  ?dry_run: bool
                                                                                ) -> _DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponseSuccess
                                                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResponseSuccess

      interface _DeleteLocalGatewayRouteTableVpcAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteLocalGatewayRouteTableVpcAssociationResult]
        def local_gateway_route_table_vpc_association: () -> Types::LocalGatewayRouteTableVpcAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_local_gateway_route_table_vpc_association-instance_method
      def delete_local_gateway_route_table_vpc_association: (
                                                              local_gateway_route_table_vpc_association_id: ::String,
                                                              ?dry_run: bool
                                                            ) -> _DeleteLocalGatewayRouteTableVpcAssociationResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteLocalGatewayRouteTableVpcAssociationResponseSuccess

      interface _DeleteManagedPrefixListResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteManagedPrefixListResult]
        def prefix_list: () -> Types::ManagedPrefixList
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_managed_prefix_list-instance_method
      def delete_managed_prefix_list: (
                                        ?dry_run: bool,
                                        prefix_list_id: ::String
                                      ) -> _DeleteManagedPrefixListResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteManagedPrefixListResponseSuccess

      interface _DeleteNatGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteNatGatewayResult]
        def nat_gateway_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_nat_gateway-instance_method
      def delete_nat_gateway: (
                                ?dry_run: bool,
                                nat_gateway_id: ::String
                              ) -> _DeleteNatGatewayResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteNatGatewayResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_acl-instance_method
      def delete_network_acl: (
                                ?dry_run: bool,
                                network_acl_id: ::String
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_acl_entry-instance_method
      def delete_network_acl_entry: (
                                      ?dry_run: bool,
                                      network_acl_id: ::String,
                                      rule_number: ::Integer,
                                      egress: bool
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteNetworkInsightsAccessScopeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteNetworkInsightsAccessScopeResult]
        def network_insights_access_scope_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_insights_access_scope-instance_method
      def delete_network_insights_access_scope: (
                                                  ?dry_run: bool,
                                                  network_insights_access_scope_id: ::String
                                                ) -> _DeleteNetworkInsightsAccessScopeResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteNetworkInsightsAccessScopeResponseSuccess

      interface _DeleteNetworkInsightsAccessScopeAnalysisResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteNetworkInsightsAccessScopeAnalysisResult]
        def network_insights_access_scope_analysis_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_insights_access_scope_analysis-instance_method
      def delete_network_insights_access_scope_analysis: (
                                                           network_insights_access_scope_analysis_id: ::String,
                                                           ?dry_run: bool
                                                         ) -> _DeleteNetworkInsightsAccessScopeAnalysisResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteNetworkInsightsAccessScopeAnalysisResponseSuccess

      interface _DeleteNetworkInsightsAnalysisResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteNetworkInsightsAnalysisResult]
        def network_insights_analysis_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_insights_analysis-instance_method
      def delete_network_insights_analysis: (
                                              ?dry_run: bool,
                                              network_insights_analysis_id: ::String
                                            ) -> _DeleteNetworkInsightsAnalysisResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteNetworkInsightsAnalysisResponseSuccess

      interface _DeleteNetworkInsightsPathResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteNetworkInsightsPathResult]
        def network_insights_path_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_insights_path-instance_method
      def delete_network_insights_path: (
                                          ?dry_run: bool,
                                          network_insights_path_id: ::String
                                        ) -> _DeleteNetworkInsightsPathResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteNetworkInsightsPathResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_interface-instance_method
      def delete_network_interface: (
                                      ?dry_run: bool,
                                      network_interface_id: ::String
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteNetworkInterfacePermissionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteNetworkInterfacePermissionResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_network_interface_permission-instance_method
      def delete_network_interface_permission: (
                                                 network_interface_permission_id: ::String,
                                                 ?force: bool,
                                                 ?dry_run: bool
                                               ) -> _DeleteNetworkInterfacePermissionResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteNetworkInterfacePermissionResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_placement_group-instance_method
      def delete_placement_group: (
                                    ?dry_run: bool,
                                    group_name: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeletePublicIpv4PoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeletePublicIpv4PoolResult]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_public_ipv_4_pool-instance_method
      def delete_public_ipv_4_pool: (
                                      ?dry_run: bool,
                                      pool_id: ::String,
                                      ?network_border_group: ::String
                                    ) -> _DeletePublicIpv4PoolResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeletePublicIpv4PoolResponseSuccess

      interface _DeleteQueuedReservedInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteQueuedReservedInstancesResult]
        def successful_queued_purchase_deletions: () -> ::Array[Types::SuccessfulQueuedPurchaseDeletion]
        def failed_queued_purchase_deletions: () -> ::Array[Types::FailedQueuedPurchaseDeletion]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_queued_reserved_instances-instance_method
      def delete_queued_reserved_instances: (
                                              ?dry_run: bool,
                                              reserved_instances_ids: Array[::String]
                                            ) -> _DeleteQueuedReservedInstancesResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteQueuedReservedInstancesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_route-instance_method
      def delete_route: (
                          ?destination_prefix_list_id: ::String,
                          ?dry_run: bool,
                          route_table_id: ::String,
                          ?destination_cidr_block: ::String,
                          ?destination_ipv_6_cidr_block: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_route_table-instance_method
      def delete_route_table: (
                                ?dry_run: bool,
                                route_table_id: ::String
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_security_group-instance_method
      def delete_security_group: (
                                   ?group_id: ::String,
                                   ?group_name: ::String,
                                   ?dry_run: bool
                                 ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_snapshot-instance_method
      def delete_snapshot: (
                             snapshot_id: ::String,
                             ?dry_run: bool
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_spot_datafeed_subscription-instance_method
      def delete_spot_datafeed_subscription: (
                                               ?dry_run: bool
                                             ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_subnet-instance_method
      def delete_subnet: (
                           subnet_id: ::String,
                           ?dry_run: bool
                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteSubnetCidrReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteSubnetCidrReservationResult]
        def deleted_subnet_cidr_reservation: () -> Types::SubnetCidrReservation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_subnet_cidr_reservation-instance_method
      def delete_subnet_cidr_reservation: (
                                            subnet_cidr_reservation_id: ::String,
                                            ?dry_run: bool
                                          ) -> _DeleteSubnetCidrReservationResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteSubnetCidrReservationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_tags-instance_method
      def delete_tags: (
                         ?dry_run: bool,
                         resources: Array[::String],
                         ?tags: Array[
                           {
                             key: ::String?,
                             value: ::String?
                           },
                         ]
                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteTrafficMirrorFilterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTrafficMirrorFilterResult]
        def traffic_mirror_filter_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_traffic_mirror_filter-instance_method
      def delete_traffic_mirror_filter: (
                                          traffic_mirror_filter_id: ::String,
                                          ?dry_run: bool
                                        ) -> _DeleteTrafficMirrorFilterResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTrafficMirrorFilterResponseSuccess

      interface _DeleteTrafficMirrorFilterRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTrafficMirrorFilterRuleResult]
        def traffic_mirror_filter_rule_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_traffic_mirror_filter_rule-instance_method
      def delete_traffic_mirror_filter_rule: (
                                               traffic_mirror_filter_rule_id: ::String,
                                               ?dry_run: bool
                                             ) -> _DeleteTrafficMirrorFilterRuleResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTrafficMirrorFilterRuleResponseSuccess

      interface _DeleteTrafficMirrorSessionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTrafficMirrorSessionResult]
        def traffic_mirror_session_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_traffic_mirror_session-instance_method
      def delete_traffic_mirror_session: (
                                           traffic_mirror_session_id: ::String,
                                           ?dry_run: bool
                                         ) -> _DeleteTrafficMirrorSessionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTrafficMirrorSessionResponseSuccess

      interface _DeleteTrafficMirrorTargetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTrafficMirrorTargetResult]
        def traffic_mirror_target_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_traffic_mirror_target-instance_method
      def delete_traffic_mirror_target: (
                                          traffic_mirror_target_id: ::String,
                                          ?dry_run: bool
                                        ) -> _DeleteTrafficMirrorTargetResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTrafficMirrorTargetResponseSuccess

      interface _DeleteTransitGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayResult]
        def transit_gateway: () -> Types::TransitGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway-instance_method
      def delete_transit_gateway: (
                                    transit_gateway_id: ::String,
                                    ?dry_run: bool
                                  ) -> _DeleteTransitGatewayResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayResponseSuccess

      interface _DeleteTransitGatewayConnectResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayConnectResult]
        def transit_gateway_connect: () -> Types::TransitGatewayConnect
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_connect-instance_method
      def delete_transit_gateway_connect: (
                                            transit_gateway_attachment_id: ::String,
                                            ?dry_run: bool
                                          ) -> _DeleteTransitGatewayConnectResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayConnectResponseSuccess

      interface _DeleteTransitGatewayConnectPeerResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayConnectPeerResult]
        def transit_gateway_connect_peer: () -> Types::TransitGatewayConnectPeer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_connect_peer-instance_method
      def delete_transit_gateway_connect_peer: (
                                                 transit_gateway_connect_peer_id: ::String,
                                                 ?dry_run: bool
                                               ) -> _DeleteTransitGatewayConnectPeerResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayConnectPeerResponseSuccess

      interface _DeleteTransitGatewayMulticastDomainResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayMulticastDomainResult]
        def transit_gateway_multicast_domain: () -> Types::TransitGatewayMulticastDomain
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_multicast_domain-instance_method
      def delete_transit_gateway_multicast_domain: (
                                                     transit_gateway_multicast_domain_id: ::String,
                                                     ?dry_run: bool
                                                   ) -> _DeleteTransitGatewayMulticastDomainResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayMulticastDomainResponseSuccess

      interface _DeleteTransitGatewayPeeringAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayPeeringAttachmentResult]
        def transit_gateway_peering_attachment: () -> Types::TransitGatewayPeeringAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_peering_attachment-instance_method
      def delete_transit_gateway_peering_attachment: (
                                                       transit_gateway_attachment_id: ::String,
                                                       ?dry_run: bool
                                                     ) -> _DeleteTransitGatewayPeeringAttachmentResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayPeeringAttachmentResponseSuccess

      interface _DeleteTransitGatewayPolicyTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayPolicyTableResult]
        def transit_gateway_policy_table: () -> Types::TransitGatewayPolicyTable
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_policy_table-instance_method
      def delete_transit_gateway_policy_table: (
                                                 transit_gateway_policy_table_id: ::String,
                                                 ?dry_run: bool
                                               ) -> _DeleteTransitGatewayPolicyTableResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayPolicyTableResponseSuccess

      interface _DeleteTransitGatewayPrefixListReferenceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayPrefixListReferenceResult]
        def transit_gateway_prefix_list_reference: () -> Types::TransitGatewayPrefixListReference
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_prefix_list_reference-instance_method
      def delete_transit_gateway_prefix_list_reference: (
                                                          transit_gateway_route_table_id: ::String,
                                                          prefix_list_id: ::String,
                                                          ?dry_run: bool
                                                        ) -> _DeleteTransitGatewayPrefixListReferenceResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayPrefixListReferenceResponseSuccess

      interface _DeleteTransitGatewayRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayRouteResult]
        def route: () -> Types::TransitGatewayRoute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_route-instance_method
      def delete_transit_gateway_route: (
                                          transit_gateway_route_table_id: ::String,
                                          destination_cidr_block: ::String,
                                          ?dry_run: bool
                                        ) -> _DeleteTransitGatewayRouteResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayRouteResponseSuccess

      interface _DeleteTransitGatewayRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayRouteTableResult]
        def transit_gateway_route_table: () -> Types::TransitGatewayRouteTable
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_route_table-instance_method
      def delete_transit_gateway_route_table: (
                                                transit_gateway_route_table_id: ::String,
                                                ?dry_run: bool
                                              ) -> _DeleteTransitGatewayRouteTableResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayRouteTableResponseSuccess

      interface _DeleteTransitGatewayRouteTableAnnouncementResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayRouteTableAnnouncementResult]
        def transit_gateway_route_table_announcement: () -> Types::TransitGatewayRouteTableAnnouncement
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_route_table_announcement-instance_method
      def delete_transit_gateway_route_table_announcement: (
                                                             transit_gateway_route_table_announcement_id: ::String,
                                                             ?dry_run: bool
                                                           ) -> _DeleteTransitGatewayRouteTableAnnouncementResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayRouteTableAnnouncementResponseSuccess

      interface _DeleteTransitGatewayVpcAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteTransitGatewayVpcAttachmentResult]
        def transit_gateway_vpc_attachment: () -> Types::TransitGatewayVpcAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_transit_gateway_vpc_attachment-instance_method
      def delete_transit_gateway_vpc_attachment: (
                                                   transit_gateway_attachment_id: ::String,
                                                   ?dry_run: bool
                                                 ) -> _DeleteTransitGatewayVpcAttachmentResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteTransitGatewayVpcAttachmentResponseSuccess

      interface _DeleteVerifiedAccessEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVerifiedAccessEndpointResult]
        def verified_access_endpoint: () -> Types::VerifiedAccessEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_verified_access_endpoint-instance_method
      def delete_verified_access_endpoint: (
                                             verified_access_endpoint_id: ::String,
                                             ?client_token: ::String,
                                             ?dry_run: bool
                                           ) -> _DeleteVerifiedAccessEndpointResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVerifiedAccessEndpointResponseSuccess

      interface _DeleteVerifiedAccessGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVerifiedAccessGroupResult]
        def verified_access_group: () -> Types::VerifiedAccessGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_verified_access_group-instance_method
      def delete_verified_access_group: (
                                          verified_access_group_id: ::String,
                                          ?client_token: ::String,
                                          ?dry_run: bool
                                        ) -> _DeleteVerifiedAccessGroupResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVerifiedAccessGroupResponseSuccess

      interface _DeleteVerifiedAccessInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVerifiedAccessInstanceResult]
        def verified_access_instance: () -> Types::VerifiedAccessInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_verified_access_instance-instance_method
      def delete_verified_access_instance: (
                                             verified_access_instance_id: ::String,
                                             ?dry_run: bool,
                                             ?client_token: ::String
                                           ) -> _DeleteVerifiedAccessInstanceResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVerifiedAccessInstanceResponseSuccess

      interface _DeleteVerifiedAccessTrustProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVerifiedAccessTrustProviderResult]
        def verified_access_trust_provider: () -> Types::VerifiedAccessTrustProvider
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_verified_access_trust_provider-instance_method
      def delete_verified_access_trust_provider: (
                                                   verified_access_trust_provider_id: ::String,
                                                   ?dry_run: bool,
                                                   ?client_token: ::String
                                                 ) -> _DeleteVerifiedAccessTrustProviderResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVerifiedAccessTrustProviderResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_volume-instance_method
      def delete_volume: (
                           volume_id: ::String,
                           ?dry_run: bool
                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpc-instance_method
      def delete_vpc: (
                        vpc_id: ::String,
                        ?dry_run: bool
                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeleteVpcEndpointConnectionNotificationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVpcEndpointConnectionNotificationsResult]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpc_endpoint_connection_notifications-instance_method
      def delete_vpc_endpoint_connection_notifications: (
                                                          ?dry_run: bool,
                                                          connection_notification_ids: Array[::String]
                                                        ) -> _DeleteVpcEndpointConnectionNotificationsResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVpcEndpointConnectionNotificationsResponseSuccess

      interface _DeleteVpcEndpointServiceConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVpcEndpointServiceConfigurationsResult]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpc_endpoint_service_configurations-instance_method
      def delete_vpc_endpoint_service_configurations: (
                                                        ?dry_run: bool,
                                                        service_ids: Array[::String]
                                                      ) -> _DeleteVpcEndpointServiceConfigurationsResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVpcEndpointServiceConfigurationsResponseSuccess

      interface _DeleteVpcEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVpcEndpointsResult]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpc_endpoints-instance_method
      def delete_vpc_endpoints: (
                                  ?dry_run: bool,
                                  vpc_endpoint_ids: Array[::String]
                                ) -> _DeleteVpcEndpointsResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVpcEndpointsResponseSuccess

      interface _DeleteVpcPeeringConnectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteVpcPeeringConnectionResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpc_peering_connection-instance_method
      def delete_vpc_peering_connection: (
                                           ?dry_run: bool,
                                           vpc_peering_connection_id: ::String
                                         ) -> _DeleteVpcPeeringConnectionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteVpcPeeringConnectionResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpn_connection-instance_method
      def delete_vpn_connection: (
                                   vpn_connection_id: ::String,
                                   ?dry_run: bool
                                 ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpn_connection_route-instance_method
      def delete_vpn_connection_route: (
                                         destination_cidr_block: ::String,
                                         vpn_connection_id: ::String
                                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#delete_vpn_gateway-instance_method
      def delete_vpn_gateway: (
                                vpn_gateway_id: ::String,
                                ?dry_run: bool
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeprovisionByoipCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeprovisionByoipCidrResult]
        def byoip_cidr: () -> Types::ByoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deprovision_byoip_cidr-instance_method
      def deprovision_byoip_cidr: (
                                    cidr: ::String,
                                    ?dry_run: bool
                                  ) -> _DeprovisionByoipCidrResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeprovisionByoipCidrResponseSuccess

      interface _DeprovisionIpamByoasnResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeprovisionIpamByoasnResult]
        def byoasn: () -> Types::Byoasn
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deprovision_ipam_byoasn-instance_method
      def deprovision_ipam_byoasn: (
                                     ?dry_run: bool,
                                     ipam_id: ::String,
                                     asn: ::String
                                   ) -> _DeprovisionIpamByoasnResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeprovisionIpamByoasnResponseSuccess

      interface _DeprovisionIpamPoolCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeprovisionIpamPoolCidrResult]
        def ipam_pool_cidr: () -> Types::IpamPoolCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deprovision_ipam_pool_cidr-instance_method
      def deprovision_ipam_pool_cidr: (
                                        ?dry_run: bool,
                                        ipam_pool_id: ::String,
                                        ?cidr: ::String
                                      ) -> _DeprovisionIpamPoolCidrResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeprovisionIpamPoolCidrResponseSuccess

      interface _DeprovisionPublicIpv4PoolCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeprovisionPublicIpv4PoolCidrResult]
        def pool_id: () -> ::String
        def deprovisioned_addresses: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deprovision_public_ipv_4_pool_cidr-instance_method
      def deprovision_public_ipv_4_pool_cidr: (
                                                ?dry_run: bool,
                                                pool_id: ::String,
                                                cidr: ::String
                                              ) -> _DeprovisionPublicIpv4PoolCidrResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeprovisionPublicIpv4PoolCidrResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deregister_image-instance_method
      def deregister_image: (
                              image_id: ::String,
                              ?dry_run: bool
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DeregisterInstanceEventNotificationAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterInstanceEventNotificationAttributesResult]
        def instance_tag_attribute: () -> Types::InstanceTagNotificationAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deregister_instance_event_notification_attributes-instance_method
      def deregister_instance_event_notification_attributes: (
                                                               ?dry_run: bool,
                                                               instance_tag_attribute: {
                                                                 include_all_tags_of_instance: bool?,
                                                                 instance_tag_keys: Array[::String]?
                                                               }
                                                             ) -> _DeregisterInstanceEventNotificationAttributesResponseSuccess
                                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterInstanceEventNotificationAttributesResponseSuccess

      interface _DeregisterTransitGatewayMulticastGroupMembersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterTransitGatewayMulticastGroupMembersResult]
        def deregistered_multicast_group_members: () -> Types::TransitGatewayMulticastDeregisteredGroupMembers
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deregister_transit_gateway_multicast_group_members-instance_method
      def deregister_transit_gateway_multicast_group_members: (
                                                                ?transit_gateway_multicast_domain_id: ::String,
                                                                ?group_ip_address: ::String,
                                                                ?network_interface_ids: Array[::String],
                                                                ?dry_run: bool
                                                              ) -> _DeregisterTransitGatewayMulticastGroupMembersResponseSuccess
                                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterTransitGatewayMulticastGroupMembersResponseSuccess

      interface _DeregisterTransitGatewayMulticastGroupSourcesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterTransitGatewayMulticastGroupSourcesResult]
        def deregistered_multicast_group_sources: () -> Types::TransitGatewayMulticastDeregisteredGroupSources
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#deregister_transit_gateway_multicast_group_sources-instance_method
      def deregister_transit_gateway_multicast_group_sources: (
                                                                ?transit_gateway_multicast_domain_id: ::String,
                                                                ?group_ip_address: ::String,
                                                                ?network_interface_ids: Array[::String],
                                                                ?dry_run: bool
                                                              ) -> _DeregisterTransitGatewayMulticastGroupSourcesResponseSuccess
                                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterTransitGatewayMulticastGroupSourcesResponseSuccess

      interface _DescribeAccountAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAccountAttributesResult]
        def account_attributes: () -> ::Array[Types::AccountAttribute]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_account_attributes-instance_method
      def describe_account_attributes: (
                                         ?dry_run: bool,
                                         ?attribute_names: Array[("supported-platforms" | "default-vpc")]
                                       ) -> _DescribeAccountAttributesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAccountAttributesResponseSuccess

      interface _DescribeAddressTransfersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAddressTransfersResult]
        def address_transfers: () -> ::Array[Types::AddressTransfer]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_address_transfers-instance_method
      def describe_address_transfers: (
                                        ?allocation_ids: Array[::String],
                                        ?next_token: ::String,
                                        ?max_results: ::Integer,
                                        ?dry_run: bool
                                      ) -> _DescribeAddressTransfersResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAddressTransfersResponseSuccess

      interface _DescribeAddressesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAddressesResult]
        def addresses: () -> ::Array[Types::Address]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_addresses-instance_method
      def describe_addresses: (
                                ?public_ips: Array[::String],
                                ?dry_run: bool,
                                ?filters: Array[
                                  {
                                    name: ::String?,
                                    values: Array[::String]?
                                  },
                                ],
                                ?allocation_ids: Array[::String]
                              ) -> _DescribeAddressesResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAddressesResponseSuccess

      interface _DescribeAddressesAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAddressesAttributeResult]
        def addresses: () -> ::Array[Types::AddressAttribute]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_addresses_attribute-instance_method
      def describe_addresses_attribute: (
                                          ?allocation_ids: Array[::String],
                                          ?attribute: ("domain-name"),
                                          ?next_token: ::String,
                                          ?max_results: ::Integer,
                                          ?dry_run: bool
                                        ) -> _DescribeAddressesAttributeResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAddressesAttributeResponseSuccess

      interface _DescribeAggregateIdFormatResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAggregateIdFormatResult]
        def use_long_ids_aggregated: () -> bool
        def statuses: () -> ::Array[Types::IdFormat]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_aggregate_id_format-instance_method
      def describe_aggregate_id_format: (
                                          ?dry_run: bool
                                        ) -> _DescribeAggregateIdFormatResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAggregateIdFormatResponseSuccess

      interface _DescribeAvailabilityZonesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAvailabilityZonesResult]
        def availability_zones: () -> ::Array[Types::AvailabilityZone]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_availability_zones-instance_method
      def describe_availability_zones: (
                                         ?zone_names: Array[::String],
                                         ?zone_ids: Array[::String],
                                         ?all_availability_zones: bool,
                                         ?dry_run: bool,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ]
                                       ) -> _DescribeAvailabilityZonesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAvailabilityZonesResponseSuccess

      interface _DescribeAwsNetworkPerformanceMetricSubscriptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAwsNetworkPerformanceMetricSubscriptionsResult]
        def next_token: () -> ::String
        def subscriptions: () -> ::Array[Types::Subscription]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_aws_network_performance_metric_subscriptions-instance_method
      def describe_aws_network_performance_metric_subscriptions: (
                                                                   ?max_results: ::Integer,
                                                                   ?next_token: ::String,
                                                                   ?filters: Array[
                                                                     {
                                                                       name: ::String?,
                                                                       values: Array[::String]?
                                                                     },
                                                                   ],
                                                                   ?dry_run: bool
                                                                 ) -> _DescribeAwsNetworkPerformanceMetricSubscriptionsResponseSuccess
                                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAwsNetworkPerformanceMetricSubscriptionsResponseSuccess

      interface _DescribeBundleTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeBundleTasksResult]
        def bundle_tasks: () -> ::Array[Types::BundleTask]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_bundle_tasks-instance_method
      def describe_bundle_tasks: (
                                   ?bundle_ids: Array[::String],
                                   ?dry_run: bool,
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ]
                                 ) -> _DescribeBundleTasksResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeBundleTasksResponseSuccess

      interface _DescribeByoipCidrsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeByoipCidrsResult]
        def byoip_cidrs: () -> ::Array[Types::ByoipCidr]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_byoip_cidrs-instance_method
      def describe_byoip_cidrs: (
                                  ?dry_run: bool,
                                  max_results: ::Integer,
                                  ?next_token: ::String
                                ) -> _DescribeByoipCidrsResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeByoipCidrsResponseSuccess

      interface _DescribeCapacityBlockOfferingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCapacityBlockOfferingsResult]
        def capacity_block_offerings: () -> ::Array[Types::CapacityBlockOffering]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_capacity_block_offerings-instance_method
      def describe_capacity_block_offerings: (
                                               ?dry_run: bool,
                                               ?instance_type: ::String,
                                               ?instance_count: ::Integer,
                                               ?start_date_range: ::Time,
                                               ?end_date_range: ::Time,
                                               capacity_duration_hours: ::Integer,
                                               ?next_token: ::String,
                                               ?max_results: ::Integer
                                             ) -> _DescribeCapacityBlockOfferingsResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCapacityBlockOfferingsResponseSuccess

      interface _DescribeCapacityReservationBillingRequestsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCapacityReservationBillingRequestsResult]
        def next_token: () -> ::String
        def capacity_reservation_billing_requests: () -> ::Array[Types::CapacityReservationBillingRequest]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_capacity_reservation_billing_requests-instance_method
      def describe_capacity_reservation_billing_requests: (
                                                            ?capacity_reservation_ids: Array[::String],
                                                            role: ("odcr-owner" | "unused-reservation-billing-owner"),
                                                            ?next_token: ::String,
                                                            ?max_results: ::Integer,
                                                            ?filters: Array[
                                                              {
                                                                name: ::String?,
                                                                values: Array[::String]?
                                                              },
                                                            ],
                                                            ?dry_run: bool
                                                          ) -> _DescribeCapacityReservationBillingRequestsResponseSuccess
                                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCapacityReservationBillingRequestsResponseSuccess

      interface _DescribeCapacityReservationFleetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCapacityReservationFleetsResult]
        def capacity_reservation_fleets: () -> ::Array[Types::CapacityReservationFleet]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_capacity_reservation_fleets-instance_method
      def describe_capacity_reservation_fleets: (
                                                  ?capacity_reservation_fleet_ids: Array[::String],
                                                  ?next_token: ::String,
                                                  ?max_results: ::Integer,
                                                  ?filters: Array[
                                                    {
                                                      name: ::String?,
                                                      values: Array[::String]?
                                                    },
                                                  ],
                                                  ?dry_run: bool
                                                ) -> _DescribeCapacityReservationFleetsResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCapacityReservationFleetsResponseSuccess

      interface _DescribeCapacityReservationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCapacityReservationsResult]
        def next_token: () -> ::String
        def capacity_reservations: () -> ::Array[Types::CapacityReservation]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_capacity_reservations-instance_method
      def describe_capacity_reservations: (
                                            ?capacity_reservation_ids: Array[::String],
                                            ?next_token: ::String,
                                            ?max_results: ::Integer,
                                            ?filters: Array[
                                              {
                                                name: ::String?,
                                                values: Array[::String]?
                                              },
                                            ],
                                            ?dry_run: bool
                                          ) -> _DescribeCapacityReservationsResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCapacityReservationsResponseSuccess

      interface _DescribeCarrierGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCarrierGatewaysResult]
        def carrier_gateways: () -> ::Array[Types::CarrierGateway]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_carrier_gateways-instance_method
      def describe_carrier_gateways: (
                                       ?carrier_gateway_ids: Array[::String],
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ],
                                       ?max_results: ::Integer,
                                       ?next_token: ::String,
                                       ?dry_run: bool
                                     ) -> _DescribeCarrierGatewaysResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCarrierGatewaysResponseSuccess

      interface _DescribeClassicLinkInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeClassicLinkInstancesResult]
        def instances: () -> ::Array[Types::ClassicLinkInstance]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_classic_link_instances-instance_method
      def describe_classic_link_instances: (
                                             ?dry_run: bool,
                                             ?instance_ids: Array[::String],
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?next_token: ::String,
                                             ?max_results: ::Integer
                                           ) -> _DescribeClassicLinkInstancesResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeClassicLinkInstancesResponseSuccess

      interface _DescribeClientVpnAuthorizationRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeClientVpnAuthorizationRulesResult]
        def authorization_rules: () -> ::Array[Types::AuthorizationRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_client_vpn_authorization_rules-instance_method
      def describe_client_vpn_authorization_rules: (
                                                     client_vpn_endpoint_id: ::String,
                                                     ?dry_run: bool,
                                                     ?next_token: ::String,
                                                     ?filters: Array[
                                                       {
                                                         name: ::String?,
                                                         values: Array[::String]?
                                                       },
                                                     ],
                                                     ?max_results: ::Integer
                                                   ) -> _DescribeClientVpnAuthorizationRulesResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeClientVpnAuthorizationRulesResponseSuccess

      interface _DescribeClientVpnConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeClientVpnConnectionsResult]
        def connections: () -> ::Array[Types::ClientVpnConnection]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_client_vpn_connections-instance_method
      def describe_client_vpn_connections: (
                                             client_vpn_endpoint_id: ::String,
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?next_token: ::String,
                                             ?max_results: ::Integer,
                                             ?dry_run: bool
                                           ) -> _DescribeClientVpnConnectionsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeClientVpnConnectionsResponseSuccess

      interface _DescribeClientVpnEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeClientVpnEndpointsResult]
        def client_vpn_endpoints: () -> ::Array[Types::ClientVpnEndpoint]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_client_vpn_endpoints-instance_method
      def describe_client_vpn_endpoints: (
                                           ?client_vpn_endpoint_ids: Array[::String],
                                           ?max_results: ::Integer,
                                           ?next_token: ::String,
                                           ?filters: Array[
                                             {
                                               name: ::String?,
                                               values: Array[::String]?
                                             },
                                           ],
                                           ?dry_run: bool
                                         ) -> _DescribeClientVpnEndpointsResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeClientVpnEndpointsResponseSuccess

      interface _DescribeClientVpnRoutesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeClientVpnRoutesResult]
        def routes: () -> ::Array[Types::ClientVpnRoute]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_client_vpn_routes-instance_method
      def describe_client_vpn_routes: (
                                        client_vpn_endpoint_id: ::String,
                                        ?filters: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ],
                                        ?max_results: ::Integer,
                                        ?next_token: ::String,
                                        ?dry_run: bool
                                      ) -> _DescribeClientVpnRoutesResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeClientVpnRoutesResponseSuccess

      interface _DescribeClientVpnTargetNetworksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeClientVpnTargetNetworksResult]
        def client_vpn_target_networks: () -> ::Array[Types::TargetNetwork]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_client_vpn_target_networks-instance_method
      def describe_client_vpn_target_networks: (
                                                 client_vpn_endpoint_id: ::String,
                                                 ?association_ids: Array[::String],
                                                 ?max_results: ::Integer,
                                                 ?next_token: ::String,
                                                 ?filters: Array[
                                                   {
                                                     name: ::String?,
                                                     values: Array[::String]?
                                                   },
                                                 ],
                                                 ?dry_run: bool
                                               ) -> _DescribeClientVpnTargetNetworksResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeClientVpnTargetNetworksResponseSuccess

      interface _DescribeCoipPoolsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCoipPoolsResult]
        def coip_pools: () -> ::Array[Types::CoipPool]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_coip_pools-instance_method
      def describe_coip_pools: (
                                 ?pool_ids: Array[::String],
                                 ?filters: Array[
                                   {
                                     name: ::String?,
                                     values: Array[::String]?
                                   },
                                 ],
                                 ?max_results: ::Integer,
                                 ?next_token: ::String,
                                 ?dry_run: bool
                               ) -> _DescribeCoipPoolsResponseSuccess
                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCoipPoolsResponseSuccess

      interface _DescribeConversionTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeConversionTasksResult]
        def conversion_tasks: () -> ::Array[Types::ConversionTask]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_conversion_tasks-instance_method
      def describe_conversion_tasks: (
                                       ?dry_run: bool,
                                       ?conversion_task_ids: Array[::String]
                                     ) -> _DescribeConversionTasksResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeConversionTasksResponseSuccess

      interface _DescribeCustomerGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCustomerGatewaysResult]
        def customer_gateways: () -> ::Array[Types::CustomerGateway]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_customer_gateways-instance_method
      def describe_customer_gateways: (
                                        ?customer_gateway_ids: Array[::String],
                                        ?filters: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ],
                                        ?dry_run: bool
                                      ) -> _DescribeCustomerGatewaysResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCustomerGatewaysResponseSuccess

      interface _DescribeDhcpOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDhcpOptionsResult]
        def next_token: () -> ::String
        def dhcp_options: () -> ::Array[Types::DhcpOptions]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_dhcp_options-instance_method
      def describe_dhcp_options: (
                                   ?dhcp_options_ids: Array[::String],
                                   ?next_token: ::String,
                                   ?max_results: ::Integer,
                                   ?dry_run: bool,
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ]
                                 ) -> _DescribeDhcpOptionsResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDhcpOptionsResponseSuccess

      interface _DescribeEgressOnlyInternetGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeEgressOnlyInternetGatewaysResult]
        def egress_only_internet_gateways: () -> ::Array[Types::EgressOnlyInternetGateway]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_egress_only_internet_gateways-instance_method
      def describe_egress_only_internet_gateways: (
                                                    ?dry_run: bool,
                                                    ?egress_only_internet_gateway_ids: Array[::String],
                                                    ?max_results: ::Integer,
                                                    ?next_token: ::String,
                                                    ?filters: Array[
                                                      {
                                                        name: ::String?,
                                                        values: Array[::String]?
                                                      },
                                                    ]
                                                  ) -> _DescribeEgressOnlyInternetGatewaysResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEgressOnlyInternetGatewaysResponseSuccess

      interface _DescribeElasticGpusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeElasticGpusResult]
        def elastic_gpu_set: () -> ::Array[Types::ElasticGpus]
        def max_results: () -> ::Integer
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_elastic_gpus-instance_method
      def describe_elastic_gpus: (
                                   ?elastic_gpu_ids: Array[::String],
                                   ?dry_run: bool,
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ],
                                   ?max_results: ::Integer,
                                   ?next_token: ::String
                                 ) -> _DescribeElasticGpusResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeElasticGpusResponseSuccess

      interface _DescribeExportImageTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeExportImageTasksResult]
        def export_image_tasks: () -> ::Array[Types::ExportImageTask]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_export_image_tasks-instance_method
      def describe_export_image_tasks: (
                                         ?dry_run: bool,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?export_image_task_ids: Array[::String],
                                         ?max_results: ::Integer,
                                         ?next_token: ::String
                                       ) -> _DescribeExportImageTasksResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeExportImageTasksResponseSuccess

      interface _DescribeExportTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeExportTasksResult]
        def export_tasks: () -> ::Array[Types::ExportTask]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_export_tasks-instance_method
      def describe_export_tasks: (
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ],
                                   ?export_task_ids: Array[::String]
                                 ) -> _DescribeExportTasksResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeExportTasksResponseSuccess

      interface _DescribeFastLaunchImagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFastLaunchImagesResult]
        def fast_launch_images: () -> ::Array[Types::DescribeFastLaunchImagesSuccessItem]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fast_launch_images-instance_method
      def describe_fast_launch_images: (
                                         ?image_ids: Array[::String],
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?max_results: ::Integer,
                                         ?next_token: ::String,
                                         ?dry_run: bool
                                       ) -> _DescribeFastLaunchImagesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFastLaunchImagesResponseSuccess

      interface _DescribeFastSnapshotRestoresResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFastSnapshotRestoresResult]
        def fast_snapshot_restores: () -> ::Array[Types::DescribeFastSnapshotRestoreSuccessItem]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fast_snapshot_restores-instance_method
      def describe_fast_snapshot_restores: (
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?max_results: ::Integer,
                                             ?next_token: ::String,
                                             ?dry_run: bool
                                           ) -> _DescribeFastSnapshotRestoresResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFastSnapshotRestoresResponseSuccess

      interface _DescribeFleetHistoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFleetHistoryResult]
        def history_records: () -> ::Array[Types::HistoryRecordEntry]
        def last_evaluated_time: () -> ::Time
        def next_token: () -> ::String
        def fleet_id: () -> ::String
        def start_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fleet_history-instance_method
      def describe_fleet_history: (
                                    ?dry_run: bool,
                                    ?event_type: ("instance-change" | "fleet-change" | "service-error"),
                                    ?max_results: ::Integer,
                                    ?next_token: ::String,
                                    fleet_id: ::String,
                                    start_time: ::Time
                                  ) -> _DescribeFleetHistoryResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFleetHistoryResponseSuccess

      interface _DescribeFleetInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFleetInstancesResult]
        def active_instances: () -> ::Array[Types::ActiveInstance]
        def next_token: () -> ::String
        def fleet_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fleet_instances-instance_method
      def describe_fleet_instances: (
                                      ?dry_run: bool,
                                      ?max_results: ::Integer,
                                      ?next_token: ::String,
                                      fleet_id: ::String,
                                      ?filters: Array[
                                        {
                                          name: ::String?,
                                          values: Array[::String]?
                                        },
                                      ]
                                    ) -> _DescribeFleetInstancesResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFleetInstancesResponseSuccess

      interface _DescribeFleetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFleetsResult]
        def next_token: () -> ::String
        def fleets: () -> ::Array[Types::FleetData]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fleets-instance_method
      def describe_fleets: (
                             ?dry_run: bool,
                             ?max_results: ::Integer,
                             ?next_token: ::String,
                             ?fleet_ids: Array[::String],
                             ?filters: Array[
                               {
                                 name: ::String?,
                                 values: Array[::String]?
                               },
                             ]
                           ) -> _DescribeFleetsResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFleetsResponseSuccess

      interface _DescribeFlowLogsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFlowLogsResult]
        def flow_logs: () -> ::Array[Types::FlowLog]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_flow_logs-instance_method
      def describe_flow_logs: (
                                ?dry_run: bool,
                                ?filter: Array[
                                  {
                                    name: ::String?,
                                    values: Array[::String]?
                                  },
                                ],
                                ?flow_log_ids: Array[::String],
                                ?max_results: ::Integer,
                                ?next_token: ::String
                              ) -> _DescribeFlowLogsResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFlowLogsResponseSuccess

      interface _DescribeFpgaImageAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFpgaImageAttributeResult]
        def fpga_image_attribute: () -> Types::FpgaImageAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fpga_image_attribute-instance_method
      def describe_fpga_image_attribute: (
                                           ?dry_run: bool,
                                           fpga_image_id: ::String,
                                           attribute: ("description" | "name" | "loadPermission" | "productCodes")
                                         ) -> _DescribeFpgaImageAttributeResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFpgaImageAttributeResponseSuccess

      interface _DescribeFpgaImagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFpgaImagesResult]
        def fpga_images: () -> ::Array[Types::FpgaImage]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_fpga_images-instance_method
      def describe_fpga_images: (
                                  ?dry_run: bool,
                                  ?fpga_image_ids: Array[::String],
                                  ?owners: Array[::String],
                                  ?filters: Array[
                                    {
                                      name: ::String?,
                                      values: Array[::String]?
                                    },
                                  ],
                                  ?next_token: ::String,
                                  ?max_results: ::Integer
                                ) -> _DescribeFpgaImagesResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFpgaImagesResponseSuccess

      interface _DescribeHostReservationOfferingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeHostReservationOfferingsResult]
        def next_token: () -> ::String
        def offering_set: () -> ::Array[Types::HostOffering]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_host_reservation_offerings-instance_method
      def describe_host_reservation_offerings: (
                                                 ?filter: Array[
                                                   {
                                                     name: ::String?,
                                                     values: Array[::String]?
                                                   },
                                                 ],
                                                 ?max_duration: ::Integer,
                                                 ?max_results: ::Integer,
                                                 ?min_duration: ::Integer,
                                                 ?next_token: ::String,
                                                 ?offering_id: ::String
                                               ) -> _DescribeHostReservationOfferingsResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeHostReservationOfferingsResponseSuccess

      interface _DescribeHostReservationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeHostReservationsResult]
        def host_reservation_set: () -> ::Array[Types::HostReservation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_host_reservations-instance_method
      def describe_host_reservations: (
                                        ?filter: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ],
                                        ?host_reservation_id_set: Array[::String],
                                        ?max_results: ::Integer,
                                        ?next_token: ::String
                                      ) -> _DescribeHostReservationsResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeHostReservationsResponseSuccess

      interface _DescribeHostsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeHostsResult]
        def hosts: () -> ::Array[Types::Host]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_hosts-instance_method
      def describe_hosts: (
                            ?host_ids: Array[::String],
                            ?next_token: ::String,
                            ?max_results: ::Integer,
                            ?filter: Array[
                              {
                                name: ::String?,
                                values: Array[::String]?
                              },
                            ]
                          ) -> _DescribeHostsResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeHostsResponseSuccess

      interface _DescribeIamInstanceProfileAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIamInstanceProfileAssociationsResult]
        def iam_instance_profile_associations: () -> ::Array[Types::IamInstanceProfileAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_iam_instance_profile_associations-instance_method
      def describe_iam_instance_profile_associations: (
                                                        ?association_ids: Array[::String],
                                                        ?filters: Array[
                                                          {
                                                            name: ::String?,
                                                            values: Array[::String]?
                                                          },
                                                        ],
                                                        ?max_results: ::Integer,
                                                        ?next_token: ::String
                                                      ) -> _DescribeIamInstanceProfileAssociationsResponseSuccess
                                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIamInstanceProfileAssociationsResponseSuccess

      interface _DescribeIdFormatResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIdFormatResult]
        def statuses: () -> ::Array[Types::IdFormat]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_id_format-instance_method
      def describe_id_format: (
                                ?resource: ::String
                              ) -> _DescribeIdFormatResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIdFormatResponseSuccess

      interface _DescribeIdentityIdFormatResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIdentityIdFormatResult]
        def statuses: () -> ::Array[Types::IdFormat]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_identity_id_format-instance_method
      def describe_identity_id_format: (
                                         ?resource: ::String,
                                         principal_arn: ::String
                                       ) -> _DescribeIdentityIdFormatResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIdentityIdFormatResponseSuccess

      interface _DescribeImageAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImageAttribute]
        def description: () -> Types::AttributeValue
        def kernel_id: () -> Types::AttributeValue
        def ramdisk_id: () -> Types::AttributeValue
        def sriov_net_support: () -> Types::AttributeValue
        def boot_mode: () -> Types::AttributeValue
        def tpm_support: () -> Types::AttributeValue
        def uefi_data: () -> Types::AttributeValue
        def last_launched_time: () -> Types::AttributeValue
        def imds_support: () -> Types::AttributeValue
        def deregistration_protection: () -> Types::AttributeValue
        def image_id: () -> ::String
        def launch_permissions: () -> ::Array[Types::LaunchPermission]
        def product_codes: () -> ::Array[Types::ProductCode]
        def block_device_mappings: () -> ::Array[Types::BlockDeviceMapping]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_image_attribute-instance_method
      def describe_image_attribute: (
                                      attribute: ("description" | "kernel" | "ramdisk" | "launchPermission" | "productCodes" | "blockDeviceMapping" | "sriovNetSupport" | "bootMode" | "tpmSupport" | "uefiData" | "lastLaunchedTime" | "imdsSupport" | "deregistrationProtection"),
                                      image_id: ::String,
                                      ?dry_run: bool
                                    ) -> _DescribeImageAttributeResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeImageAttributeResponseSuccess

      interface _DescribeImagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeImagesResult]
        def next_token: () -> ::String
        def images: () -> ::Array[Types::Image]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_images-instance_method
      def describe_images: (
                             ?executable_users: Array[::String],
                             ?image_ids: Array[::String],
                             ?owners: Array[::String],
                             ?include_deprecated: bool,
                             ?include_disabled: bool,
                             ?max_results: ::Integer,
                             ?next_token: ::String,
                             ?dry_run: bool,
                             ?filters: Array[
                               {
                                 name: ::String?,
                                 values: Array[::String]?
                               },
                             ]
                           ) -> _DescribeImagesResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeImagesResponseSuccess

      interface _DescribeImportImageTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeImportImageTasksResult]
        def import_image_tasks: () -> ::Array[Types::ImportImageTask]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_import_image_tasks-instance_method
      def describe_import_image_tasks: (
                                         ?dry_run: bool,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?import_task_ids: Array[::String],
                                         ?max_results: ::Integer,
                                         ?next_token: ::String
                                       ) -> _DescribeImportImageTasksResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeImportImageTasksResponseSuccess

      interface _DescribeImportSnapshotTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeImportSnapshotTasksResult]
        def import_snapshot_tasks: () -> ::Array[Types::ImportSnapshotTask]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_import_snapshot_tasks-instance_method
      def describe_import_snapshot_tasks: (
                                            ?dry_run: bool,
                                            ?filters: Array[
                                              {
                                                name: ::String?,
                                                values: Array[::String]?
                                              },
                                            ],
                                            ?import_task_ids: Array[::String],
                                            ?max_results: ::Integer,
                                            ?next_token: ::String
                                          ) -> _DescribeImportSnapshotTasksResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeImportSnapshotTasksResponseSuccess

      interface _DescribeInstanceAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::InstanceAttribute]
        def block_device_mappings: () -> ::Array[Types::InstanceBlockDeviceMapping]
        def disable_api_termination: () -> Types::AttributeBooleanValue
        def ena_support: () -> Types::AttributeBooleanValue
        def enclave_options: () -> Types::EnclaveOptions
        def ebs_optimized: () -> Types::AttributeBooleanValue
        def instance_id: () -> ::String
        def instance_initiated_shutdown_behavior: () -> Types::AttributeValue
        def instance_type: () -> Types::AttributeValue
        def kernel_id: () -> Types::AttributeValue
        def product_codes: () -> ::Array[Types::ProductCode]
        def ramdisk_id: () -> Types::AttributeValue
        def root_device_name: () -> Types::AttributeValue
        def source_dest_check: () -> Types::AttributeBooleanValue
        def sriov_net_support: () -> Types::AttributeValue
        def user_data: () -> Types::AttributeValue
        def disable_api_stop: () -> Types::AttributeBooleanValue
        def groups: () -> ::Array[Types::GroupIdentifier]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_attribute-instance_method
      def describe_instance_attribute: (
                                         ?dry_run: bool,
                                         instance_id: ::String,
                                         attribute: ("instanceType" | "kernel" | "ramdisk" | "userData" | "disableApiTermination" | "instanceInitiatedShutdownBehavior" | "rootDeviceName" | "blockDeviceMapping" | "productCodes" | "sourceDestCheck" | "groupSet" | "ebsOptimized" | "sriovNetSupport" | "enaSupport" | "enclaveOptions" | "disableApiStop")
                                       ) -> _DescribeInstanceAttributeResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceAttributeResponseSuccess

      interface _DescribeInstanceConnectEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceConnectEndpointsResult]
        def instance_connect_endpoints: () -> ::Array[Types::Ec2InstanceConnectEndpoint]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_connect_endpoints-instance_method
      def describe_instance_connect_endpoints: (
                                                 ?dry_run: bool,
                                                 ?max_results: ::Integer,
                                                 ?next_token: ::String,
                                                 ?filters: Array[
                                                   {
                                                     name: ::String?,
                                                     values: Array[::String]?
                                                   },
                                                 ],
                                                 ?instance_connect_endpoint_ids: Array[::String]
                                               ) -> _DescribeInstanceConnectEndpointsResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceConnectEndpointsResponseSuccess

      interface _DescribeInstanceCreditSpecificationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceCreditSpecificationsResult]
        def instance_credit_specifications: () -> ::Array[Types::InstanceCreditSpecification]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_credit_specifications-instance_method
      def describe_instance_credit_specifications: (
                                                     ?dry_run: bool,
                                                     ?filters: Array[
                                                       {
                                                         name: ::String?,
                                                         values: Array[::String]?
                                                       },
                                                     ],
                                                     ?instance_ids: Array[::String],
                                                     ?max_results: ::Integer,
                                                     ?next_token: ::String
                                                   ) -> _DescribeInstanceCreditSpecificationsResponseSuccess
                                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceCreditSpecificationsResponseSuccess

      interface _DescribeInstanceEventNotificationAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceEventNotificationAttributesResult]
        def instance_tag_attribute: () -> Types::InstanceTagNotificationAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_event_notification_attributes-instance_method
      def describe_instance_event_notification_attributes: (
                                                             ?dry_run: bool
                                                           ) -> _DescribeInstanceEventNotificationAttributesResponseSuccess
                                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceEventNotificationAttributesResponseSuccess

      interface _DescribeInstanceEventWindowsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceEventWindowsResult]
        def instance_event_windows: () -> ::Array[Types::InstanceEventWindow]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_event_windows-instance_method
      def describe_instance_event_windows: (
                                             ?dry_run: bool,
                                             ?instance_event_window_ids: Array[::String],
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?max_results: ::Integer,
                                             ?next_token: ::String
                                           ) -> _DescribeInstanceEventWindowsResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceEventWindowsResponseSuccess

      interface _DescribeInstanceStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceStatusResult]
        def instance_statuses: () -> ::Array[Types::InstanceStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_status-instance_method
      def describe_instance_status: (
                                      ?instance_ids: Array[::String],
                                      ?max_results: ::Integer,
                                      ?next_token: ::String,
                                      ?dry_run: bool,
                                      ?filters: Array[
                                        {
                                          name: ::String?,
                                          values: Array[::String]?
                                        },
                                      ],
                                      ?include_all_instances: bool
                                    ) -> _DescribeInstanceStatusResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceStatusResponseSuccess

      interface _DescribeInstanceTopologyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceTopologyResult]
        def instances: () -> ::Array[Types::InstanceTopology]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_topology-instance_method
      def describe_instance_topology: (
                                        ?dry_run: bool,
                                        ?next_token: ::String,
                                        ?max_results: ::Integer,
                                        ?instance_ids: Array[::String],
                                        ?group_names: Array[::String],
                                        ?filters: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ]
                                      ) -> _DescribeInstanceTopologyResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceTopologyResponseSuccess

      interface _DescribeInstanceTypeOfferingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceTypeOfferingsResult]
        def instance_type_offerings: () -> ::Array[Types::InstanceTypeOffering]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_type_offerings-instance_method
      def describe_instance_type_offerings: (
                                              ?dry_run: bool,
                                              ?location_type: ("region" | "availability-zone" | "availability-zone-id" | "outpost"),
                                              ?filters: Array[
                                                {
                                                  name: ::String?,
                                                  values: Array[::String]?
                                                },
                                              ],
                                              ?max_results: ::Integer,
                                              ?next_token: ::String
                                            ) -> _DescribeInstanceTypeOfferingsResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceTypeOfferingsResponseSuccess

      interface _DescribeInstanceTypesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstanceTypesResult]
        def instance_types: () -> ::Array[Types::InstanceTypeInfo]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instance_types-instance_method
      def describe_instance_types: (
                                     ?dry_run: bool,
                                     ?instance_types: Array[("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")],
                                     ?filters: Array[
                                       {
                                         name: ::String?,
                                         values: Array[::String]?
                                       },
                                     ],
                                     ?max_results: ::Integer,
                                     ?next_token: ::String
                                   ) -> _DescribeInstanceTypesResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstanceTypesResponseSuccess

      interface _DescribeInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstancesResult]
        def next_token: () -> ::String
        def reservations: () -> ::Array[Types::Reservation]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_instances-instance_method
      def describe_instances: (
                                ?instance_ids: Array[::String],
                                ?dry_run: bool,
                                ?filters: Array[
                                  {
                                    name: ::String?,
                                    values: Array[::String]?
                                  },
                                ],
                                ?next_token: ::String,
                                ?max_results: ::Integer
                              ) -> _DescribeInstancesResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstancesResponseSuccess

      interface _DescribeInternetGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInternetGatewaysResult]
        def internet_gateways: () -> ::Array[Types::InternetGateway]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_internet_gateways-instance_method
      def describe_internet_gateways: (
                                        ?next_token: ::String,
                                        ?max_results: ::Integer,
                                        ?dry_run: bool,
                                        ?internet_gateway_ids: Array[::String],
                                        ?filters: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ]
                                      ) -> _DescribeInternetGatewaysResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInternetGatewaysResponseSuccess

      interface _DescribeIpamByoasnResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamByoasnResult]
        def byoasns: () -> ::Array[Types::Byoasn]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipam_byoasn-instance_method
      def describe_ipam_byoasn: (
                                  ?dry_run: bool,
                                  ?max_results: ::Integer,
                                  ?next_token: ::String
                                ) -> _DescribeIpamByoasnResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamByoasnResponseSuccess

      interface _DescribeIpamExternalResourceVerificationTokensResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamExternalResourceVerificationTokensResult]
        def next_token: () -> ::String
        def ipam_external_resource_verification_tokens: () -> ::Array[Types::IpamExternalResourceVerificationToken]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipam_external_resource_verification_tokens-instance_method
      def describe_ipam_external_resource_verification_tokens: (
                                                                 ?dry_run: bool,
                                                                 ?filters: Array[
                                                                   {
                                                                     name: ::String?,
                                                                     values: Array[::String]?
                                                                   },
                                                                 ],
                                                                 ?next_token: ::String,
                                                                 ?max_results: ::Integer,
                                                                 ?ipam_external_resource_verification_token_ids: Array[::String]
                                                               ) -> _DescribeIpamExternalResourceVerificationTokensResponseSuccess
                                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamExternalResourceVerificationTokensResponseSuccess

      interface _DescribeIpamPoolsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamPoolsResult]
        def next_token: () -> ::String
        def ipam_pools: () -> ::Array[Types::IpamPool]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipam_pools-instance_method
      def describe_ipam_pools: (
                                 ?dry_run: bool,
                                 ?filters: Array[
                                   {
                                     name: ::String?,
                                     values: Array[::String]?
                                   },
                                 ],
                                 ?max_results: ::Integer,
                                 ?next_token: ::String,
                                 ?ipam_pool_ids: Array[::String]
                               ) -> _DescribeIpamPoolsResponseSuccess
                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamPoolsResponseSuccess

      interface _DescribeIpamResourceDiscoveriesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamResourceDiscoveriesResult]
        def ipam_resource_discoveries: () -> ::Array[Types::IpamResourceDiscovery]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipam_resource_discoveries-instance_method
      def describe_ipam_resource_discoveries: (
                                                ?dry_run: bool,
                                                ?ipam_resource_discovery_ids: Array[::String],
                                                ?next_token: ::String,
                                                ?max_results: ::Integer,
                                                ?filters: Array[
                                                  {
                                                    name: ::String?,
                                                    values: Array[::String]?
                                                  },
                                                ]
                                              ) -> _DescribeIpamResourceDiscoveriesResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamResourceDiscoveriesResponseSuccess

      interface _DescribeIpamResourceDiscoveryAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamResourceDiscoveryAssociationsResult]
        def ipam_resource_discovery_associations: () -> ::Array[Types::IpamResourceDiscoveryAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipam_resource_discovery_associations-instance_method
      def describe_ipam_resource_discovery_associations: (
                                                           ?dry_run: bool,
                                                           ?ipam_resource_discovery_association_ids: Array[::String],
                                                           ?next_token: ::String,
                                                           ?max_results: ::Integer,
                                                           ?filters: Array[
                                                             {
                                                               name: ::String?,
                                                               values: Array[::String]?
                                                             },
                                                           ]
                                                         ) -> _DescribeIpamResourceDiscoveryAssociationsResponseSuccess
                                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamResourceDiscoveryAssociationsResponseSuccess

      interface _DescribeIpamScopesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamScopesResult]
        def next_token: () -> ::String
        def ipam_scopes: () -> ::Array[Types::IpamScope]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipam_scopes-instance_method
      def describe_ipam_scopes: (
                                  ?dry_run: bool,
                                  ?filters: Array[
                                    {
                                      name: ::String?,
                                      values: Array[::String]?
                                    },
                                  ],
                                  ?max_results: ::Integer,
                                  ?next_token: ::String,
                                  ?ipam_scope_ids: Array[::String]
                                ) -> _DescribeIpamScopesResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamScopesResponseSuccess

      interface _DescribeIpamsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpamsResult]
        def next_token: () -> ::String
        def ipams: () -> ::Array[Types::Ipam]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipams-instance_method
      def describe_ipams: (
                            ?dry_run: bool,
                            ?filters: Array[
                              {
                                name: ::String?,
                                values: Array[::String]?
                              },
                            ],
                            ?max_results: ::Integer,
                            ?next_token: ::String,
                            ?ipam_ids: Array[::String]
                          ) -> _DescribeIpamsResponseSuccess
                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpamsResponseSuccess

      interface _DescribeIpv6PoolsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeIpv6PoolsResult]
        def ipv_6_pools: () -> ::Array[Types::Ipv6Pool]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_ipv_6_pools-instance_method
      def describe_ipv_6_pools: (
                                  ?pool_ids: Array[::String],
                                  ?next_token: ::String,
                                  ?max_results: ::Integer,
                                  ?dry_run: bool,
                                  ?filters: Array[
                                    {
                                      name: ::String?,
                                      values: Array[::String]?
                                    },
                                  ]
                                ) -> _DescribeIpv6PoolsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeIpv6PoolsResponseSuccess

      interface _DescribeKeyPairsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeKeyPairsResult]
        def key_pairs: () -> ::Array[Types::KeyPairInfo]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_key_pairs-instance_method
      def describe_key_pairs: (
                                ?key_names: Array[::String],
                                ?key_pair_ids: Array[::String],
                                ?include_public_key: bool,
                                ?dry_run: bool,
                                ?filters: Array[
                                  {
                                    name: ::String?,
                                    values: Array[::String]?
                                  },
                                ]
                              ) -> _DescribeKeyPairsResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeKeyPairsResponseSuccess

      interface _DescribeLaunchTemplateVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLaunchTemplateVersionsResult]
        def launch_template_versions: () -> ::Array[Types::LaunchTemplateVersion]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_launch_template_versions-instance_method
      def describe_launch_template_versions: (
                                               ?dry_run: bool,
                                               ?launch_template_id: ::String,
                                               ?launch_template_name: ::String,
                                               ?versions: Array[::String],
                                               ?min_version: ::String,
                                               ?max_version: ::String,
                                               ?next_token: ::String,
                                               ?max_results: ::Integer,
                                               ?filters: Array[
                                                 {
                                                   name: ::String?,
                                                   values: Array[::String]?
                                                 },
                                               ],
                                               ?resolve_alias: bool
                                             ) -> _DescribeLaunchTemplateVersionsResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLaunchTemplateVersionsResponseSuccess

      interface _DescribeLaunchTemplatesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLaunchTemplatesResult]
        def launch_templates: () -> ::Array[Types::LaunchTemplate]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_launch_templates-instance_method
      def describe_launch_templates: (
                                       ?dry_run: bool,
                                       ?launch_template_ids: Array[::String],
                                       ?launch_template_names: Array[::String],
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ],
                                       ?next_token: ::String,
                                       ?max_results: ::Integer
                                     ) -> _DescribeLaunchTemplatesResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLaunchTemplatesResponseSuccess

      interface _DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult]
        def local_gateway_route_table_virtual_interface_group_associations: () -> ::Array[Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_local_gateway_route_table_virtual_interface_group_associations-instance_method
      def describe_local_gateway_route_table_virtual_interface_group_associations: (
                                                                                     ?local_gateway_route_table_virtual_interface_group_association_ids: Array[::String],
                                                                                     ?filters: Array[
                                                                                       {
                                                                                         name: ::String?,
                                                                                         values: Array[::String]?
                                                                                       },
                                                                                     ],
                                                                                     ?max_results: ::Integer,
                                                                                     ?next_token: ::String,
                                                                                     ?dry_run: bool
                                                                                   ) -> _DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseSuccess
                                                                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseSuccess

      interface _DescribeLocalGatewayRouteTableVpcAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLocalGatewayRouteTableVpcAssociationsResult]
        def local_gateway_route_table_vpc_associations: () -> ::Array[Types::LocalGatewayRouteTableVpcAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_local_gateway_route_table_vpc_associations-instance_method
      def describe_local_gateway_route_table_vpc_associations: (
                                                                 ?local_gateway_route_table_vpc_association_ids: Array[::String],
                                                                 ?filters: Array[
                                                                   {
                                                                     name: ::String?,
                                                                     values: Array[::String]?
                                                                   },
                                                                 ],
                                                                 ?max_results: ::Integer,
                                                                 ?next_token: ::String,
                                                                 ?dry_run: bool
                                                               ) -> _DescribeLocalGatewayRouteTableVpcAssociationsResponseSuccess
                                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLocalGatewayRouteTableVpcAssociationsResponseSuccess

      interface _DescribeLocalGatewayRouteTablesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLocalGatewayRouteTablesResult]
        def local_gateway_route_tables: () -> ::Array[Types::LocalGatewayRouteTable]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_local_gateway_route_tables-instance_method
      def describe_local_gateway_route_tables: (
                                                 ?local_gateway_route_table_ids: Array[::String],
                                                 ?filters: Array[
                                                   {
                                                     name: ::String?,
                                                     values: Array[::String]?
                                                   },
                                                 ],
                                                 ?max_results: ::Integer,
                                                 ?next_token: ::String,
                                                 ?dry_run: bool
                                               ) -> _DescribeLocalGatewayRouteTablesResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLocalGatewayRouteTablesResponseSuccess

      interface _DescribeLocalGatewayVirtualInterfaceGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLocalGatewayVirtualInterfaceGroupsResult]
        def local_gateway_virtual_interface_groups: () -> ::Array[Types::LocalGatewayVirtualInterfaceGroup]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_local_gateway_virtual_interface_groups-instance_method
      def describe_local_gateway_virtual_interface_groups: (
                                                             ?local_gateway_virtual_interface_group_ids: Array[::String],
                                                             ?filters: Array[
                                                               {
                                                                 name: ::String?,
                                                                 values: Array[::String]?
                                                               },
                                                             ],
                                                             ?max_results: ::Integer,
                                                             ?next_token: ::String,
                                                             ?dry_run: bool
                                                           ) -> _DescribeLocalGatewayVirtualInterfaceGroupsResponseSuccess
                                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLocalGatewayVirtualInterfaceGroupsResponseSuccess

      interface _DescribeLocalGatewayVirtualInterfacesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLocalGatewayVirtualInterfacesResult]
        def local_gateway_virtual_interfaces: () -> ::Array[Types::LocalGatewayVirtualInterface]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_local_gateway_virtual_interfaces-instance_method
      def describe_local_gateway_virtual_interfaces: (
                                                       ?local_gateway_virtual_interface_ids: Array[::String],
                                                       ?filters: Array[
                                                         {
                                                           name: ::String?,
                                                           values: Array[::String]?
                                                         },
                                                       ],
                                                       ?max_results: ::Integer,
                                                       ?next_token: ::String,
                                                       ?dry_run: bool
                                                     ) -> _DescribeLocalGatewayVirtualInterfacesResponseSuccess
                                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLocalGatewayVirtualInterfacesResponseSuccess

      interface _DescribeLocalGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLocalGatewaysResult]
        def local_gateways: () -> ::Array[Types::LocalGateway]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_local_gateways-instance_method
      def describe_local_gateways: (
                                     ?local_gateway_ids: Array[::String],
                                     ?filters: Array[
                                       {
                                         name: ::String?,
                                         values: Array[::String]?
                                       },
                                     ],
                                     ?max_results: ::Integer,
                                     ?next_token: ::String,
                                     ?dry_run: bool
                                   ) -> _DescribeLocalGatewaysResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLocalGatewaysResponseSuccess

      interface _DescribeLockedSnapshotsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLockedSnapshotsResult]
        def snapshots: () -> ::Array[Types::LockedSnapshotsInfo]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_locked_snapshots-instance_method
      def describe_locked_snapshots: (
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ],
                                       ?max_results: ::Integer,
                                       ?next_token: ::String,
                                       ?snapshot_ids: Array[::String],
                                       ?dry_run: bool
                                     ) -> _DescribeLockedSnapshotsResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLockedSnapshotsResponseSuccess

      interface _DescribeMacHostsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeMacHostsResult]
        def mac_hosts: () -> ::Array[Types::MacHost]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_mac_hosts-instance_method
      def describe_mac_hosts: (
                                ?filters: Array[
                                  {
                                    name: ::String?,
                                    values: Array[::String]?
                                  },
                                ],
                                ?host_ids: Array[::String],
                                ?max_results: ::Integer,
                                ?next_token: ::String
                              ) -> _DescribeMacHostsResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeMacHostsResponseSuccess

      interface _DescribeManagedPrefixListsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeManagedPrefixListsResult]
        def next_token: () -> ::String
        def prefix_lists: () -> ::Array[Types::ManagedPrefixList]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_managed_prefix_lists-instance_method
      def describe_managed_prefix_lists: (
                                           ?dry_run: bool,
                                           ?filters: Array[
                                             {
                                               name: ::String?,
                                               values: Array[::String]?
                                             },
                                           ],
                                           ?max_results: ::Integer,
                                           ?next_token: ::String,
                                           ?prefix_list_ids: Array[::String]
                                         ) -> _DescribeManagedPrefixListsResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeManagedPrefixListsResponseSuccess

      interface _DescribeMovingAddressesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeMovingAddressesResult]
        def moving_address_statuses: () -> ::Array[Types::MovingAddressStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_moving_addresses-instance_method
      def describe_moving_addresses: (
                                       ?dry_run: bool,
                                       ?public_ips: Array[::String],
                                       ?next_token: ::String,
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ],
                                       ?max_results: ::Integer
                                     ) -> _DescribeMovingAddressesResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeMovingAddressesResponseSuccess

      interface _DescribeNatGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNatGatewaysResult]
        def nat_gateways: () -> ::Array[Types::NatGateway]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_nat_gateways-instance_method
      def describe_nat_gateways: (
                                   ?dry_run: bool,
                                   ?filter: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ],
                                   ?max_results: ::Integer,
                                   ?nat_gateway_ids: Array[::String],
                                   ?next_token: ::String
                                 ) -> _DescribeNatGatewaysResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNatGatewaysResponseSuccess

      interface _DescribeNetworkAclsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkAclsResult]
        def network_acls: () -> ::Array[Types::NetworkAcl]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_acls-instance_method
      def describe_network_acls: (
                                   ?next_token: ::String,
                                   ?max_results: ::Integer,
                                   ?dry_run: bool,
                                   ?network_acl_ids: Array[::String],
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ]
                                 ) -> _DescribeNetworkAclsResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkAclsResponseSuccess

      interface _DescribeNetworkInsightsAccessScopeAnalysesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInsightsAccessScopeAnalysesResult]
        def network_insights_access_scope_analyses: () -> ::Array[Types::NetworkInsightsAccessScopeAnalysis]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_insights_access_scope_analyses-instance_method
      def describe_network_insights_access_scope_analyses: (
                                                             ?network_insights_access_scope_analysis_ids: Array[::String],
                                                             ?network_insights_access_scope_id: ::String,
                                                             ?analysis_start_time_begin: ::Time,
                                                             ?analysis_start_time_end: ::Time,
                                                             ?filters: Array[
                                                               {
                                                                 name: ::String?,
                                                                 values: Array[::String]?
                                                               },
                                                             ],
                                                             ?max_results: ::Integer,
                                                             ?dry_run: bool,
                                                             ?next_token: ::String
                                                           ) -> _DescribeNetworkInsightsAccessScopeAnalysesResponseSuccess
                                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInsightsAccessScopeAnalysesResponseSuccess

      interface _DescribeNetworkInsightsAccessScopesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInsightsAccessScopesResult]
        def network_insights_access_scopes: () -> ::Array[Types::NetworkInsightsAccessScope]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_insights_access_scopes-instance_method
      def describe_network_insights_access_scopes: (
                                                     ?network_insights_access_scope_ids: Array[::String],
                                                     ?filters: Array[
                                                       {
                                                         name: ::String?,
                                                         values: Array[::String]?
                                                       },
                                                     ],
                                                     ?max_results: ::Integer,
                                                     ?dry_run: bool,
                                                     ?next_token: ::String
                                                   ) -> _DescribeNetworkInsightsAccessScopesResponseSuccess
                                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInsightsAccessScopesResponseSuccess

      interface _DescribeNetworkInsightsAnalysesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInsightsAnalysesResult]
        def network_insights_analyses: () -> ::Array[Types::NetworkInsightsAnalysis]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_insights_analyses-instance_method
      def describe_network_insights_analyses: (
                                                ?network_insights_analysis_ids: Array[::String],
                                                ?network_insights_path_id: ::String,
                                                ?analysis_start_time: ::Time,
                                                ?analysis_end_time: ::Time,
                                                ?filters: Array[
                                                  {
                                                    name: ::String?,
                                                    values: Array[::String]?
                                                  },
                                                ],
                                                ?max_results: ::Integer,
                                                ?dry_run: bool,
                                                ?next_token: ::String
                                              ) -> _DescribeNetworkInsightsAnalysesResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInsightsAnalysesResponseSuccess

      interface _DescribeNetworkInsightsPathsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInsightsPathsResult]
        def network_insights_paths: () -> ::Array[Types::NetworkInsightsPath]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_insights_paths-instance_method
      def describe_network_insights_paths: (
                                             ?network_insights_path_ids: Array[::String],
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?max_results: ::Integer,
                                             ?dry_run: bool,
                                             ?next_token: ::String
                                           ) -> _DescribeNetworkInsightsPathsResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInsightsPathsResponseSuccess

      interface _DescribeNetworkInterfaceAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInterfaceAttributeResult]
        def attachment: () -> Types::NetworkInterfaceAttachment
        def description: () -> Types::AttributeValue
        def groups: () -> ::Array[Types::GroupIdentifier]
        def network_interface_id: () -> ::String
        def source_dest_check: () -> Types::AttributeBooleanValue
        def associate_public_ip_address: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_interface_attribute-instance_method
      def describe_network_interface_attribute: (
                                                  ?dry_run: bool,
                                                  network_interface_id: ::String,
                                                  ?attribute: ("description" | "groupSet" | "sourceDestCheck" | "attachment" | "associatePublicIpAddress")
                                                ) -> _DescribeNetworkInterfaceAttributeResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInterfaceAttributeResponseSuccess

      interface _DescribeNetworkInterfacePermissionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInterfacePermissionsResult]
        def network_interface_permissions: () -> ::Array[Types::NetworkInterfacePermission]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_interface_permissions-instance_method
      def describe_network_interface_permissions: (
                                                    ?network_interface_permission_ids: Array[::String],
                                                    ?filters: Array[
                                                      {
                                                        name: ::String?,
                                                        values: Array[::String]?
                                                      },
                                                    ],
                                                    ?next_token: ::String,
                                                    ?max_results: ::Integer
                                                  ) -> _DescribeNetworkInterfacePermissionsResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInterfacePermissionsResponseSuccess

      interface _DescribeNetworkInterfacesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeNetworkInterfacesResult]
        def network_interfaces: () -> ::Array[Types::NetworkInterface]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_network_interfaces-instance_method
      def describe_network_interfaces: (
                                         ?next_token: ::String,
                                         ?max_results: ::Integer,
                                         ?dry_run: bool,
                                         ?network_interface_ids: Array[::String],
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ]
                                       ) -> _DescribeNetworkInterfacesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeNetworkInterfacesResponseSuccess

      interface _DescribePlacementGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribePlacementGroupsResult]
        def placement_groups: () -> ::Array[Types::PlacementGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_placement_groups-instance_method
      def describe_placement_groups: (
                                       ?group_ids: Array[::String],
                                       ?dry_run: bool,
                                       ?group_names: Array[::String],
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ]
                                     ) -> _DescribePlacementGroupsResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePlacementGroupsResponseSuccess

      interface _DescribePrefixListsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribePrefixListsResult]
        def next_token: () -> ::String
        def prefix_lists: () -> ::Array[Types::PrefixList]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_prefix_lists-instance_method
      def describe_prefix_lists: (
                                   ?dry_run: bool,
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ],
                                   ?max_results: ::Integer,
                                   ?next_token: ::String,
                                   ?prefix_list_ids: Array[::String]
                                 ) -> _DescribePrefixListsResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePrefixListsResponseSuccess

      interface _DescribePrincipalIdFormatResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribePrincipalIdFormatResult]
        def principals: () -> ::Array[Types::PrincipalIdFormat]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_principal_id_format-instance_method
      def describe_principal_id_format: (
                                          ?dry_run: bool,
                                          ?resources: Array[::String],
                                          ?max_results: ::Integer,
                                          ?next_token: ::String
                                        ) -> _DescribePrincipalIdFormatResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePrincipalIdFormatResponseSuccess

      interface _DescribePublicIpv4PoolsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribePublicIpv4PoolsResult]
        def public_ipv_4_pools: () -> ::Array[Types::PublicIpv4Pool]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_public_ipv_4_pools-instance_method
      def describe_public_ipv_4_pools: (
                                         ?pool_ids: Array[::String],
                                         ?next_token: ::String,
                                         ?max_results: ::Integer,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ]
                                       ) -> _DescribePublicIpv4PoolsResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePublicIpv4PoolsResponseSuccess

      interface _DescribeRegionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRegionsResult]
        def regions: () -> ::Array[Types::Region]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_regions-instance_method
      def describe_regions: (
                              ?region_names: Array[::String],
                              ?all_regions: bool,
                              ?dry_run: bool,
                              ?filters: Array[
                                {
                                  name: ::String?,
                                  values: Array[::String]?
                                },
                              ]
                            ) -> _DescribeRegionsResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRegionsResponseSuccess

      interface _DescribeReplaceRootVolumeTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeReplaceRootVolumeTasksResult]
        def replace_root_volume_tasks: () -> ::Array[Types::ReplaceRootVolumeTask]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_replace_root_volume_tasks-instance_method
      def describe_replace_root_volume_tasks: (
                                                ?replace_root_volume_task_ids: Array[::String],
                                                ?filters: Array[
                                                  {
                                                    name: ::String?,
                                                    values: Array[::String]?
                                                  },
                                                ],
                                                ?max_results: ::Integer,
                                                ?next_token: ::String,
                                                ?dry_run: bool
                                              ) -> _DescribeReplaceRootVolumeTasksResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReplaceRootVolumeTasksResponseSuccess

      interface _DescribeReservedInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeReservedInstancesResult]
        def reserved_instances: () -> ::Array[Types::ReservedInstances]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_reserved_instances-instance_method
      def describe_reserved_instances: (
                                         ?offering_class: ("standard" | "convertible"),
                                         ?reserved_instances_ids: Array[::String],
                                         ?dry_run: bool,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?offering_type: ("Heavy Utilization" | "Medium Utilization" | "Light Utilization" | "No Upfront" | "Partial Upfront" | "All Upfront")
                                       ) -> _DescribeReservedInstancesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservedInstancesResponseSuccess

      interface _DescribeReservedInstancesListingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeReservedInstancesListingsResult]
        def reserved_instances_listings: () -> ::Array[Types::ReservedInstancesListing]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_reserved_instances_listings-instance_method
      def describe_reserved_instances_listings: (
                                                  ?reserved_instances_id: ::String,
                                                  ?reserved_instances_listing_id: ::String,
                                                  ?filters: Array[
                                                    {
                                                      name: ::String?,
                                                      values: Array[::String]?
                                                    },
                                                  ]
                                                ) -> _DescribeReservedInstancesListingsResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservedInstancesListingsResponseSuccess

      interface _DescribeReservedInstancesModificationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeReservedInstancesModificationsResult]
        def next_token: () -> ::String
        def reserved_instances_modifications: () -> ::Array[Types::ReservedInstancesModification]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_reserved_instances_modifications-instance_method
      def describe_reserved_instances_modifications: (
                                                       ?reserved_instances_modification_ids: Array[::String],
                                                       ?next_token: ::String,
                                                       ?filters: Array[
                                                         {
                                                           name: ::String?,
                                                           values: Array[::String]?
                                                         },
                                                       ]
                                                     ) -> _DescribeReservedInstancesModificationsResponseSuccess
                                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservedInstancesModificationsResponseSuccess

      interface _DescribeReservedInstancesOfferingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeReservedInstancesOfferingsResult]
        def next_token: () -> ::String
        def reserved_instances_offerings: () -> ::Array[Types::ReservedInstancesOffering]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_reserved_instances_offerings-instance_method
      def describe_reserved_instances_offerings: (
                                                   ?availability_zone: ::String,
                                                   ?include_marketplace: bool,
                                                   ?instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge"),
                                                   ?max_duration: ::Integer,
                                                   ?max_instance_count: ::Integer,
                                                   ?min_duration: ::Integer,
                                                   ?offering_class: ("standard" | "convertible"),
                                                   ?product_description: ("Linux/UNIX" | "Linux/UNIX (Amazon VPC)" | "Windows" | "Windows (Amazon VPC)"),
                                                   ?reserved_instances_offering_ids: Array[::String],
                                                   ?dry_run: bool,
                                                   ?filters: Array[
                                                     {
                                                       name: ::String?,
                                                       values: Array[::String]?
                                                     },
                                                   ],
                                                   ?instance_tenancy: ("default" | "dedicated" | "host"),
                                                   ?offering_type: ("Heavy Utilization" | "Medium Utilization" | "Light Utilization" | "No Upfront" | "Partial Upfront" | "All Upfront"),
                                                   ?next_token: ::String,
                                                   ?max_results: ::Integer
                                                 ) -> _DescribeReservedInstancesOfferingsResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeReservedInstancesOfferingsResponseSuccess

      interface _DescribeRouteTablesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRouteTablesResult]
        def route_tables: () -> ::Array[Types::RouteTable]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_route_tables-instance_method
      def describe_route_tables: (
                                   ?next_token: ::String,
                                   ?max_results: ::Integer,
                                   ?dry_run: bool,
                                   ?route_table_ids: Array[::String],
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ]
                                 ) -> _DescribeRouteTablesResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRouteTablesResponseSuccess

      interface _DescribeScheduledInstanceAvailabilityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeScheduledInstanceAvailabilityResult]
        def next_token: () -> ::String
        def scheduled_instance_availability_set: () -> ::Array[Types::ScheduledInstanceAvailability]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_scheduled_instance_availability-instance_method
      def describe_scheduled_instance_availability: (
                                                      ?dry_run: bool,
                                                      ?filters: Array[
                                                        {
                                                          name: ::String?,
                                                          values: Array[::String]?
                                                        },
                                                      ],
                                                      first_slot_start_time_range: {
                                                        earliest_time: ::Time,
                                                        latest_time: ::Time
                                                      },
                                                      ?max_results: ::Integer,
                                                      ?max_slot_duration_in_hours: ::Integer,
                                                      ?min_slot_duration_in_hours: ::Integer,
                                                      ?next_token: ::String,
                                                      recurrence: {
                                                        frequency: ::String?,
                                                        interval: ::Integer?,
                                                        occurrence_days: Array[::Integer]?,
                                                        occurrence_relative_to_end: bool?,
                                                        occurrence_unit: ::String?
                                                      }
                                                    ) -> _DescribeScheduledInstanceAvailabilityResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeScheduledInstanceAvailabilityResponseSuccess

      interface _DescribeScheduledInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeScheduledInstancesResult]
        def next_token: () -> ::String
        def scheduled_instance_set: () -> ::Array[Types::ScheduledInstance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_scheduled_instances-instance_method
      def describe_scheduled_instances: (
                                          ?dry_run: bool,
                                          ?filters: Array[
                                            {
                                              name: ::String?,
                                              values: Array[::String]?
                                            },
                                          ],
                                          ?max_results: ::Integer,
                                          ?next_token: ::String,
                                          ?scheduled_instance_ids: Array[::String],
                                          ?slot_start_time_range: {
                                            earliest_time: ::Time?,
                                            latest_time: ::Time?
                                          }
                                        ) -> _DescribeScheduledInstancesResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeScheduledInstancesResponseSuccess

      interface _DescribeSecurityGroupReferencesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSecurityGroupReferencesResult]
        def security_group_reference_set: () -> ::Array[Types::SecurityGroupReference]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_security_group_references-instance_method
      def describe_security_group_references: (
                                                ?dry_run: bool,
                                                group_id: Array[::String]
                                              ) -> _DescribeSecurityGroupReferencesResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSecurityGroupReferencesResponseSuccess

      interface _DescribeSecurityGroupRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSecurityGroupRulesResult]
        def security_group_rules: () -> ::Array[Types::SecurityGroupRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_security_group_rules-instance_method
      def describe_security_group_rules: (
                                           ?filters: Array[
                                             {
                                               name: ::String?,
                                               values: Array[::String]?
                                             },
                                           ],
                                           ?security_group_rule_ids: Array[::String],
                                           ?dry_run: bool,
                                           ?next_token: ::String,
                                           ?max_results: ::Integer
                                         ) -> _DescribeSecurityGroupRulesResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSecurityGroupRulesResponseSuccess

      interface _DescribeSecurityGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSecurityGroupsResult]
        def next_token: () -> ::String
        def security_groups: () -> ::Array[Types::SecurityGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_security_groups-instance_method
      def describe_security_groups: (
                                      ?group_ids: Array[::String],
                                      ?group_names: Array[::String],
                                      ?next_token: ::String,
                                      ?max_results: ::Integer,
                                      ?dry_run: bool,
                                      ?filters: Array[
                                        {
                                          name: ::String?,
                                          values: Array[::String]?
                                        },
                                      ]
                                    ) -> _DescribeSecurityGroupsResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSecurityGroupsResponseSuccess

      interface _DescribeSnapshotAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSnapshotAttributeResult]
        def product_codes: () -> ::Array[Types::ProductCode]
        def snapshot_id: () -> ::String
        def create_volume_permissions: () -> ::Array[Types::CreateVolumePermission]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_snapshot_attribute-instance_method
      def describe_snapshot_attribute: (
                                         attribute: ("productCodes" | "createVolumePermission"),
                                         snapshot_id: ::String,
                                         ?dry_run: bool
                                       ) -> _DescribeSnapshotAttributeResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSnapshotAttributeResponseSuccess

      interface _DescribeSnapshotTierStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSnapshotTierStatusResult]
        def snapshot_tier_statuses: () -> ::Array[Types::SnapshotTierStatus]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_snapshot_tier_status-instance_method
      def describe_snapshot_tier_status: (
                                           ?filters: Array[
                                             {
                                               name: ::String?,
                                               values: Array[::String]?
                                             },
                                           ],
                                           ?dry_run: bool,
                                           ?next_token: ::String,
                                           ?max_results: ::Integer
                                         ) -> _DescribeSnapshotTierStatusResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSnapshotTierStatusResponseSuccess

      interface _DescribeSnapshotsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSnapshotsResult]
        def next_token: () -> ::String
        def snapshots: () -> ::Array[Types::Snapshot]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_snapshots-instance_method
      def describe_snapshots: (
                                ?max_results: ::Integer,
                                ?next_token: ::String,
                                ?owner_ids: Array[::String],
                                ?restorable_by_user_ids: Array[::String],
                                ?snapshot_ids: Array[::String],
                                ?dry_run: bool,
                                ?filters: Array[
                                  {
                                    name: ::String?,
                                    values: Array[::String]?
                                  },
                                ]
                              ) -> _DescribeSnapshotsResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSnapshotsResponseSuccess

      interface _DescribeSpotDatafeedSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSpotDatafeedSubscriptionResult]
        def spot_datafeed_subscription: () -> Types::SpotDatafeedSubscription
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_spot_datafeed_subscription-instance_method
      def describe_spot_datafeed_subscription: (
                                                 ?dry_run: bool
                                               ) -> _DescribeSpotDatafeedSubscriptionResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSpotDatafeedSubscriptionResponseSuccess

      interface _DescribeSpotFleetInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSpotFleetInstancesResponse]
        def active_instances: () -> ::Array[Types::ActiveInstance]
        def next_token: () -> ::String
        def spot_fleet_request_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_spot_fleet_instances-instance_method
      def describe_spot_fleet_instances: (
                                           ?dry_run: bool,
                                           spot_fleet_request_id: ::String,
                                           ?next_token: ::String,
                                           ?max_results: ::Integer
                                         ) -> _DescribeSpotFleetInstancesResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSpotFleetInstancesResponseSuccess

      interface _DescribeSpotFleetRequestHistoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSpotFleetRequestHistoryResponse]
        def history_records: () -> ::Array[Types::HistoryRecord]
        def last_evaluated_time: () -> ::Time
        def next_token: () -> ::String
        def spot_fleet_request_id: () -> ::String
        def start_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_spot_fleet_request_history-instance_method
      def describe_spot_fleet_request_history: (
                                                 ?dry_run: bool,
                                                 spot_fleet_request_id: ::String,
                                                 ?event_type: ("instanceChange" | "fleetRequestChange" | "error" | "information"),
                                                 start_time: ::Time,
                                                 ?next_token: ::String,
                                                 ?max_results: ::Integer
                                               ) -> _DescribeSpotFleetRequestHistoryResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSpotFleetRequestHistoryResponseSuccess

      interface _DescribeSpotFleetRequestsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSpotFleetRequestsResponse]
        def next_token: () -> ::String
        def spot_fleet_request_configs: () -> ::Array[Types::SpotFleetRequestConfig]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_spot_fleet_requests-instance_method
      def describe_spot_fleet_requests: (
                                          ?dry_run: bool,
                                          ?spot_fleet_request_ids: Array[::String],
                                          ?next_token: ::String,
                                          ?max_results: ::Integer
                                        ) -> _DescribeSpotFleetRequestsResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSpotFleetRequestsResponseSuccess

      interface _DescribeSpotInstanceRequestsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSpotInstanceRequestsResult]
        def spot_instance_requests: () -> ::Array[Types::SpotInstanceRequest]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_spot_instance_requests-instance_method
      def describe_spot_instance_requests: (
                                             ?next_token: ::String,
                                             ?max_results: ::Integer,
                                             ?dry_run: bool,
                                             ?spot_instance_request_ids: Array[::String],
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ]
                                           ) -> _DescribeSpotInstanceRequestsResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSpotInstanceRequestsResponseSuccess

      interface _DescribeSpotPriceHistoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSpotPriceHistoryResult]
        def next_token: () -> ::String
        def spot_price_history: () -> ::Array[Types::SpotPrice]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_spot_price_history-instance_method
      def describe_spot_price_history: (
                                         ?dry_run: bool,
                                         ?start_time: ::Time,
                                         ?end_time: ::Time,
                                         ?instance_types: Array[("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")],
                                         ?product_descriptions: Array[::String],
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?availability_zone: ::String,
                                         ?max_results: ::Integer,
                                         ?next_token: ::String
                                       ) -> _DescribeSpotPriceHistoryResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSpotPriceHistoryResponseSuccess

      interface _DescribeStaleSecurityGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeStaleSecurityGroupsResult]
        def next_token: () -> ::String
        def stale_security_group_set: () -> ::Array[Types::StaleSecurityGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_stale_security_groups-instance_method
      def describe_stale_security_groups: (
                                            ?dry_run: bool,
                                            ?max_results: ::Integer,
                                            ?next_token: ::String,
                                            vpc_id: ::String
                                          ) -> _DescribeStaleSecurityGroupsResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeStaleSecurityGroupsResponseSuccess

      interface _DescribeStoreImageTasksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeStoreImageTasksResult]
        def store_image_task_results: () -> ::Array[Types::StoreImageTaskResult]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_store_image_tasks-instance_method
      def describe_store_image_tasks: (
                                        ?image_ids: Array[::String],
                                        ?dry_run: bool,
                                        ?filters: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ],
                                        ?next_token: ::String,
                                        ?max_results: ::Integer
                                      ) -> _DescribeStoreImageTasksResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeStoreImageTasksResponseSuccess

      interface _DescribeSubnetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSubnetsResult]
        def next_token: () -> ::String
        def subnets: () -> ::Array[Types::Subnet]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_subnets-instance_method
      def describe_subnets: (
                              ?filters: Array[
                                {
                                  name: ::String?,
                                  values: Array[::String]?
                                },
                              ],
                              ?subnet_ids: Array[::String],
                              ?next_token: ::String,
                              ?max_results: ::Integer,
                              ?dry_run: bool
                            ) -> _DescribeSubnetsResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSubnetsResponseSuccess

      interface _DescribeTagsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTagsResult]
        def next_token: () -> ::String
        def tags: () -> ::Array[Types::TagDescription]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_tags-instance_method
      def describe_tags: (
                           ?dry_run: bool,
                           ?filters: Array[
                             {
                               name: ::String?,
                               values: Array[::String]?
                             },
                           ],
                           ?max_results: ::Integer,
                           ?next_token: ::String
                         ) -> _DescribeTagsResponseSuccess
                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTagsResponseSuccess

      interface _DescribeTrafficMirrorFilterRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTrafficMirrorFilterRulesResult]
        def traffic_mirror_filter_rules: () -> ::Array[Types::TrafficMirrorFilterRule]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_traffic_mirror_filter_rules-instance_method
      def describe_traffic_mirror_filter_rules: (
                                                  ?traffic_mirror_filter_rule_ids: Array[::String],
                                                  ?traffic_mirror_filter_id: ::String,
                                                  ?dry_run: bool,
                                                  ?filters: Array[
                                                    {
                                                      name: ::String?,
                                                      values: Array[::String]?
                                                    },
                                                  ],
                                                  ?max_results: ::Integer,
                                                  ?next_token: ::String
                                                ) -> _DescribeTrafficMirrorFilterRulesResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTrafficMirrorFilterRulesResponseSuccess

      interface _DescribeTrafficMirrorFiltersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTrafficMirrorFiltersResult]
        def traffic_mirror_filters: () -> ::Array[Types::TrafficMirrorFilter]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_traffic_mirror_filters-instance_method
      def describe_traffic_mirror_filters: (
                                             ?traffic_mirror_filter_ids: Array[::String],
                                             ?dry_run: bool,
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?max_results: ::Integer,
                                             ?next_token: ::String
                                           ) -> _DescribeTrafficMirrorFiltersResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTrafficMirrorFiltersResponseSuccess

      interface _DescribeTrafficMirrorSessionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTrafficMirrorSessionsResult]
        def traffic_mirror_sessions: () -> ::Array[Types::TrafficMirrorSession]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_traffic_mirror_sessions-instance_method
      def describe_traffic_mirror_sessions: (
                                              ?traffic_mirror_session_ids: Array[::String],
                                              ?dry_run: bool,
                                              ?filters: Array[
                                                {
                                                  name: ::String?,
                                                  values: Array[::String]?
                                                },
                                              ],
                                              ?max_results: ::Integer,
                                              ?next_token: ::String
                                            ) -> _DescribeTrafficMirrorSessionsResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTrafficMirrorSessionsResponseSuccess

      interface _DescribeTrafficMirrorTargetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTrafficMirrorTargetsResult]
        def traffic_mirror_targets: () -> ::Array[Types::TrafficMirrorTarget]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_traffic_mirror_targets-instance_method
      def describe_traffic_mirror_targets: (
                                             ?traffic_mirror_target_ids: Array[::String],
                                             ?dry_run: bool,
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?max_results: ::Integer,
                                             ?next_token: ::String
                                           ) -> _DescribeTrafficMirrorTargetsResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTrafficMirrorTargetsResponseSuccess

      interface _DescribeTransitGatewayAttachmentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayAttachmentsResult]
        def transit_gateway_attachments: () -> ::Array[Types::TransitGatewayAttachment]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_attachments-instance_method
      def describe_transit_gateway_attachments: (
                                                  ?transit_gateway_attachment_ids: Array[::String],
                                                  ?filters: Array[
                                                    {
                                                      name: ::String?,
                                                      values: Array[::String]?
                                                    },
                                                  ],
                                                  ?max_results: ::Integer,
                                                  ?next_token: ::String,
                                                  ?dry_run: bool
                                                ) -> _DescribeTransitGatewayAttachmentsResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayAttachmentsResponseSuccess

      interface _DescribeTransitGatewayConnectPeersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayConnectPeersResult]
        def transit_gateway_connect_peers: () -> ::Array[Types::TransitGatewayConnectPeer]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_connect_peers-instance_method
      def describe_transit_gateway_connect_peers: (
                                                    ?transit_gateway_connect_peer_ids: Array[::String],
                                                    ?filters: Array[
                                                      {
                                                        name: ::String?,
                                                        values: Array[::String]?
                                                      },
                                                    ],
                                                    ?max_results: ::Integer,
                                                    ?next_token: ::String,
                                                    ?dry_run: bool
                                                  ) -> _DescribeTransitGatewayConnectPeersResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayConnectPeersResponseSuccess

      interface _DescribeTransitGatewayConnectsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayConnectsResult]
        def transit_gateway_connects: () -> ::Array[Types::TransitGatewayConnect]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_connects-instance_method
      def describe_transit_gateway_connects: (
                                               ?transit_gateway_attachment_ids: Array[::String],
                                               ?filters: Array[
                                                 {
                                                   name: ::String?,
                                                   values: Array[::String]?
                                                 },
                                               ],
                                               ?max_results: ::Integer,
                                               ?next_token: ::String,
                                               ?dry_run: bool
                                             ) -> _DescribeTransitGatewayConnectsResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayConnectsResponseSuccess

      interface _DescribeTransitGatewayMulticastDomainsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayMulticastDomainsResult]
        def transit_gateway_multicast_domains: () -> ::Array[Types::TransitGatewayMulticastDomain]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_multicast_domains-instance_method
      def describe_transit_gateway_multicast_domains: (
                                                        ?transit_gateway_multicast_domain_ids: Array[::String],
                                                        ?filters: Array[
                                                          {
                                                            name: ::String?,
                                                            values: Array[::String]?
                                                          },
                                                        ],
                                                        ?max_results: ::Integer,
                                                        ?next_token: ::String,
                                                        ?dry_run: bool
                                                      ) -> _DescribeTransitGatewayMulticastDomainsResponseSuccess
                                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayMulticastDomainsResponseSuccess

      interface _DescribeTransitGatewayPeeringAttachmentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayPeeringAttachmentsResult]
        def transit_gateway_peering_attachments: () -> ::Array[Types::TransitGatewayPeeringAttachment]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_peering_attachments-instance_method
      def describe_transit_gateway_peering_attachments: (
                                                          ?transit_gateway_attachment_ids: Array[::String],
                                                          ?filters: Array[
                                                            {
                                                              name: ::String?,
                                                              values: Array[::String]?
                                                            },
                                                          ],
                                                          ?max_results: ::Integer,
                                                          ?next_token: ::String,
                                                          ?dry_run: bool
                                                        ) -> _DescribeTransitGatewayPeeringAttachmentsResponseSuccess
                                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayPeeringAttachmentsResponseSuccess

      interface _DescribeTransitGatewayPolicyTablesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayPolicyTablesResult]
        def transit_gateway_policy_tables: () -> ::Array[Types::TransitGatewayPolicyTable]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_policy_tables-instance_method
      def describe_transit_gateway_policy_tables: (
                                                    ?transit_gateway_policy_table_ids: Array[::String],
                                                    ?filters: Array[
                                                      {
                                                        name: ::String?,
                                                        values: Array[::String]?
                                                      },
                                                    ],
                                                    ?max_results: ::Integer,
                                                    ?next_token: ::String,
                                                    ?dry_run: bool
                                                  ) -> _DescribeTransitGatewayPolicyTablesResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayPolicyTablesResponseSuccess

      interface _DescribeTransitGatewayRouteTableAnnouncementsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayRouteTableAnnouncementsResult]
        def transit_gateway_route_table_announcements: () -> ::Array[Types::TransitGatewayRouteTableAnnouncement]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_route_table_announcements-instance_method
      def describe_transit_gateway_route_table_announcements: (
                                                                ?transit_gateway_route_table_announcement_ids: Array[::String],
                                                                ?filters: Array[
                                                                  {
                                                                    name: ::String?,
                                                                    values: Array[::String]?
                                                                  },
                                                                ],
                                                                ?max_results: ::Integer,
                                                                ?next_token: ::String,
                                                                ?dry_run: bool
                                                              ) -> _DescribeTransitGatewayRouteTableAnnouncementsResponseSuccess
                                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayRouteTableAnnouncementsResponseSuccess

      interface _DescribeTransitGatewayRouteTablesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayRouteTablesResult]
        def transit_gateway_route_tables: () -> ::Array[Types::TransitGatewayRouteTable]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_route_tables-instance_method
      def describe_transit_gateway_route_tables: (
                                                   ?transit_gateway_route_table_ids: Array[::String],
                                                   ?filters: Array[
                                                     {
                                                       name: ::String?,
                                                       values: Array[::String]?
                                                     },
                                                   ],
                                                   ?max_results: ::Integer,
                                                   ?next_token: ::String,
                                                   ?dry_run: bool
                                                 ) -> _DescribeTransitGatewayRouteTablesResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayRouteTablesResponseSuccess

      interface _DescribeTransitGatewayVpcAttachmentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewayVpcAttachmentsResult]
        def transit_gateway_vpc_attachments: () -> ::Array[Types::TransitGatewayVpcAttachment]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateway_vpc_attachments-instance_method
      def describe_transit_gateway_vpc_attachments: (
                                                      ?transit_gateway_attachment_ids: Array[::String],
                                                      ?filters: Array[
                                                        {
                                                          name: ::String?,
                                                          values: Array[::String]?
                                                        },
                                                      ],
                                                      ?max_results: ::Integer,
                                                      ?next_token: ::String,
                                                      ?dry_run: bool
                                                    ) -> _DescribeTransitGatewayVpcAttachmentsResponseSuccess
                                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewayVpcAttachmentsResponseSuccess

      interface _DescribeTransitGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTransitGatewaysResult]
        def transit_gateways: () -> ::Array[Types::TransitGateway]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_transit_gateways-instance_method
      def describe_transit_gateways: (
                                       ?transit_gateway_ids: Array[::String],
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ],
                                       ?max_results: ::Integer,
                                       ?next_token: ::String,
                                       ?dry_run: bool
                                     ) -> _DescribeTransitGatewaysResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTransitGatewaysResponseSuccess

      interface _DescribeTrunkInterfaceAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTrunkInterfaceAssociationsResult]
        def interface_associations: () -> ::Array[Types::TrunkInterfaceAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_trunk_interface_associations-instance_method
      def describe_trunk_interface_associations: (
                                                   ?association_ids: Array[::String],
                                                   ?dry_run: bool,
                                                   ?filters: Array[
                                                     {
                                                       name: ::String?,
                                                       values: Array[::String]?
                                                     },
                                                   ],
                                                   ?next_token: ::String,
                                                   ?max_results: ::Integer
                                                 ) -> _DescribeTrunkInterfaceAssociationsResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTrunkInterfaceAssociationsResponseSuccess

      interface _DescribeVerifiedAccessEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVerifiedAccessEndpointsResult]
        def verified_access_endpoints: () -> ::Array[Types::VerifiedAccessEndpoint]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_verified_access_endpoints-instance_method
      def describe_verified_access_endpoints: (
                                                ?verified_access_endpoint_ids: Array[::String],
                                                ?verified_access_instance_id: ::String,
                                                ?verified_access_group_id: ::String,
                                                ?max_results: ::Integer,
                                                ?next_token: ::String,
                                                ?filters: Array[
                                                  {
                                                    name: ::String?,
                                                    values: Array[::String]?
                                                  },
                                                ],
                                                ?dry_run: bool
                                              ) -> _DescribeVerifiedAccessEndpointsResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVerifiedAccessEndpointsResponseSuccess

      interface _DescribeVerifiedAccessGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVerifiedAccessGroupsResult]
        def verified_access_groups: () -> ::Array[Types::VerifiedAccessGroup]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_verified_access_groups-instance_method
      def describe_verified_access_groups: (
                                             ?verified_access_group_ids: Array[::String],
                                             ?verified_access_instance_id: ::String,
                                             ?max_results: ::Integer,
                                             ?next_token: ::String,
                                             ?filters: Array[
                                               {
                                                 name: ::String?,
                                                 values: Array[::String]?
                                               },
                                             ],
                                             ?dry_run: bool
                                           ) -> _DescribeVerifiedAccessGroupsResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVerifiedAccessGroupsResponseSuccess

      interface _DescribeVerifiedAccessInstanceLoggingConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVerifiedAccessInstanceLoggingConfigurationsResult]
        def logging_configurations: () -> ::Array[Types::VerifiedAccessInstanceLoggingConfiguration]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_verified_access_instance_logging_configurations-instance_method
      def describe_verified_access_instance_logging_configurations: (
                                                                      ?verified_access_instance_ids: Array[::String],
                                                                      ?max_results: ::Integer,
                                                                      ?next_token: ::String,
                                                                      ?filters: Array[
                                                                        {
                                                                          name: ::String?,
                                                                          values: Array[::String]?
                                                                        },
                                                                      ],
                                                                      ?dry_run: bool
                                                                    ) -> _DescribeVerifiedAccessInstanceLoggingConfigurationsResponseSuccess
                                                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVerifiedAccessInstanceLoggingConfigurationsResponseSuccess

      interface _DescribeVerifiedAccessInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVerifiedAccessInstancesResult]
        def verified_access_instances: () -> ::Array[Types::VerifiedAccessInstance]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_verified_access_instances-instance_method
      def describe_verified_access_instances: (
                                                ?verified_access_instance_ids: Array[::String],
                                                ?max_results: ::Integer,
                                                ?next_token: ::String,
                                                ?filters: Array[
                                                  {
                                                    name: ::String?,
                                                    values: Array[::String]?
                                                  },
                                                ],
                                                ?dry_run: bool
                                              ) -> _DescribeVerifiedAccessInstancesResponseSuccess
                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVerifiedAccessInstancesResponseSuccess

      interface _DescribeVerifiedAccessTrustProvidersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVerifiedAccessTrustProvidersResult]
        def verified_access_trust_providers: () -> ::Array[Types::VerifiedAccessTrustProvider]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_verified_access_trust_providers-instance_method
      def describe_verified_access_trust_providers: (
                                                      ?verified_access_trust_provider_ids: Array[::String],
                                                      ?max_results: ::Integer,
                                                      ?next_token: ::String,
                                                      ?filters: Array[
                                                        {
                                                          name: ::String?,
                                                          values: Array[::String]?
                                                        },
                                                      ],
                                                      ?dry_run: bool
                                                    ) -> _DescribeVerifiedAccessTrustProvidersResponseSuccess
                                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVerifiedAccessTrustProvidersResponseSuccess

      interface _DescribeVolumeAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVolumeAttributeResult]
        def auto_enable_io: () -> Types::AttributeBooleanValue
        def product_codes: () -> ::Array[Types::ProductCode]
        def volume_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_volume_attribute-instance_method
      def describe_volume_attribute: (
                                       attribute: ("autoEnableIO" | "productCodes"),
                                       volume_id: ::String,
                                       ?dry_run: bool
                                     ) -> _DescribeVolumeAttributeResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVolumeAttributeResponseSuccess

      interface _DescribeVolumeStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVolumeStatusResult]
        def next_token: () -> ::String
        def volume_statuses: () -> ::Array[Types::VolumeStatusItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_volume_status-instance_method
      def describe_volume_status: (
                                    ?max_results: ::Integer,
                                    ?next_token: ::String,
                                    ?volume_ids: Array[::String],
                                    ?dry_run: bool,
                                    ?filters: Array[
                                      {
                                        name: ::String?,
                                        values: Array[::String]?
                                      },
                                    ]
                                  ) -> _DescribeVolumeStatusResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVolumeStatusResponseSuccess

      interface _DescribeVolumesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVolumesResult]
        def next_token: () -> ::String
        def volumes: () -> ::Array[Types::Volume]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_volumes-instance_method
      def describe_volumes: (
                              ?volume_ids: Array[::String],
                              ?dry_run: bool,
                              ?filters: Array[
                                {
                                  name: ::String?,
                                  values: Array[::String]?
                                },
                              ],
                              ?next_token: ::String,
                              ?max_results: ::Integer
                            ) -> _DescribeVolumesResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVolumesResponseSuccess

      interface _DescribeVolumesModificationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVolumesModificationsResult]
        def next_token: () -> ::String
        def volumes_modifications: () -> ::Array[Types::VolumeModification]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_volumes_modifications-instance_method
      def describe_volumes_modifications: (
                                            ?dry_run: bool,
                                            ?volume_ids: Array[::String],
                                            ?filters: Array[
                                              {
                                                name: ::String?,
                                                values: Array[::String]?
                                              },
                                            ],
                                            ?next_token: ::String,
                                            ?max_results: ::Integer
                                          ) -> _DescribeVolumesModificationsResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVolumesModificationsResponseSuccess

      interface _DescribeVpcAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcAttributeResult]
        def enable_dns_hostnames: () -> Types::AttributeBooleanValue
        def enable_dns_support: () -> Types::AttributeBooleanValue
        def enable_network_address_usage_metrics: () -> Types::AttributeBooleanValue
        def vpc_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_attribute-instance_method
      def describe_vpc_attribute: (
                                    attribute: ("enableDnsSupport" | "enableDnsHostnames" | "enableNetworkAddressUsageMetrics"),
                                    vpc_id: ::String,
                                    ?dry_run: bool
                                  ) -> _DescribeVpcAttributeResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcAttributeResponseSuccess

      interface _DescribeVpcClassicLinkResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcClassicLinkResult]
        def vpcs: () -> ::Array[Types::VpcClassicLink]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_classic_link-instance_method
      def describe_vpc_classic_link: (
                                       ?dry_run: bool,
                                       ?vpc_ids: Array[::String],
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ]
                                     ) -> _DescribeVpcClassicLinkResponseSuccess
                                   | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcClassicLinkResponseSuccess

      interface _DescribeVpcClassicLinkDnsSupportResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcClassicLinkDnsSupportResult]
        def next_token: () -> ::String
        def vpcs: () -> ::Array[Types::ClassicLinkDnsSupport]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_classic_link_dns_support-instance_method
      def describe_vpc_classic_link_dns_support: (
                                                   ?vpc_ids: Array[::String],
                                                   ?max_results: ::Integer,
                                                   ?next_token: ::String
                                                 ) -> _DescribeVpcClassicLinkDnsSupportResponseSuccess
                                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcClassicLinkDnsSupportResponseSuccess

      interface _DescribeVpcEndpointConnectionNotificationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcEndpointConnectionNotificationsResult]
        def connection_notification_set: () -> ::Array[Types::ConnectionNotification]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_endpoint_connection_notifications-instance_method
      def describe_vpc_endpoint_connection_notifications: (
                                                            ?dry_run: bool,
                                                            ?connection_notification_id: ::String,
                                                            ?filters: Array[
                                                              {
                                                                name: ::String?,
                                                                values: Array[::String]?
                                                              },
                                                            ],
                                                            ?max_results: ::Integer,
                                                            ?next_token: ::String
                                                          ) -> _DescribeVpcEndpointConnectionNotificationsResponseSuccess
                                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcEndpointConnectionNotificationsResponseSuccess

      interface _DescribeVpcEndpointConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcEndpointConnectionsResult]
        def vpc_endpoint_connections: () -> ::Array[Types::VpcEndpointConnection]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_endpoint_connections-instance_method
      def describe_vpc_endpoint_connections: (
                                               ?dry_run: bool,
                                               ?filters: Array[
                                                 {
                                                   name: ::String?,
                                                   values: Array[::String]?
                                                 },
                                               ],
                                               ?max_results: ::Integer,
                                               ?next_token: ::String
                                             ) -> _DescribeVpcEndpointConnectionsResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcEndpointConnectionsResponseSuccess

      interface _DescribeVpcEndpointServiceConfigurationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcEndpointServiceConfigurationsResult]
        def service_configurations: () -> ::Array[Types::ServiceConfiguration]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_endpoint_service_configurations-instance_method
      def describe_vpc_endpoint_service_configurations: (
                                                          ?dry_run: bool,
                                                          ?service_ids: Array[::String],
                                                          ?filters: Array[
                                                            {
                                                              name: ::String?,
                                                              values: Array[::String]?
                                                            },
                                                          ],
                                                          ?max_results: ::Integer,
                                                          ?next_token: ::String
                                                        ) -> _DescribeVpcEndpointServiceConfigurationsResponseSuccess
                                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcEndpointServiceConfigurationsResponseSuccess

      interface _DescribeVpcEndpointServicePermissionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcEndpointServicePermissionsResult]
        def allowed_principals: () -> ::Array[Types::AllowedPrincipal]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_endpoint_service_permissions-instance_method
      def describe_vpc_endpoint_service_permissions: (
                                                       ?dry_run: bool,
                                                       service_id: ::String,
                                                       ?filters: Array[
                                                         {
                                                           name: ::String?,
                                                           values: Array[::String]?
                                                         },
                                                       ],
                                                       ?max_results: ::Integer,
                                                       ?next_token: ::String
                                                     ) -> _DescribeVpcEndpointServicePermissionsResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcEndpointServicePermissionsResponseSuccess

      interface _DescribeVpcEndpointServicesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcEndpointServicesResult]
        def service_names: () -> ::Array[::String]
        def service_details: () -> ::Array[Types::ServiceDetail]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_endpoint_services-instance_method
      def describe_vpc_endpoint_services: (
                                            ?dry_run: bool,
                                            ?service_names: Array[::String],
                                            ?filters: Array[
                                              {
                                                name: ::String?,
                                                values: Array[::String]?
                                              },
                                            ],
                                            ?max_results: ::Integer,
                                            ?next_token: ::String
                                          ) -> _DescribeVpcEndpointServicesResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcEndpointServicesResponseSuccess

      interface _DescribeVpcEndpointsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcEndpointsResult]
        def vpc_endpoints: () -> ::Array[Types::VpcEndpoint]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_endpoints-instance_method
      def describe_vpc_endpoints: (
                                    ?dry_run: bool,
                                    ?vpc_endpoint_ids: Array[::String],
                                    ?filters: Array[
                                      {
                                        name: ::String?,
                                        values: Array[::String]?
                                      },
                                    ],
                                    ?max_results: ::Integer,
                                    ?next_token: ::String
                                  ) -> _DescribeVpcEndpointsResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcEndpointsResponseSuccess

      interface _DescribeVpcPeeringConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcPeeringConnectionsResult]
        def vpc_peering_connections: () -> ::Array[Types::VpcPeeringConnection]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpc_peering_connections-instance_method
      def describe_vpc_peering_connections: (
                                              ?next_token: ::String,
                                              ?max_results: ::Integer,
                                              ?dry_run: bool,
                                              ?vpc_peering_connection_ids: Array[::String],
                                              ?filters: Array[
                                                {
                                                  name: ::String?,
                                                  values: Array[::String]?
                                                },
                                              ]
                                            ) -> _DescribeVpcPeeringConnectionsResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcPeeringConnectionsResponseSuccess

      interface _DescribeVpcsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpcsResult]
        def next_token: () -> ::String
        def vpcs: () -> ::Array[Types::Vpc]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpcs-instance_method
      def describe_vpcs: (
                           ?filters: Array[
                             {
                               name: ::String?,
                               values: Array[::String]?
                             },
                           ],
                           ?vpc_ids: Array[::String],
                           ?next_token: ::String,
                           ?max_results: ::Integer,
                           ?dry_run: bool
                         ) -> _DescribeVpcsResponseSuccess
                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpcsResponseSuccess

      interface _DescribeVpnConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpnConnectionsResult]
        def vpn_connections: () -> ::Array[Types::VpnConnection]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpn_connections-instance_method
      def describe_vpn_connections: (
                                      ?filters: Array[
                                        {
                                          name: ::String?,
                                          values: Array[::String]?
                                        },
                                      ],
                                      ?vpn_connection_ids: Array[::String],
                                      ?dry_run: bool
                                    ) -> _DescribeVpnConnectionsResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpnConnectionsResponseSuccess

      interface _DescribeVpnGatewaysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVpnGatewaysResult]
        def vpn_gateways: () -> ::Array[Types::VpnGateway]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#describe_vpn_gateways-instance_method
      def describe_vpn_gateways: (
                                   ?filters: Array[
                                     {
                                       name: ::String?,
                                       values: Array[::String]?
                                     },
                                   ],
                                   ?vpn_gateway_ids: Array[::String],
                                   ?dry_run: bool
                                 ) -> _DescribeVpnGatewaysResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVpnGatewaysResponseSuccess

      interface _DetachClassicLinkVpcResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DetachClassicLinkVpcResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#detach_classic_link_vpc-instance_method
      def detach_classic_link_vpc: (
                                     ?dry_run: bool,
                                     instance_id: ::String,
                                     vpc_id: ::String
                                   ) -> _DetachClassicLinkVpcResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DetachClassicLinkVpcResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#detach_internet_gateway-instance_method
      def detach_internet_gateway: (
                                     ?dry_run: bool,
                                     internet_gateway_id: ::String,
                                     vpc_id: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#detach_network_interface-instance_method
      def detach_network_interface: (
                                      ?dry_run: bool,
                                      attachment_id: ::String,
                                      ?force: bool
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DetachVerifiedAccessTrustProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DetachVerifiedAccessTrustProviderResult]
        def verified_access_trust_provider: () -> Types::VerifiedAccessTrustProvider
        def verified_access_instance: () -> Types::VerifiedAccessInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#detach_verified_access_trust_provider-instance_method
      def detach_verified_access_trust_provider: (
                                                   verified_access_instance_id: ::String,
                                                   verified_access_trust_provider_id: ::String,
                                                   ?client_token: ::String,
                                                   ?dry_run: bool
                                                 ) -> _DetachVerifiedAccessTrustProviderResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DetachVerifiedAccessTrustProviderResponseSuccess

      interface _DetachVolumeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::VolumeAttachment]
        def delete_on_termination: () -> bool
        def associated_resource: () -> ::String
        def instance_owning_service: () -> ::String
        def volume_id: () -> ::String
        def instance_id: () -> ::String
        def device: () -> ::String
        def state: () -> ("attaching" | "attached" | "detaching" | "detached" | "busy")
        def attach_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#detach_volume-instance_method
      def detach_volume: (
                           ?device: ::String,
                           ?force: bool,
                           ?instance_id: ::String,
                           volume_id: ::String,
                           ?dry_run: bool
                         ) -> _DetachVolumeResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DetachVolumeResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#detach_vpn_gateway-instance_method
      def detach_vpn_gateway: (
                                vpc_id: ::String,
                                vpn_gateway_id: ::String,
                                ?dry_run: bool
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DisableAddressTransferResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableAddressTransferResult]
        def address_transfer: () -> Types::AddressTransfer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_address_transfer-instance_method
      def disable_address_transfer: (
                                      allocation_id: ::String,
                                      ?dry_run: bool
                                    ) -> _DisableAddressTransferResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableAddressTransferResponseSuccess

      interface _DisableAwsNetworkPerformanceMetricSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableAwsNetworkPerformanceMetricSubscriptionResult]
        def output: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_aws_network_performance_metric_subscription-instance_method
      def disable_aws_network_performance_metric_subscription: (
                                                                 ?source: ::String,
                                                                 ?destination: ::String,
                                                                 ?metric: ("aggregate-latency"),
                                                                 ?statistic: ("p50"),
                                                                 ?dry_run: bool
                                                               ) -> _DisableAwsNetworkPerformanceMetricSubscriptionResponseSuccess
                                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableAwsNetworkPerformanceMetricSubscriptionResponseSuccess

      interface _DisableEbsEncryptionByDefaultResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableEbsEncryptionByDefaultResult]
        def ebs_encryption_by_default: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_ebs_encryption_by_default-instance_method
      def disable_ebs_encryption_by_default: (
                                               ?dry_run: bool
                                             ) -> _DisableEbsEncryptionByDefaultResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableEbsEncryptionByDefaultResponseSuccess

      interface _DisableFastLaunchResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableFastLaunchResult]
        def image_id: () -> ::String
        def resource_type: () -> ("snapshot")
        def snapshot_configuration: () -> Types::FastLaunchSnapshotConfigurationResponse
        def launch_template: () -> Types::FastLaunchLaunchTemplateSpecificationResponse
        def max_parallel_launches: () -> ::Integer
        def owner_id: () -> ::String
        def state: () -> ("enabling" | "enabling-failed" | "enabled" | "enabled-failed" | "disabling" | "disabling-failed")
        def state_transition_reason: () -> ::String
        def state_transition_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_fast_launch-instance_method
      def disable_fast_launch: (
                                 image_id: ::String,
                                 ?force: bool,
                                 ?dry_run: bool
                               ) -> _DisableFastLaunchResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableFastLaunchResponseSuccess

      interface _DisableFastSnapshotRestoresResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableFastSnapshotRestoresResult]
        def successful: () -> ::Array[Types::DisableFastSnapshotRestoreSuccessItem]
        def unsuccessful: () -> ::Array[Types::DisableFastSnapshotRestoreErrorItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_fast_snapshot_restores-instance_method
      def disable_fast_snapshot_restores: (
                                            availability_zones: Array[::String],
                                            source_snapshot_ids: Array[::String],
                                            ?dry_run: bool
                                          ) -> _DisableFastSnapshotRestoresResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableFastSnapshotRestoresResponseSuccess

      interface _DisableImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableImageResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_image-instance_method
      def disable_image: (
                           image_id: ::String,
                           ?dry_run: bool
                         ) -> _DisableImageResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableImageResponseSuccess

      interface _DisableImageBlockPublicAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableImageBlockPublicAccessResult]
        def image_block_public_access_state: () -> ("unblocked")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_image_block_public_access-instance_method
      def disable_image_block_public_access: (
                                               ?dry_run: bool
                                             ) -> _DisableImageBlockPublicAccessResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableImageBlockPublicAccessResponseSuccess

      interface _DisableImageDeprecationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableImageDeprecationResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_image_deprecation-instance_method
      def disable_image_deprecation: (
                                       image_id: ::String,
                                       ?dry_run: bool
                                     ) -> _DisableImageDeprecationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableImageDeprecationResponseSuccess

      interface _DisableImageDeregistrationProtectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableImageDeregistrationProtectionResult]
        def return: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_image_deregistration_protection-instance_method
      def disable_image_deregistration_protection: (
                                                     image_id: ::String,
                                                     ?dry_run: bool
                                                   ) -> _DisableImageDeregistrationProtectionResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableImageDeregistrationProtectionResponseSuccess

      interface _DisableIpamOrganizationAdminAccountResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableIpamOrganizationAdminAccountResult]
        def success: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_ipam_organization_admin_account-instance_method
      def disable_ipam_organization_admin_account: (
                                                     ?dry_run: bool,
                                                     delegated_admin_account_id: ::String
                                                   ) -> _DisableIpamOrganizationAdminAccountResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableIpamOrganizationAdminAccountResponseSuccess

      interface _DisableSerialConsoleAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableSerialConsoleAccessResult]
        def serial_console_access_enabled: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_serial_console_access-instance_method
      def disable_serial_console_access: (
                                           ?dry_run: bool
                                         ) -> _DisableSerialConsoleAccessResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableSerialConsoleAccessResponseSuccess

      interface _DisableSnapshotBlockPublicAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableSnapshotBlockPublicAccessResult]
        def state: () -> ("block-all-sharing" | "block-new-sharing" | "unblocked")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_snapshot_block_public_access-instance_method
      def disable_snapshot_block_public_access: (
                                                  ?dry_run: bool
                                                ) -> _DisableSnapshotBlockPublicAccessResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableSnapshotBlockPublicAccessResponseSuccess

      interface _DisableTransitGatewayRouteTablePropagationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableTransitGatewayRouteTablePropagationResult]
        def propagation: () -> Types::TransitGatewayPropagation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_transit_gateway_route_table_propagation-instance_method
      def disable_transit_gateway_route_table_propagation: (
                                                             transit_gateway_route_table_id: ::String,
                                                             ?transit_gateway_attachment_id: ::String,
                                                             ?dry_run: bool,
                                                             ?transit_gateway_route_table_announcement_id: ::String
                                                           ) -> _DisableTransitGatewayRouteTablePropagationResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableTransitGatewayRouteTablePropagationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_vgw_route_propagation-instance_method
      def disable_vgw_route_propagation: (
                                           gateway_id: ::String,
                                           route_table_id: ::String,
                                           ?dry_run: bool
                                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DisableVpcClassicLinkResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableVpcClassicLinkResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_vpc_classic_link-instance_method
      def disable_vpc_classic_link: (
                                      ?dry_run: bool,
                                      vpc_id: ::String
                                    ) -> _DisableVpcClassicLinkResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableVpcClassicLinkResponseSuccess

      interface _DisableVpcClassicLinkDnsSupportResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisableVpcClassicLinkDnsSupportResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disable_vpc_classic_link_dns_support-instance_method
      def disable_vpc_classic_link_dns_support: (
                                                  ?vpc_id: ::String
                                                ) -> _DisableVpcClassicLinkDnsSupportResponseSuccess
                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisableVpcClassicLinkDnsSupportResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_address-instance_method
      def disassociate_address: (
                                  ?association_id: ::String,
                                  ?public_ip: ::String,
                                  ?dry_run: bool
                                ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DisassociateCapacityReservationBillingOwnerResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateCapacityReservationBillingOwnerResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_capacity_reservation_billing_owner-instance_method
      def disassociate_capacity_reservation_billing_owner: (
                                                             ?dry_run: bool,
                                                             capacity_reservation_id: ::String,
                                                             unused_reservation_billing_owner_id: ::String
                                                           ) -> _DisassociateCapacityReservationBillingOwnerResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateCapacityReservationBillingOwnerResponseSuccess

      interface _DisassociateClientVpnTargetNetworkResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateClientVpnTargetNetworkResult]
        def association_id: () -> ::String
        def status: () -> Types::AssociationStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_client_vpn_target_network-instance_method
      def disassociate_client_vpn_target_network: (
                                                    client_vpn_endpoint_id: ::String,
                                                    association_id: ::String,
                                                    ?dry_run: bool
                                                  ) -> _DisassociateClientVpnTargetNetworkResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateClientVpnTargetNetworkResponseSuccess

      interface _DisassociateEnclaveCertificateIamRoleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateEnclaveCertificateIamRoleResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_enclave_certificate_iam_role-instance_method
      def disassociate_enclave_certificate_iam_role: (
                                                       certificate_arn: ::String,
                                                       role_arn: ::String,
                                                       ?dry_run: bool
                                                     ) -> _DisassociateEnclaveCertificateIamRoleResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateEnclaveCertificateIamRoleResponseSuccess

      interface _DisassociateIamInstanceProfileResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateIamInstanceProfileResult]
        def iam_instance_profile_association: () -> Types::IamInstanceProfileAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_iam_instance_profile-instance_method
      def disassociate_iam_instance_profile: (
                                               association_id: ::String
                                             ) -> _DisassociateIamInstanceProfileResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateIamInstanceProfileResponseSuccess

      interface _DisassociateInstanceEventWindowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateInstanceEventWindowResult]
        def instance_event_window: () -> Types::InstanceEventWindow
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_instance_event_window-instance_method
      def disassociate_instance_event_window: (
                                                ?dry_run: bool,
                                                instance_event_window_id: ::String,
                                                association_target: {
                                                  instance_ids: Array[::String]?,
                                                  instance_tags: Array[
                                                    {
                                                      key: ::String?,
                                                      value: ::String?
                                                    },
                                                  ]?,
                                                  dedicated_host_ids: Array[::String]?
                                                }
                                              ) -> _DisassociateInstanceEventWindowResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateInstanceEventWindowResponseSuccess

      interface _DisassociateIpamByoasnResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateIpamByoasnResult]
        def asn_association: () -> Types::AsnAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_ipam_byoasn-instance_method
      def disassociate_ipam_byoasn: (
                                      ?dry_run: bool,
                                      asn: ::String,
                                      cidr: ::String
                                    ) -> _DisassociateIpamByoasnResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateIpamByoasnResponseSuccess

      interface _DisassociateIpamResourceDiscoveryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateIpamResourceDiscoveryResult]
        def ipam_resource_discovery_association: () -> Types::IpamResourceDiscoveryAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_ipam_resource_discovery-instance_method
      def disassociate_ipam_resource_discovery: (
                                                  ?dry_run: bool,
                                                  ipam_resource_discovery_association_id: ::String
                                                ) -> _DisassociateIpamResourceDiscoveryResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateIpamResourceDiscoveryResponseSuccess

      interface _DisassociateNatGatewayAddressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateNatGatewayAddressResult]
        def nat_gateway_id: () -> ::String
        def nat_gateway_addresses: () -> ::Array[Types::NatGatewayAddress]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_nat_gateway_address-instance_method
      def disassociate_nat_gateway_address: (
                                              nat_gateway_id: ::String,
                                              association_ids: Array[::String],
                                              ?max_drain_duration_seconds: ::Integer,
                                              ?dry_run: bool
                                            ) -> _DisassociateNatGatewayAddressResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateNatGatewayAddressResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_route_table-instance_method
      def disassociate_route_table: (
                                      ?dry_run: bool,
                                      association_id: ::String
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DisassociateSubnetCidrBlockResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateSubnetCidrBlockResult]
        def ipv_6_cidr_block_association: () -> Types::SubnetIpv6CidrBlockAssociation
        def subnet_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_subnet_cidr_block-instance_method
      def disassociate_subnet_cidr_block: (
                                            association_id: ::String
                                          ) -> _DisassociateSubnetCidrBlockResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateSubnetCidrBlockResponseSuccess

      interface _DisassociateTransitGatewayMulticastDomainResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateTransitGatewayMulticastDomainResult]
        def associations: () -> Types::TransitGatewayMulticastDomainAssociations
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_transit_gateway_multicast_domain-instance_method
      def disassociate_transit_gateway_multicast_domain: (
                                                           transit_gateway_multicast_domain_id: ::String,
                                                           transit_gateway_attachment_id: ::String,
                                                           subnet_ids: Array[::String],
                                                           ?dry_run: bool
                                                         ) -> _DisassociateTransitGatewayMulticastDomainResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateTransitGatewayMulticastDomainResponseSuccess

      interface _DisassociateTransitGatewayPolicyTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateTransitGatewayPolicyTableResult]
        def association: () -> Types::TransitGatewayPolicyTableAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_transit_gateway_policy_table-instance_method
      def disassociate_transit_gateway_policy_table: (
                                                       transit_gateway_policy_table_id: ::String,
                                                       transit_gateway_attachment_id: ::String,
                                                       ?dry_run: bool
                                                     ) -> _DisassociateTransitGatewayPolicyTableResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateTransitGatewayPolicyTableResponseSuccess

      interface _DisassociateTransitGatewayRouteTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateTransitGatewayRouteTableResult]
        def association: () -> Types::TransitGatewayAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_transit_gateway_route_table-instance_method
      def disassociate_transit_gateway_route_table: (
                                                      transit_gateway_route_table_id: ::String,
                                                      transit_gateway_attachment_id: ::String,
                                                      ?dry_run: bool
                                                    ) -> _DisassociateTransitGatewayRouteTableResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateTransitGatewayRouteTableResponseSuccess

      interface _DisassociateTrunkInterfaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateTrunkInterfaceResult]
        def return: () -> bool
        def client_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_trunk_interface-instance_method
      def disassociate_trunk_interface: (
                                          association_id: ::String,
                                          ?client_token: ::String,
                                          ?dry_run: bool
                                        ) -> _DisassociateTrunkInterfaceResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateTrunkInterfaceResponseSuccess

      interface _DisassociateVpcCidrBlockResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DisassociateVpcCidrBlockResult]
        def ipv_6_cidr_block_association: () -> Types::VpcIpv6CidrBlockAssociation
        def cidr_block_association: () -> Types::VpcCidrBlockAssociation
        def vpc_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#disassociate_vpc_cidr_block-instance_method
      def disassociate_vpc_cidr_block: (
                                         association_id: ::String
                                       ) -> _DisassociateVpcCidrBlockResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DisassociateVpcCidrBlockResponseSuccess

      interface _EnableAddressTransferResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableAddressTransferResult]
        def address_transfer: () -> Types::AddressTransfer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_address_transfer-instance_method
      def enable_address_transfer: (
                                     allocation_id: ::String,
                                     transfer_account_id: ::String,
                                     ?dry_run: bool
                                   ) -> _EnableAddressTransferResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableAddressTransferResponseSuccess

      interface _EnableAwsNetworkPerformanceMetricSubscriptionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableAwsNetworkPerformanceMetricSubscriptionResult]
        def output: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_aws_network_performance_metric_subscription-instance_method
      def enable_aws_network_performance_metric_subscription: (
                                                                ?source: ::String,
                                                                ?destination: ::String,
                                                                ?metric: ("aggregate-latency"),
                                                                ?statistic: ("p50"),
                                                                ?dry_run: bool
                                                              ) -> _EnableAwsNetworkPerformanceMetricSubscriptionResponseSuccess
                                                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableAwsNetworkPerformanceMetricSubscriptionResponseSuccess

      interface _EnableEbsEncryptionByDefaultResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableEbsEncryptionByDefaultResult]
        def ebs_encryption_by_default: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_ebs_encryption_by_default-instance_method
      def enable_ebs_encryption_by_default: (
                                              ?dry_run: bool
                                            ) -> _EnableEbsEncryptionByDefaultResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableEbsEncryptionByDefaultResponseSuccess

      interface _EnableFastLaunchResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableFastLaunchResult]
        def image_id: () -> ::String
        def resource_type: () -> ("snapshot")
        def snapshot_configuration: () -> Types::FastLaunchSnapshotConfigurationResponse
        def launch_template: () -> Types::FastLaunchLaunchTemplateSpecificationResponse
        def max_parallel_launches: () -> ::Integer
        def owner_id: () -> ::String
        def state: () -> ("enabling" | "enabling-failed" | "enabled" | "enabled-failed" | "disabling" | "disabling-failed")
        def state_transition_reason: () -> ::String
        def state_transition_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_fast_launch-instance_method
      def enable_fast_launch: (
                                image_id: ::String,
                                ?resource_type: ::String,
                                ?snapshot_configuration: {
                                  target_resource_count: ::Integer?
                                },
                                ?launch_template: {
                                  launch_template_id: ::String?,
                                  launch_template_name: ::String?,
                                  version: ::String
                                },
                                ?max_parallel_launches: ::Integer,
                                ?dry_run: bool
                              ) -> _EnableFastLaunchResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableFastLaunchResponseSuccess

      interface _EnableFastSnapshotRestoresResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableFastSnapshotRestoresResult]
        def successful: () -> ::Array[Types::EnableFastSnapshotRestoreSuccessItem]
        def unsuccessful: () -> ::Array[Types::EnableFastSnapshotRestoreErrorItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_fast_snapshot_restores-instance_method
      def enable_fast_snapshot_restores: (
                                           availability_zones: Array[::String],
                                           source_snapshot_ids: Array[::String],
                                           ?dry_run: bool
                                         ) -> _EnableFastSnapshotRestoresResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableFastSnapshotRestoresResponseSuccess

      interface _EnableImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableImageResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_image-instance_method
      def enable_image: (
                          image_id: ::String,
                          ?dry_run: bool
                        ) -> _EnableImageResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableImageResponseSuccess

      interface _EnableImageBlockPublicAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableImageBlockPublicAccessResult]
        def image_block_public_access_state: () -> ("block-new-sharing")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_image_block_public_access-instance_method
      def enable_image_block_public_access: (
                                              image_block_public_access_state: ("block-new-sharing"),
                                              ?dry_run: bool
                                            ) -> _EnableImageBlockPublicAccessResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableImageBlockPublicAccessResponseSuccess

      interface _EnableImageDeprecationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableImageDeprecationResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_image_deprecation-instance_method
      def enable_image_deprecation: (
                                      image_id: ::String,
                                      deprecate_at: ::Time,
                                      ?dry_run: bool
                                    ) -> _EnableImageDeprecationResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableImageDeprecationResponseSuccess

      interface _EnableImageDeregistrationProtectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableImageDeregistrationProtectionResult]
        def return: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_image_deregistration_protection-instance_method
      def enable_image_deregistration_protection: (
                                                    image_id: ::String,
                                                    ?with_cooldown: bool,
                                                    ?dry_run: bool
                                                  ) -> _EnableImageDeregistrationProtectionResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableImageDeregistrationProtectionResponseSuccess

      interface _EnableIpamOrganizationAdminAccountResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableIpamOrganizationAdminAccountResult]
        def success: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_ipam_organization_admin_account-instance_method
      def enable_ipam_organization_admin_account: (
                                                    ?dry_run: bool,
                                                    delegated_admin_account_id: ::String
                                                  ) -> _EnableIpamOrganizationAdminAccountResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableIpamOrganizationAdminAccountResponseSuccess

      interface _EnableReachabilityAnalyzerOrganizationSharingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableReachabilityAnalyzerOrganizationSharingResult]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_reachability_analyzer_organization_sharing-instance_method
      def enable_reachability_analyzer_organization_sharing: (
                                                               ?dry_run: bool
                                                             ) -> _EnableReachabilityAnalyzerOrganizationSharingResponseSuccess
                                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableReachabilityAnalyzerOrganizationSharingResponseSuccess

      interface _EnableSerialConsoleAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableSerialConsoleAccessResult]
        def serial_console_access_enabled: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_serial_console_access-instance_method
      def enable_serial_console_access: (
                                          ?dry_run: bool
                                        ) -> _EnableSerialConsoleAccessResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableSerialConsoleAccessResponseSuccess

      interface _EnableSnapshotBlockPublicAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableSnapshotBlockPublicAccessResult]
        def state: () -> ("block-all-sharing" | "block-new-sharing" | "unblocked")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_snapshot_block_public_access-instance_method
      def enable_snapshot_block_public_access: (
                                                 state: ("block-all-sharing" | "block-new-sharing" | "unblocked"),
                                                 ?dry_run: bool
                                               ) -> _EnableSnapshotBlockPublicAccessResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableSnapshotBlockPublicAccessResponseSuccess

      interface _EnableTransitGatewayRouteTablePropagationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableTransitGatewayRouteTablePropagationResult]
        def propagation: () -> Types::TransitGatewayPropagation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_transit_gateway_route_table_propagation-instance_method
      def enable_transit_gateway_route_table_propagation: (
                                                            transit_gateway_route_table_id: ::String,
                                                            ?transit_gateway_attachment_id: ::String,
                                                            ?dry_run: bool,
                                                            ?transit_gateway_route_table_announcement_id: ::String
                                                          ) -> _EnableTransitGatewayRouteTablePropagationResponseSuccess
                                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableTransitGatewayRouteTablePropagationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_vgw_route_propagation-instance_method
      def enable_vgw_route_propagation: (
                                          gateway_id: ::String,
                                          route_table_id: ::String,
                                          ?dry_run: bool
                                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_volume_io-instance_method
      def enable_volume_io: (
                              ?dry_run: bool,
                              volume_id: ::String
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _EnableVpcClassicLinkResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableVpcClassicLinkResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_vpc_classic_link-instance_method
      def enable_vpc_classic_link: (
                                     ?dry_run: bool,
                                     vpc_id: ::String
                                   ) -> _EnableVpcClassicLinkResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableVpcClassicLinkResponseSuccess

      interface _EnableVpcClassicLinkDnsSupportResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::EnableVpcClassicLinkDnsSupportResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#enable_vpc_classic_link_dns_support-instance_method
      def enable_vpc_classic_link_dns_support: (
                                                 ?vpc_id: ::String
                                               ) -> _EnableVpcClassicLinkDnsSupportResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _EnableVpcClassicLinkDnsSupportResponseSuccess

      interface _ExportClientVpnClientCertificateRevocationListResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportClientVpnClientCertificateRevocationListResult]
        def certificate_revocation_list: () -> ::String
        def status: () -> Types::ClientCertificateRevocationListStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#export_client_vpn_client_certificate_revocation_list-instance_method
      def export_client_vpn_client_certificate_revocation_list: (
                                                                  client_vpn_endpoint_id: ::String,
                                                                  ?dry_run: bool
                                                                ) -> _ExportClientVpnClientCertificateRevocationListResponseSuccess
                                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ExportClientVpnClientCertificateRevocationListResponseSuccess

      interface _ExportClientVpnClientConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportClientVpnClientConfigurationResult]
        def client_configuration: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#export_client_vpn_client_configuration-instance_method
      def export_client_vpn_client_configuration: (
                                                    client_vpn_endpoint_id: ::String,
                                                    ?dry_run: bool
                                                  ) -> _ExportClientVpnClientConfigurationResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ExportClientVpnClientConfigurationResponseSuccess

      interface _ExportImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportImageResult]
        def description: () -> ::String
        def disk_image_format: () -> ("VMDK" | "RAW" | "VHD")
        def export_image_task_id: () -> ::String
        def image_id: () -> ::String
        def role_name: () -> ::String
        def progress: () -> ::String
        def s3_export_location: () -> Types::ExportTaskS3Location
        def status: () -> ::String
        def status_message: () -> ::String
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#export_image-instance_method
      def export_image: (
                          ?client_token: ::String,
                          ?description: ::String,
                          disk_image_format: ("VMDK" | "RAW" | "VHD"),
                          ?dry_run: bool,
                          image_id: ::String,
                          s3_export_location: {
                            s3_bucket: ::String,
                            s3_prefix: ::String?
                          },
                          ?role_name: ::String,
                          ?tag_specifications: Array[
                            {
                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                              tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ]?
                            },
                          ]
                        ) -> _ExportImageResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ExportImageResponseSuccess

      interface _ExportTransitGatewayRoutesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ExportTransitGatewayRoutesResult]
        def s3_location: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#export_transit_gateway_routes-instance_method
      def export_transit_gateway_routes: (
                                           transit_gateway_route_table_id: ::String,
                                           ?filters: Array[
                                             {
                                               name: ::String?,
                                               values: Array[::String]?
                                             },
                                           ],
                                           s3_bucket: ::String,
                                           ?dry_run: bool
                                         ) -> _ExportTransitGatewayRoutesResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ExportTransitGatewayRoutesResponseSuccess

      interface _GetAssociatedEnclaveCertificateIamRolesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAssociatedEnclaveCertificateIamRolesResult]
        def associated_roles: () -> ::Array[Types::AssociatedRole]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_associated_enclave_certificate_iam_roles-instance_method
      def get_associated_enclave_certificate_iam_roles: (
                                                          certificate_arn: ::String,
                                                          ?dry_run: bool
                                                        ) -> _GetAssociatedEnclaveCertificateIamRolesResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAssociatedEnclaveCertificateIamRolesResponseSuccess

      interface _GetAssociatedIpv6PoolCidrsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAssociatedIpv6PoolCidrsResult]
        def ipv_6_cidr_associations: () -> ::Array[Types::Ipv6CidrAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_associated_ipv_6_pool_cidrs-instance_method
      def get_associated_ipv_6_pool_cidrs: (
                                             pool_id: ::String,
                                             ?next_token: ::String,
                                             ?max_results: ::Integer,
                                             ?dry_run: bool
                                           ) -> _GetAssociatedIpv6PoolCidrsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAssociatedIpv6PoolCidrsResponseSuccess

      interface _GetAwsNetworkPerformanceDataResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAwsNetworkPerformanceDataResult]
        def data_responses: () -> ::Array[Types::DataResponse]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_aws_network_performance_data-instance_method
      def get_aws_network_performance_data: (
                                              ?data_queries: Array[
                                                {
                                                  id: ::String?,
                                                  source: ::String?,
                                                  destination: ::String?,
                                                  metric: ("aggregate-latency")?,
                                                  statistic: ("p50")?,
                                                  period: ("five-minutes" | "fifteen-minutes" | "one-hour" | "three-hours" | "one-day" | "one-week")?
                                                },
                                              ],
                                              ?start_time: ::Time,
                                              ?end_time: ::Time,
                                              ?max_results: ::Integer,
                                              ?next_token: ::String,
                                              ?dry_run: bool
                                            ) -> _GetAwsNetworkPerformanceDataResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAwsNetworkPerformanceDataResponseSuccess

      interface _GetCapacityReservationUsageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCapacityReservationUsageResult]
        def next_token: () -> ::String
        def capacity_reservation_id: () -> ::String
        def instance_type: () -> ::String
        def total_instance_count: () -> ::Integer
        def available_instance_count: () -> ::Integer
        def state: () -> ("active" | "expired" | "cancelled" | "pending" | "failed" | "scheduled" | "payment-pending" | "payment-failed")
        def instance_usages: () -> ::Array[Types::InstanceUsage]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_capacity_reservation_usage-instance_method
      def get_capacity_reservation_usage: (
                                            capacity_reservation_id: ::String,
                                            ?next_token: ::String,
                                            ?max_results: ::Integer,
                                            ?dry_run: bool
                                          ) -> _GetCapacityReservationUsageResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCapacityReservationUsageResponseSuccess

      interface _GetCoipPoolUsageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetCoipPoolUsageResult]
        def coip_pool_id: () -> ::String
        def coip_address_usages: () -> ::Array[Types::CoipAddressUsage]
        def local_gateway_route_table_id: () -> ::String
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_coip_pool_usage-instance_method
      def get_coip_pool_usage: (
                                 pool_id: ::String,
                                 ?filters: Array[
                                   {
                                     name: ::String?,
                                     values: Array[::String]?
                                   },
                                 ],
                                 ?max_results: ::Integer,
                                 ?next_token: ::String,
                                 ?dry_run: bool
                               ) -> _GetCoipPoolUsageResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetCoipPoolUsageResponseSuccess

      interface _GetConsoleOutputResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetConsoleOutputResult]
        def instance_id: () -> ::String
        def timestamp: () -> ::Time
        def output: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_console_output-instance_method
      def get_console_output: (
                                instance_id: ::String,
                                ?latest: bool,
                                ?dry_run: bool
                              ) -> _GetConsoleOutputResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetConsoleOutputResponseSuccess

      interface _GetConsoleScreenshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetConsoleScreenshotResult]
        def image_data: () -> ::String
        def instance_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_console_screenshot-instance_method
      def get_console_screenshot: (
                                    ?dry_run: bool,
                                    instance_id: ::String,
                                    ?wake_up: bool
                                  ) -> _GetConsoleScreenshotResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetConsoleScreenshotResponseSuccess

      interface _GetDefaultCreditSpecificationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetDefaultCreditSpecificationResult]
        def instance_family_credit_specification: () -> Types::InstanceFamilyCreditSpecification
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_default_credit_specification-instance_method
      def get_default_credit_specification: (
                                              ?dry_run: bool,
                                              instance_family: ("t2" | "t3" | "t3a" | "t4g")
                                            ) -> _GetDefaultCreditSpecificationResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetDefaultCreditSpecificationResponseSuccess

      interface _GetEbsDefaultKmsKeyIdResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEbsDefaultKmsKeyIdResult]
        def kms_key_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ebs_default_kms_key_id-instance_method
      def get_ebs_default_kms_key_id: (
                                        ?dry_run: bool
                                      ) -> _GetEbsDefaultKmsKeyIdResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEbsDefaultKmsKeyIdResponseSuccess

      interface _GetEbsEncryptionByDefaultResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEbsEncryptionByDefaultResult]
        def ebs_encryption_by_default: () -> bool
        def sse_type: () -> ("sse-ebs" | "sse-kms" | "none")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ebs_encryption_by_default-instance_method
      def get_ebs_encryption_by_default: (
                                           ?dry_run: bool
                                         ) -> _GetEbsEncryptionByDefaultResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEbsEncryptionByDefaultResponseSuccess

      interface _GetFlowLogsIntegrationTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetFlowLogsIntegrationTemplateResult]
        def result: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_flow_logs_integration_template-instance_method
      def get_flow_logs_integration_template: (
                                                ?dry_run: bool,
                                                flow_log_id: ::String,
                                                config_delivery_s3_destination_arn: ::String,
                                                integrate_services: {
                                                  athena_integrations: Array[
                                                    {
                                                      integration_result_s3_destination_arn: ::String,
                                                      partition_load_frequency: ("none" | "daily" | "weekly" | "monthly"),
                                                      partition_start_date: ::Time?,
                                                      partition_end_date: ::Time?
                                                    },
                                                  ]?
                                                }
                                              ) -> _GetFlowLogsIntegrationTemplateResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetFlowLogsIntegrationTemplateResponseSuccess

      interface _GetGroupsForCapacityReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetGroupsForCapacityReservationResult]
        def next_token: () -> ::String
        def capacity_reservation_groups: () -> ::Array[Types::CapacityReservationGroup]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_groups_for_capacity_reservation-instance_method
      def get_groups_for_capacity_reservation: (
                                                 capacity_reservation_id: ::String,
                                                 ?next_token: ::String,
                                                 ?max_results: ::Integer,
                                                 ?dry_run: bool
                                               ) -> _GetGroupsForCapacityReservationResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetGroupsForCapacityReservationResponseSuccess

      interface _GetHostReservationPurchasePreviewResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetHostReservationPurchasePreviewResult]
        def currency_code: () -> ("USD")
        def purchase: () -> ::Array[Types::Purchase]
        def total_hourly_price: () -> ::String
        def total_upfront_price: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_host_reservation_purchase_preview-instance_method
      def get_host_reservation_purchase_preview: (
                                                   host_id_set: Array[::String],
                                                   offering_id: ::String
                                                 ) -> _GetHostReservationPurchasePreviewResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetHostReservationPurchasePreviewResponseSuccess

      interface _GetImageBlockPublicAccessStateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetImageBlockPublicAccessStateResult]
        def image_block_public_access_state: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_image_block_public_access_state-instance_method
      def get_image_block_public_access_state: (
                                                 ?dry_run: bool
                                               ) -> _GetImageBlockPublicAccessStateResponseSuccess
                                             | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetImageBlockPublicAccessStateResponseSuccess

      interface _GetInstanceMetadataDefaultsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetInstanceMetadataDefaultsResult]
        def account_level: () -> Types::InstanceMetadataDefaultsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_instance_metadata_defaults-instance_method
      def get_instance_metadata_defaults: (
                                            ?dry_run: bool
                                          ) -> _GetInstanceMetadataDefaultsResponseSuccess
                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetInstanceMetadataDefaultsResponseSuccess

      interface _GetInstanceTpmEkPubResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetInstanceTpmEkPubResult]
        def instance_id: () -> ::String
        def key_type: () -> ("rsa-2048" | "ecc-sec-p384")
        def key_format: () -> ("der" | "tpmt")
        def key_value: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_instance_tpm_ek_pub-instance_method
      def get_instance_tpm_ek_pub: (
                                     instance_id: ::String,
                                     key_type: ("rsa-2048" | "ecc-sec-p384"),
                                     key_format: ("der" | "tpmt"),
                                     ?dry_run: bool
                                   ) -> _GetInstanceTpmEkPubResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetInstanceTpmEkPubResponseSuccess

      interface _GetInstanceTypesFromInstanceRequirementsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetInstanceTypesFromInstanceRequirementsResult]
        def instance_types: () -> ::Array[Types::InstanceTypeInfoFromInstanceRequirements]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_instance_types_from_instance_requirements-instance_method
      def get_instance_types_from_instance_requirements: (
                                                           ?dry_run: bool,
                                                           architecture_types: Array[("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac")],
                                                           virtualization_types: Array[("hvm" | "paravirtual")],
                                                           instance_requirements: {
                                                             v_cpu_count: {
                                                               min: ::Integer,
                                                               max: ::Integer?
                                                             },
                                                             memory_mi_b: {
                                                               min: ::Integer,
                                                               max: ::Integer?
                                                             },
                                                             cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                                             memory_gi_b_per_v_cpu: {
                                                               min: ::Float?,
                                                               max: ::Float?
                                                             }?,
                                                             excluded_instance_types: Array[::String]?,
                                                             instance_generations: Array[("current" | "previous")]?,
                                                             spot_max_price_percentage_over_lowest_price: ::Integer?,
                                                             on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                                             bare_metal: ("included" | "required" | "excluded")?,
                                                             burstable_performance: ("included" | "required" | "excluded")?,
                                                             require_hibernate_support: bool?,
                                                             network_interface_count: {
                                                               min: ::Integer?,
                                                               max: ::Integer?
                                                             }?,
                                                             local_storage: ("included" | "required" | "excluded")?,
                                                             local_storage_types: Array[("hdd" | "ssd")]?,
                                                             total_local_storage_gb: {
                                                               min: ::Float?,
                                                               max: ::Float?
                                                             }?,
                                                             baseline_ebs_bandwidth_mbps: {
                                                               min: ::Integer?,
                                                               max: ::Integer?
                                                             }?,
                                                             accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                                             accelerator_count: {
                                                               min: ::Integer?,
                                                               max: ::Integer?
                                                             }?,
                                                             accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                                             accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                                             accelerator_total_memory_mi_b: {
                                                               min: ::Integer?,
                                                               max: ::Integer?
                                                             }?,
                                                             network_bandwidth_gbps: {
                                                               min: ::Float?,
                                                               max: ::Float?
                                                             }?,
                                                             allowed_instance_types: Array[::String]?,
                                                             max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                                           },
                                                           ?max_results: ::Integer,
                                                           ?next_token: ::String
                                                         ) -> _GetInstanceTypesFromInstanceRequirementsResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetInstanceTypesFromInstanceRequirementsResponseSuccess

      interface _GetInstanceUefiDataResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetInstanceUefiDataResult]
        def instance_id: () -> ::String
        def uefi_data: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_instance_uefi_data-instance_method
      def get_instance_uefi_data: (
                                    instance_id: ::String,
                                    ?dry_run: bool
                                  ) -> _GetInstanceUefiDataResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetInstanceUefiDataResponseSuccess

      interface _GetIpamAddressHistoryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamAddressHistoryResult]
        def history_records: () -> ::Array[Types::IpamAddressHistoryRecord]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_address_history-instance_method
      def get_ipam_address_history: (
                                      ?dry_run: bool,
                                      cidr: ::String,
                                      ipam_scope_id: ::String,
                                      ?vpc_id: ::String,
                                      ?start_time: ::Time,
                                      ?end_time: ::Time,
                                      ?max_results: ::Integer,
                                      ?next_token: ::String
                                    ) -> _GetIpamAddressHistoryResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamAddressHistoryResponseSuccess

      interface _GetIpamDiscoveredAccountsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamDiscoveredAccountsResult]
        def ipam_discovered_accounts: () -> ::Array[Types::IpamDiscoveredAccount]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_discovered_accounts-instance_method
      def get_ipam_discovered_accounts: (
                                          ?dry_run: bool,
                                          ipam_resource_discovery_id: ::String,
                                          discovery_region: ::String,
                                          ?filters: Array[
                                            {
                                              name: ::String?,
                                              values: Array[::String]?
                                            },
                                          ],
                                          ?next_token: ::String,
                                          ?max_results: ::Integer
                                        ) -> _GetIpamDiscoveredAccountsResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamDiscoveredAccountsResponseSuccess

      interface _GetIpamDiscoveredPublicAddressesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamDiscoveredPublicAddressesResult]
        def ipam_discovered_public_addresses: () -> ::Array[Types::IpamDiscoveredPublicAddress]
        def oldest_sample_time: () -> ::Time
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_discovered_public_addresses-instance_method
      def get_ipam_discovered_public_addresses: (
                                                  ?dry_run: bool,
                                                  ipam_resource_discovery_id: ::String,
                                                  address_region: ::String,
                                                  ?filters: Array[
                                                    {
                                                      name: ::String?,
                                                      values: Array[::String]?
                                                    },
                                                  ],
                                                  ?next_token: ::String,
                                                  ?max_results: ::Integer
                                                ) -> _GetIpamDiscoveredPublicAddressesResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamDiscoveredPublicAddressesResponseSuccess

      interface _GetIpamDiscoveredResourceCidrsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamDiscoveredResourceCidrsResult]
        def ipam_discovered_resource_cidrs: () -> ::Array[Types::IpamDiscoveredResourceCidr]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_discovered_resource_cidrs-instance_method
      def get_ipam_discovered_resource_cidrs: (
                                                ?dry_run: bool,
                                                ipam_resource_discovery_id: ::String,
                                                resource_region: ::String,
                                                ?filters: Array[
                                                  {
                                                    name: ::String?,
                                                    values: Array[::String]?
                                                  },
                                                ],
                                                ?next_token: ::String,
                                                ?max_results: ::Integer
                                              ) -> _GetIpamDiscoveredResourceCidrsResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamDiscoveredResourceCidrsResponseSuccess

      interface _GetIpamPoolAllocationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamPoolAllocationsResult]
        def ipam_pool_allocations: () -> ::Array[Types::IpamPoolAllocation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_pool_allocations-instance_method
      def get_ipam_pool_allocations: (
                                       ?dry_run: bool,
                                       ipam_pool_id: ::String,
                                       ?ipam_pool_allocation_id: ::String,
                                       ?filters: Array[
                                         {
                                           name: ::String?,
                                           values: Array[::String]?
                                         },
                                       ],
                                       ?max_results: ::Integer,
                                       ?next_token: ::String
                                     ) -> _GetIpamPoolAllocationsResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamPoolAllocationsResponseSuccess

      interface _GetIpamPoolCidrsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamPoolCidrsResult]
        def ipam_pool_cidrs: () -> ::Array[Types::IpamPoolCidr]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_pool_cidrs-instance_method
      def get_ipam_pool_cidrs: (
                                 ?dry_run: bool,
                                 ipam_pool_id: ::String,
                                 ?filters: Array[
                                   {
                                     name: ::String?,
                                     values: Array[::String]?
                                   },
                                 ],
                                 ?max_results: ::Integer,
                                 ?next_token: ::String
                               ) -> _GetIpamPoolCidrsResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamPoolCidrsResponseSuccess

      interface _GetIpamResourceCidrsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIpamResourceCidrsResult]
        def next_token: () -> ::String
        def ipam_resource_cidrs: () -> ::Array[Types::IpamResourceCidr]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_ipam_resource_cidrs-instance_method
      def get_ipam_resource_cidrs: (
                                     ?dry_run: bool,
                                     ?filters: Array[
                                       {
                                         name: ::String?,
                                         values: Array[::String]?
                                       },
                                     ],
                                     ?max_results: ::Integer,
                                     ?next_token: ::String,
                                     ipam_scope_id: ::String,
                                     ?ipam_pool_id: ::String,
                                     ?resource_id: ::String,
                                     ?resource_type: ("vpc" | "subnet" | "eip" | "public-ipv4-pool" | "ipv6-pool" | "eni"),
                                     ?resource_tag: {
                                       key: ::String?,
                                       value: ::String?
                                     },
                                     ?resource_owner: ::String
                                   ) -> _GetIpamResourceCidrsResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIpamResourceCidrsResponseSuccess

      interface _GetLaunchTemplateDataResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetLaunchTemplateDataResult]
        def launch_template_data: () -> Types::ResponseLaunchTemplateData
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_launch_template_data-instance_method
      def get_launch_template_data: (
                                      ?dry_run: bool,
                                      instance_id: ::String
                                    ) -> _GetLaunchTemplateDataResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetLaunchTemplateDataResponseSuccess

      interface _GetManagedPrefixListAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetManagedPrefixListAssociationsResult]
        def prefix_list_associations: () -> ::Array[Types::PrefixListAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_managed_prefix_list_associations-instance_method
      def get_managed_prefix_list_associations: (
                                                  ?dry_run: bool,
                                                  prefix_list_id: ::String,
                                                  ?max_results: ::Integer,
                                                  ?next_token: ::String
                                                ) -> _GetManagedPrefixListAssociationsResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetManagedPrefixListAssociationsResponseSuccess

      interface _GetManagedPrefixListEntriesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetManagedPrefixListEntriesResult]
        def entries: () -> ::Array[Types::PrefixListEntry]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_managed_prefix_list_entries-instance_method
      def get_managed_prefix_list_entries: (
                                             ?dry_run: bool,
                                             prefix_list_id: ::String,
                                             ?target_version: ::Integer,
                                             ?max_results: ::Integer,
                                             ?next_token: ::String
                                           ) -> _GetManagedPrefixListEntriesResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetManagedPrefixListEntriesResponseSuccess

      interface _GetNetworkInsightsAccessScopeAnalysisFindingsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetNetworkInsightsAccessScopeAnalysisFindingsResult]
        def network_insights_access_scope_analysis_id: () -> ::String
        def analysis_status: () -> ("running" | "succeeded" | "failed")
        def analysis_findings: () -> ::Array[Types::AccessScopeAnalysisFinding]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_network_insights_access_scope_analysis_findings-instance_method
      def get_network_insights_access_scope_analysis_findings: (
                                                                 network_insights_access_scope_analysis_id: ::String,
                                                                 ?max_results: ::Integer,
                                                                 ?next_token: ::String,
                                                                 ?dry_run: bool
                                                               ) -> _GetNetworkInsightsAccessScopeAnalysisFindingsResponseSuccess
                                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetNetworkInsightsAccessScopeAnalysisFindingsResponseSuccess

      interface _GetNetworkInsightsAccessScopeContentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetNetworkInsightsAccessScopeContentResult]
        def network_insights_access_scope_content: () -> Types::NetworkInsightsAccessScopeContent
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_network_insights_access_scope_content-instance_method
      def get_network_insights_access_scope_content: (
                                                       network_insights_access_scope_id: ::String,
                                                       ?dry_run: bool
                                                     ) -> _GetNetworkInsightsAccessScopeContentResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetNetworkInsightsAccessScopeContentResponseSuccess

      interface _GetPasswordDataResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetPasswordDataResult]
        def instance_id: () -> ::String
        def timestamp: () -> ::Time
        def password_data: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_password_data-instance_method
      def get_password_data: (
                               instance_id: ::String,
                               ?dry_run: bool
                             ) -> _GetPasswordDataResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetPasswordDataResponseSuccess

      interface _GetReservedInstancesExchangeQuoteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetReservedInstancesExchangeQuoteResult]
        def currency_code: () -> ::String
        def is_valid_exchange: () -> bool
        def output_reserved_instances_will_expire_at: () -> ::Time
        def payment_due: () -> ::String
        def reserved_instance_value_rollup: () -> Types::ReservationValue
        def reserved_instance_value_set: () -> ::Array[Types::ReservedInstanceReservationValue]
        def target_configuration_value_rollup: () -> Types::ReservationValue
        def target_configuration_value_set: () -> ::Array[Types::TargetReservationValue]
        def validation_failure_reason: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_reserved_instances_exchange_quote-instance_method
      def get_reserved_instances_exchange_quote: (
                                                   ?dry_run: bool,
                                                   reserved_instance_ids: Array[::String],
                                                   ?target_configurations: Array[
                                                     {
                                                       instance_count: ::Integer?,
                                                       offering_id: ::String
                                                     },
                                                   ]
                                                 ) -> _GetReservedInstancesExchangeQuoteResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetReservedInstancesExchangeQuoteResponseSuccess

      interface _GetSecurityGroupsForVpcResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSecurityGroupsForVpcResult]
        def next_token: () -> ::String
        def security_group_for_vpcs: () -> ::Array[Types::SecurityGroupForVpc]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_security_groups_for_vpc-instance_method
      def get_security_groups_for_vpc: (
                                         vpc_id: ::String,
                                         ?next_token: ::String,
                                         ?max_results: ::Integer,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?dry_run: bool
                                       ) -> _GetSecurityGroupsForVpcResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSecurityGroupsForVpcResponseSuccess

      interface _GetSerialConsoleAccessStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSerialConsoleAccessStatusResult]
        def serial_console_access_enabled: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_serial_console_access_status-instance_method
      def get_serial_console_access_status: (
                                              ?dry_run: bool
                                            ) -> _GetSerialConsoleAccessStatusResponseSuccess
                                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSerialConsoleAccessStatusResponseSuccess

      interface _GetSnapshotBlockPublicAccessStateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSnapshotBlockPublicAccessStateResult]
        def state: () -> ("block-all-sharing" | "block-new-sharing" | "unblocked")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_snapshot_block_public_access_state-instance_method
      def get_snapshot_block_public_access_state: (
                                                    ?dry_run: bool
                                                  ) -> _GetSnapshotBlockPublicAccessStateResponseSuccess
                                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSnapshotBlockPublicAccessStateResponseSuccess

      interface _GetSpotPlacementScoresResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSpotPlacementScoresResult]
        def spot_placement_scores: () -> ::Array[Types::SpotPlacementScore]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_spot_placement_scores-instance_method
      def get_spot_placement_scores: (
                                       ?instance_types: Array[::String],
                                       target_capacity: ::Integer,
                                       ?target_capacity_unit_type: ("vcpu" | "memory-mib" | "units"),
                                       ?single_availability_zone: bool,
                                       ?region_names: Array[::String],
                                       ?instance_requirements_with_metadata: {
                                         architecture_types: Array[("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac")]?,
                                         virtualization_types: Array[("hvm" | "paravirtual")]?,
                                         instance_requirements: {
                                           v_cpu_count: {
                                             min: ::Integer,
                                             max: ::Integer?
                                           },
                                           memory_mi_b: {
                                             min: ::Integer,
                                             max: ::Integer?
                                           },
                                           cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                           memory_gi_b_per_v_cpu: {
                                             min: ::Float?,
                                             max: ::Float?
                                           }?,
                                           excluded_instance_types: Array[::String]?,
                                           instance_generations: Array[("current" | "previous")]?,
                                           spot_max_price_percentage_over_lowest_price: ::Integer?,
                                           on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                           bare_metal: ("included" | "required" | "excluded")?,
                                           burstable_performance: ("included" | "required" | "excluded")?,
                                           require_hibernate_support: bool?,
                                           network_interface_count: {
                                             min: ::Integer?,
                                             max: ::Integer?
                                           }?,
                                           local_storage: ("included" | "required" | "excluded")?,
                                           local_storage_types: Array[("hdd" | "ssd")]?,
                                           total_local_storage_gb: {
                                             min: ::Float?,
                                             max: ::Float?
                                           }?,
                                           baseline_ebs_bandwidth_mbps: {
                                             min: ::Integer?,
                                             max: ::Integer?
                                           }?,
                                           accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                           accelerator_count: {
                                             min: ::Integer?,
                                             max: ::Integer?
                                           }?,
                                           accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                           accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                           accelerator_total_memory_mi_b: {
                                             min: ::Integer?,
                                             max: ::Integer?
                                           }?,
                                           network_bandwidth_gbps: {
                                             min: ::Float?,
                                             max: ::Float?
                                           }?,
                                           allowed_instance_types: Array[::String]?,
                                           max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                         }?
                                       },
                                       ?dry_run: bool,
                                       ?max_results: ::Integer,
                                       ?next_token: ::String
                                     ) -> _GetSpotPlacementScoresResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSpotPlacementScoresResponseSuccess

      interface _GetSubnetCidrReservationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSubnetCidrReservationsResult]
        def subnet_ipv_4_cidr_reservations: () -> ::Array[Types::SubnetCidrReservation]
        def subnet_ipv_6_cidr_reservations: () -> ::Array[Types::SubnetCidrReservation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_subnet_cidr_reservations-instance_method
      def get_subnet_cidr_reservations: (
                                          ?filters: Array[
                                            {
                                              name: ::String?,
                                              values: Array[::String]?
                                            },
                                          ],
                                          subnet_id: ::String,
                                          ?dry_run: bool,
                                          ?next_token: ::String,
                                          ?max_results: ::Integer
                                        ) -> _GetSubnetCidrReservationsResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSubnetCidrReservationsResponseSuccess

      interface _GetTransitGatewayAttachmentPropagationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayAttachmentPropagationsResult]
        def transit_gateway_attachment_propagations: () -> ::Array[Types::TransitGatewayAttachmentPropagation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_attachment_propagations-instance_method
      def get_transit_gateway_attachment_propagations: (
                                                         transit_gateway_attachment_id: ::String,
                                                         ?filters: Array[
                                                           {
                                                             name: ::String?,
                                                             values: Array[::String]?
                                                           },
                                                         ],
                                                         ?max_results: ::Integer,
                                                         ?next_token: ::String,
                                                         ?dry_run: bool
                                                       ) -> _GetTransitGatewayAttachmentPropagationsResponseSuccess
                                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayAttachmentPropagationsResponseSuccess

      interface _GetTransitGatewayMulticastDomainAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayMulticastDomainAssociationsResult]
        def multicast_domain_associations: () -> ::Array[Types::TransitGatewayMulticastDomainAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_multicast_domain_associations-instance_method
      def get_transit_gateway_multicast_domain_associations: (
                                                               transit_gateway_multicast_domain_id: ::String,
                                                               ?filters: Array[
                                                                 {
                                                                   name: ::String?,
                                                                   values: Array[::String]?
                                                                 },
                                                               ],
                                                               ?max_results: ::Integer,
                                                               ?next_token: ::String,
                                                               ?dry_run: bool
                                                             ) -> _GetTransitGatewayMulticastDomainAssociationsResponseSuccess
                                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayMulticastDomainAssociationsResponseSuccess

      interface _GetTransitGatewayPolicyTableAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayPolicyTableAssociationsResult]
        def associations: () -> ::Array[Types::TransitGatewayPolicyTableAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_policy_table_associations-instance_method
      def get_transit_gateway_policy_table_associations: (
                                                           transit_gateway_policy_table_id: ::String,
                                                           ?filters: Array[
                                                             {
                                                               name: ::String?,
                                                               values: Array[::String]?
                                                             },
                                                           ],
                                                           ?max_results: ::Integer,
                                                           ?next_token: ::String,
                                                           ?dry_run: bool
                                                         ) -> _GetTransitGatewayPolicyTableAssociationsResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayPolicyTableAssociationsResponseSuccess

      interface _GetTransitGatewayPolicyTableEntriesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayPolicyTableEntriesResult]
        def transit_gateway_policy_table_entries: () -> ::Array[Types::TransitGatewayPolicyTableEntry]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_policy_table_entries-instance_method
      def get_transit_gateway_policy_table_entries: (
                                                      transit_gateway_policy_table_id: ::String,
                                                      ?filters: Array[
                                                        {
                                                          name: ::String?,
                                                          values: Array[::String]?
                                                        },
                                                      ],
                                                      ?max_results: ::Integer,
                                                      ?next_token: ::String,
                                                      ?dry_run: bool
                                                    ) -> _GetTransitGatewayPolicyTableEntriesResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayPolicyTableEntriesResponseSuccess

      interface _GetTransitGatewayPrefixListReferencesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayPrefixListReferencesResult]
        def transit_gateway_prefix_list_references: () -> ::Array[Types::TransitGatewayPrefixListReference]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_prefix_list_references-instance_method
      def get_transit_gateway_prefix_list_references: (
                                                        transit_gateway_route_table_id: ::String,
                                                        ?filters: Array[
                                                          {
                                                            name: ::String?,
                                                            values: Array[::String]?
                                                          },
                                                        ],
                                                        ?max_results: ::Integer,
                                                        ?next_token: ::String,
                                                        ?dry_run: bool
                                                      ) -> _GetTransitGatewayPrefixListReferencesResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayPrefixListReferencesResponseSuccess

      interface _GetTransitGatewayRouteTableAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayRouteTableAssociationsResult]
        def associations: () -> ::Array[Types::TransitGatewayRouteTableAssociation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_route_table_associations-instance_method
      def get_transit_gateway_route_table_associations: (
                                                          transit_gateway_route_table_id: ::String,
                                                          ?filters: Array[
                                                            {
                                                              name: ::String?,
                                                              values: Array[::String]?
                                                            },
                                                          ],
                                                          ?max_results: ::Integer,
                                                          ?next_token: ::String,
                                                          ?dry_run: bool
                                                        ) -> _GetTransitGatewayRouteTableAssociationsResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayRouteTableAssociationsResponseSuccess

      interface _GetTransitGatewayRouteTablePropagationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTransitGatewayRouteTablePropagationsResult]
        def transit_gateway_route_table_propagations: () -> ::Array[Types::TransitGatewayRouteTablePropagation]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_transit_gateway_route_table_propagations-instance_method
      def get_transit_gateway_route_table_propagations: (
                                                          transit_gateway_route_table_id: ::String,
                                                          ?filters: Array[
                                                            {
                                                              name: ::String?,
                                                              values: Array[::String]?
                                                            },
                                                          ],
                                                          ?max_results: ::Integer,
                                                          ?next_token: ::String,
                                                          ?dry_run: bool
                                                        ) -> _GetTransitGatewayRouteTablePropagationsResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTransitGatewayRouteTablePropagationsResponseSuccess

      interface _GetVerifiedAccessEndpointPolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVerifiedAccessEndpointPolicyResult]
        def policy_enabled: () -> bool
        def policy_document: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_verified_access_endpoint_policy-instance_method
      def get_verified_access_endpoint_policy: (
                                                 verified_access_endpoint_id: ::String,
                                                 ?dry_run: bool
                                               ) -> _GetVerifiedAccessEndpointPolicyResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVerifiedAccessEndpointPolicyResponseSuccess

      interface _GetVerifiedAccessGroupPolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVerifiedAccessGroupPolicyResult]
        def policy_enabled: () -> bool
        def policy_document: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_verified_access_group_policy-instance_method
      def get_verified_access_group_policy: (
                                              verified_access_group_id: ::String,
                                              ?dry_run: bool
                                            ) -> _GetVerifiedAccessGroupPolicyResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVerifiedAccessGroupPolicyResponseSuccess

      interface _GetVpnConnectionDeviceSampleConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVpnConnectionDeviceSampleConfigurationResult]
        def vpn_connection_device_sample_configuration: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_vpn_connection_device_sample_configuration-instance_method
      def get_vpn_connection_device_sample_configuration: (
                                                            vpn_connection_id: ::String,
                                                            vpn_connection_device_type_id: ::String,
                                                            ?internet_key_exchange_version: ::String,
                                                            ?dry_run: bool
                                                          ) -> _GetVpnConnectionDeviceSampleConfigurationResponseSuccess
                                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVpnConnectionDeviceSampleConfigurationResponseSuccess

      interface _GetVpnConnectionDeviceTypesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVpnConnectionDeviceTypesResult]
        def vpn_connection_device_types: () -> ::Array[Types::VpnConnectionDeviceType]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_vpn_connection_device_types-instance_method
      def get_vpn_connection_device_types: (
                                             ?max_results: ::Integer,
                                             ?next_token: ::String,
                                             ?dry_run: bool
                                           ) -> _GetVpnConnectionDeviceTypesResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVpnConnectionDeviceTypesResponseSuccess

      interface _GetVpnTunnelReplacementStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetVpnTunnelReplacementStatusResult]
        def vpn_connection_id: () -> ::String
        def transit_gateway_id: () -> ::String
        def customer_gateway_id: () -> ::String
        def vpn_gateway_id: () -> ::String
        def vpn_tunnel_outside_ip_address: () -> ::String
        def maintenance_details: () -> Types::MaintenanceDetails
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#get_vpn_tunnel_replacement_status-instance_method
      def get_vpn_tunnel_replacement_status: (
                                               vpn_connection_id: ::String,
                                               vpn_tunnel_outside_ip_address: ::String,
                                               ?dry_run: bool
                                             ) -> _GetVpnTunnelReplacementStatusResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetVpnTunnelReplacementStatusResponseSuccess

      interface _ImportClientVpnClientCertificateRevocationListResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImportClientVpnClientCertificateRevocationListResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#import_client_vpn_client_certificate_revocation_list-instance_method
      def import_client_vpn_client_certificate_revocation_list: (
                                                                  client_vpn_endpoint_id: ::String,
                                                                  certificate_revocation_list: ::String,
                                                                  ?dry_run: bool
                                                                ) -> _ImportClientVpnClientCertificateRevocationListResponseSuccess
                                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ImportClientVpnClientCertificateRevocationListResponseSuccess

      interface _ImportImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImportImageResult]
        def architecture: () -> ::String
        def description: () -> ::String
        def encrypted: () -> bool
        def hypervisor: () -> ::String
        def image_id: () -> ::String
        def import_task_id: () -> ::String
        def kms_key_id: () -> ::String
        def license_type: () -> ::String
        def platform: () -> ::String
        def progress: () -> ::String
        def snapshot_details: () -> ::Array[Types::SnapshotDetail]
        def status: () -> ::String
        def status_message: () -> ::String
        def license_specifications: () -> ::Array[Types::ImportImageLicenseConfigurationResponse]
        def tags: () -> ::Array[Types::Tag]
        def usage_operation: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#import_image-instance_method
      def import_image: (
                          ?architecture: ::String,
                          ?client_data: {
                            comment: ::String?,
                            upload_end: ::Time?,
                            upload_size: ::Float?,
                            upload_start: ::Time?
                          },
                          ?client_token: ::String,
                          ?description: ::String,
                          ?disk_containers: Array[
                            {
                              description: ::String?,
                              device_name: ::String?,
                              format: ::String?,
                              snapshot_id: ::String?,
                              url: ::String?,
                              user_bucket: {
                                s3_bucket: ::String?,
                                s3_key: ::String?
                              }?
                            },
                          ],
                          ?dry_run: bool,
                          ?encrypted: bool,
                          ?hypervisor: ::String,
                          ?kms_key_id: ::String,
                          ?license_type: ::String,
                          ?platform: ::String,
                          ?role_name: ::String,
                          ?license_specifications: Array[
                            {
                              license_configuration_arn: ::String?
                            },
                          ],
                          ?tag_specifications: Array[
                            {
                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                              tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ]?
                            },
                          ],
                          ?usage_operation: ::String,
                          ?boot_mode: ("legacy-bios" | "uefi" | "uefi-preferred")
                        ) -> _ImportImageResponseSuccess
                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ImportImageResponseSuccess

      interface _ImportInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImportInstanceResult]
        def conversion_task: () -> Types::ConversionTask
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#import_instance-instance_method
      def import_instance: (
                             ?dry_run: bool,
                             ?description: ::String,
                             ?launch_specification: {
                               architecture: ("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac")?,
                               group_names: Array[::String]?,
                               group_ids: Array[::String]?,
                               additional_info: ::String?,
                               user_data: {
                                 data: ::String?
                               }?,
                               instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                               placement: {
                                 affinity: ::String?,
                                 group_name: ::String?,
                                 partition_number: ::Integer?,
                                 host_id: ::String?,
                                 tenancy: ("default" | "dedicated" | "host")?,
                                 spread_domain: ::String?,
                                 host_resource_group_arn: ::String?,
                                 group_id: ::String?,
                                 availability_zone: ::String?
                               }?,
                               monitoring: bool?,
                               subnet_id: ::String?,
                               instance_initiated_shutdown_behavior: ("stop" | "terminate")?,
                               private_ip_address: ::String?
                             },
                             ?disk_images: Array[
                               {
                                 description: ::String?,
                                 image: {
                                   format: ("VMDK" | "RAW" | "VHD"),
                                   bytes: ::Integer,
                                   import_manifest_url: ::String
                                 }?,
                                 volume: {
                                   size: ::Integer
                                 }?
                               },
                             ],
                             platform: ("Windows")
                           ) -> _ImportInstanceResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ImportInstanceResponseSuccess

      interface _ImportKeyPairResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImportKeyPairResult]
        def key_fingerprint: () -> ::String
        def key_name: () -> ::String
        def key_pair_id: () -> ::String
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#import_key_pair-instance_method
      def import_key_pair: (
                             ?tag_specifications: Array[
                               {
                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                 tags: Array[
                                   {
                                     key: ::String?,
                                     value: ::String?
                                   },
                                 ]?
                               },
                             ],
                             ?dry_run: bool,
                             key_name: ::String,
                             public_key_material: ::String
                           ) -> _ImportKeyPairResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ImportKeyPairResponseSuccess

      interface _ImportSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImportSnapshotResult]
        def description: () -> ::String
        def import_task_id: () -> ::String
        def snapshot_task_detail: () -> Types::SnapshotTaskDetail
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#import_snapshot-instance_method
      def import_snapshot: (
                             ?client_data: {
                               comment: ::String?,
                               upload_end: ::Time?,
                               upload_size: ::Float?,
                               upload_start: ::Time?
                             },
                             ?client_token: ::String,
                             ?description: ::String,
                             ?disk_container: {
                               description: ::String?,
                               format: ::String?,
                               url: ::String?,
                               user_bucket: {
                                 s3_bucket: ::String?,
                                 s3_key: ::String?
                               }?
                             },
                             ?dry_run: bool,
                             ?encrypted: bool,
                             ?kms_key_id: ::String,
                             ?role_name: ::String,
                             ?tag_specifications: Array[
                               {
                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                 tags: Array[
                                   {
                                     key: ::String?,
                                     value: ::String?
                                   },
                                 ]?
                               },
                             ]
                           ) -> _ImportSnapshotResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ImportSnapshotResponseSuccess

      interface _ImportVolumeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ImportVolumeResult]
        def conversion_task: () -> Types::ConversionTask
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#import_volume-instance_method
      def import_volume: (
                           ?dry_run: bool,
                           availability_zone: ::String,
                           image: {
                             format: ("VMDK" | "RAW" | "VHD"),
                             bytes: ::Integer,
                             import_manifest_url: ::String
                           },
                           ?description: ::String,
                           volume: {
                             size: ::Integer
                           }
                         ) -> _ImportVolumeResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ImportVolumeResponseSuccess

      interface _ListImagesInRecycleBinResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListImagesInRecycleBinResult]
        def images: () -> ::Array[Types::ImageRecycleBinInfo]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#list_images_in_recycle_bin-instance_method
      def list_images_in_recycle_bin: (
                                        ?image_ids: Array[::String],
                                        ?next_token: ::String,
                                        ?max_results: ::Integer,
                                        ?dry_run: bool
                                      ) -> _ListImagesInRecycleBinResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListImagesInRecycleBinResponseSuccess

      interface _ListSnapshotsInRecycleBinResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListSnapshotsInRecycleBinResult]
        def snapshots: () -> ::Array[Types::SnapshotRecycleBinInfo]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#list_snapshots_in_recycle_bin-instance_method
      def list_snapshots_in_recycle_bin: (
                                           ?max_results: ::Integer,
                                           ?next_token: ::String,
                                           ?snapshot_ids: Array[::String],
                                           ?dry_run: bool
                                         ) -> _ListSnapshotsInRecycleBinResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListSnapshotsInRecycleBinResponseSuccess

      interface _LockSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::LockSnapshotResult]
        def snapshot_id: () -> ::String
        def lock_state: () -> ("compliance" | "governance" | "compliance-cooloff" | "expired")
        def lock_duration: () -> ::Integer
        def cool_off_period: () -> ::Integer
        def cool_off_period_expires_on: () -> ::Time
        def lock_created_on: () -> ::Time
        def lock_expires_on: () -> ::Time
        def lock_duration_start_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#lock_snapshot-instance_method
      def lock_snapshot: (
                           snapshot_id: ::String,
                           ?dry_run: bool,
                           lock_mode: ("compliance" | "governance"),
                           ?cool_off_period: ::Integer,
                           ?lock_duration: ::Integer,
                           ?expiration_date: ::Time
                         ) -> _LockSnapshotResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _LockSnapshotResponseSuccess

      interface _ModifyAddressAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyAddressAttributeResult]
        def address: () -> Types::AddressAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_address_attribute-instance_method
      def modify_address_attribute: (
                                      allocation_id: ::String,
                                      ?domain_name: ::String,
                                      ?dry_run: bool
                                    ) -> _ModifyAddressAttributeResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyAddressAttributeResponseSuccess

      interface _ModifyAvailabilityZoneGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyAvailabilityZoneGroupResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_availability_zone_group-instance_method
      def modify_availability_zone_group: (
                                            group_name: ::String,
                                            opt_in_status: ("opted-in" | "not-opted-in"),
                                            ?dry_run: bool
                                          ) -> _ModifyAvailabilityZoneGroupResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyAvailabilityZoneGroupResponseSuccess

      interface _ModifyCapacityReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyCapacityReservationResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_capacity_reservation-instance_method
      def modify_capacity_reservation: (
                                         capacity_reservation_id: ::String,
                                         ?instance_count: ::Integer,
                                         ?end_date: ::Time,
                                         ?end_date_type: ("unlimited" | "limited"),
                                         ?accept: bool,
                                         ?dry_run: bool,
                                         ?additional_info: ::String,
                                         ?instance_match_criteria: ("open" | "targeted")
                                       ) -> _ModifyCapacityReservationResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyCapacityReservationResponseSuccess

      interface _ModifyCapacityReservationFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyCapacityReservationFleetResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_capacity_reservation_fleet-instance_method
      def modify_capacity_reservation_fleet: (
                                               capacity_reservation_fleet_id: ::String,
                                               ?total_target_capacity: ::Integer,
                                               ?end_date: ::Time,
                                               ?dry_run: bool,
                                               ?remove_end_date: bool
                                             ) -> _ModifyCapacityReservationFleetResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyCapacityReservationFleetResponseSuccess

      interface _ModifyClientVpnEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyClientVpnEndpointResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_client_vpn_endpoint-instance_method
      def modify_client_vpn_endpoint: (
                                        client_vpn_endpoint_id: ::String,
                                        ?server_certificate_arn: ::String,
                                        ?connection_log_options: {
                                          enabled: bool?,
                                          cloudwatch_log_group: ::String?,
                                          cloudwatch_log_stream: ::String?
                                        },
                                        ?dns_servers: {
                                          custom_dns_servers: Array[::String]?,
                                          enabled: bool?
                                        },
                                        ?vpn_port: ::Integer,
                                        ?description: ::String,
                                        ?split_tunnel: bool,
                                        ?dry_run: bool,
                                        ?security_group_ids: Array[::String],
                                        ?vpc_id: ::String,
                                        ?self_service_portal: ("enabled" | "disabled"),
                                        ?client_connect_options: {
                                          enabled: bool?,
                                          lambda_function_arn: ::String?
                                        },
                                        ?session_timeout_hours: ::Integer,
                                        ?client_login_banner_options: {
                                          enabled: bool?,
                                          banner_text: ::String?
                                        }
                                      ) -> _ModifyClientVpnEndpointResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyClientVpnEndpointResponseSuccess

      interface _ModifyDefaultCreditSpecificationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyDefaultCreditSpecificationResult]
        def instance_family_credit_specification: () -> Types::InstanceFamilyCreditSpecification
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_default_credit_specification-instance_method
      def modify_default_credit_specification: (
                                                 ?dry_run: bool,
                                                 instance_family: ("t2" | "t3" | "t3a" | "t4g"),
                                                 cpu_credits: ::String
                                               ) -> _ModifyDefaultCreditSpecificationResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyDefaultCreditSpecificationResponseSuccess

      interface _ModifyEbsDefaultKmsKeyIdResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyEbsDefaultKmsKeyIdResult]
        def kms_key_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_ebs_default_kms_key_id-instance_method
      def modify_ebs_default_kms_key_id: (
                                           kms_key_id: ::String,
                                           ?dry_run: bool
                                         ) -> _ModifyEbsDefaultKmsKeyIdResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyEbsDefaultKmsKeyIdResponseSuccess

      interface _ModifyFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyFleetResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_fleet-instance_method
      def modify_fleet: (
                          ?dry_run: bool,
                          ?excess_capacity_termination_policy: ("no-termination" | "termination"),
                          ?launch_template_configs: Array[
                            {
                              launch_template_specification: {
                                launch_template_id: ::String?,
                                launch_template_name: ::String?,
                                version: ::String?
                              }?,
                              overrides: Array[
                                {
                                  instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                  max_price: ::String?,
                                  subnet_id: ::String?,
                                  availability_zone: ::String?,
                                  weighted_capacity: ::Float?,
                                  priority: ::Float?,
                                  placement: {
                                    affinity: ::String?,
                                    group_name: ::String?,
                                    partition_number: ::Integer?,
                                    host_id: ::String?,
                                    tenancy: ("default" | "dedicated" | "host")?,
                                    spread_domain: ::String?,
                                    host_resource_group_arn: ::String?,
                                    group_id: ::String?,
                                    availability_zone: ::String?
                                  }?,
                                  instance_requirements: {
                                    v_cpu_count: {
                                      min: ::Integer,
                                      max: ::Integer?
                                    },
                                    memory_mi_b: {
                                      min: ::Integer,
                                      max: ::Integer?
                                    },
                                    cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                    memory_gi_b_per_v_cpu: {
                                      min: ::Float?,
                                      max: ::Float?
                                    }?,
                                    excluded_instance_types: Array[::String]?,
                                    instance_generations: Array[("current" | "previous")]?,
                                    spot_max_price_percentage_over_lowest_price: ::Integer?,
                                    on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                    bare_metal: ("included" | "required" | "excluded")?,
                                    burstable_performance: ("included" | "required" | "excluded")?,
                                    require_hibernate_support: bool?,
                                    network_interface_count: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    local_storage: ("included" | "required" | "excluded")?,
                                    local_storage_types: Array[("hdd" | "ssd")]?,
                                    total_local_storage_gb: {
                                      min: ::Float?,
                                      max: ::Float?
                                    }?,
                                    baseline_ebs_bandwidth_mbps: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                    accelerator_count: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                    accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                    accelerator_total_memory_mi_b: {
                                      min: ::Integer?,
                                      max: ::Integer?
                                    }?,
                                    network_bandwidth_gbps: {
                                      min: ::Float?,
                                      max: ::Float?
                                    }?,
                                    allowed_instance_types: Array[::String]?,
                                    max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                  }?,
                                  image_id: ::String?
                                },
                              ]?
                            },
                          ],
                          fleet_id: ::String,
                          ?target_capacity_specification: {
                            total_target_capacity: ::Integer,
                            on_demand_target_capacity: ::Integer?,
                            spot_target_capacity: ::Integer?,
                            default_target_capacity_type: ("spot" | "on-demand" | "capacity-block")?,
                            target_capacity_unit_type: ("vcpu" | "memory-mib" | "units")?
                          },
                          ?context: ::String
                        ) -> _ModifyFleetResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyFleetResponseSuccess

      interface _ModifyFpgaImageAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyFpgaImageAttributeResult]
        def fpga_image_attribute: () -> Types::FpgaImageAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_fpga_image_attribute-instance_method
      def modify_fpga_image_attribute: (
                                         ?dry_run: bool,
                                         fpga_image_id: ::String,
                                         ?attribute: ("description" | "name" | "loadPermission" | "productCodes"),
                                         ?operation_type: ("add" | "remove"),
                                         ?user_ids: Array[::String],
                                         ?user_groups: Array[::String],
                                         ?product_codes: Array[::String],
                                         ?load_permission: {
                                           add: Array[
                                             {
                                               group: ("all")?,
                                               user_id: ::String?
                                             },
                                           ]?,
                                           remove: Array[
                                             {
                                               group: ("all")?,
                                               user_id: ::String?
                                             },
                                           ]?
                                         },
                                         ?description: ::String,
                                         ?name: ::String
                                       ) -> _ModifyFpgaImageAttributeResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyFpgaImageAttributeResponseSuccess

      interface _ModifyHostsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyHostsResult]
        def successful: () -> ::Array[::String]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_hosts-instance_method
      def modify_hosts: (
                          ?host_recovery: ("on" | "off"),
                          ?instance_type: ::String,
                          ?instance_family: ::String,
                          ?host_maintenance: ("on" | "off"),
                          host_ids: Array[::String],
                          ?auto_placement: ("on" | "off")
                        ) -> _ModifyHostsResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyHostsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_id_format-instance_method
      def modify_id_format: (
                              resource: ::String,
                              use_long_ids: bool
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_identity_id_format-instance_method
      def modify_identity_id_format: (
                                       resource: ::String,
                                       use_long_ids: bool,
                                       principal_arn: ::String
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_image_attribute-instance_method
      def modify_image_attribute: (
                                    ?attribute: ::String,
                                    ?description: untyped,
                                    image_id: ::String,
                                    ?launch_permission: {
                                      add: Array[
                                        {
                                          organization_arn: ::String?,
                                          organizational_unit_arn: ::String?,
                                          user_id: ::String?,
                                          group: ("all")?
                                        },
                                      ]?,
                                      remove: Array[
                                        {
                                          organization_arn: ::String?,
                                          organizational_unit_arn: ::String?,
                                          user_id: ::String?,
                                          group: ("all")?
                                        },
                                      ]?
                                    },
                                    ?operation_type: ("add" | "remove"),
                                    ?product_codes: Array[::String],
                                    ?user_groups: Array[::String],
                                    ?user_ids: Array[::String],
                                    ?value: ::String,
                                    ?organization_arns: Array[::String],
                                    ?organizational_unit_arns: Array[::String],
                                    ?imds_support: untyped,
                                    ?dry_run: bool
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_attribute-instance_method
      def modify_instance_attribute: (
                                       ?source_dest_check: {
                                         value: bool?
                                       },
                                       ?disable_api_stop: {
                                         value: bool?
                                       },
                                       ?dry_run: bool,
                                       instance_id: ::String,
                                       ?attribute: ("instanceType" | "kernel" | "ramdisk" | "userData" | "disableApiTermination" | "instanceInitiatedShutdownBehavior" | "rootDeviceName" | "blockDeviceMapping" | "productCodes" | "sourceDestCheck" | "groupSet" | "ebsOptimized" | "sriovNetSupport" | "enaSupport" | "enclaveOptions" | "disableApiStop"),
                                       ?value: ::String,
                                       ?block_device_mappings: Array[
                                         {
                                           device_name: ::String?,
                                           ebs: {
                                             volume_id: ::String?,
                                             delete_on_termination: bool?
                                           }?,
                                           virtual_name: ::String?,
                                           no_device: ::String?
                                         },
                                       ],
                                       ?disable_api_termination: {
                                         value: bool?
                                       },
                                       ?instance_type: untyped,
                                       ?kernel: untyped,
                                       ?ramdisk: untyped,
                                       ?user_data: {
                                         value: ::String?
                                       },
                                       ?instance_initiated_shutdown_behavior: untyped,
                                       ?groups: Array[::String],
                                       ?ebs_optimized: {
                                         value: bool?
                                       },
                                       ?sriov_net_support: untyped,
                                       ?ena_support: {
                                         value: bool?
                                       }
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ModifyInstanceCapacityReservationAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceCapacityReservationAttributesResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_capacity_reservation_attributes-instance_method
      def modify_instance_capacity_reservation_attributes: (
                                                             instance_id: ::String,
                                                             capacity_reservation_specification: {
                                                               capacity_reservation_preference: ("open" | "none")?,
                                                               capacity_reservation_target: {
                                                                 capacity_reservation_id: ::String?,
                                                                 capacity_reservation_resource_group_arn: ::String?
                                                               }?
                                                             },
                                                             ?dry_run: bool
                                                           ) -> _ModifyInstanceCapacityReservationAttributesResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceCapacityReservationAttributesResponseSuccess

      interface _ModifyInstanceCpuOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceCpuOptionsResult]
        def instance_id: () -> ::String
        def core_count: () -> ::Integer
        def threads_per_core: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_cpu_options-instance_method
      def modify_instance_cpu_options: (
                                         instance_id: ::String,
                                         core_count: ::Integer,
                                         threads_per_core: ::Integer,
                                         ?dry_run: bool
                                       ) -> _ModifyInstanceCpuOptionsResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceCpuOptionsResponseSuccess

      interface _ModifyInstanceCreditSpecificationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceCreditSpecificationResult]
        def successful_instance_credit_specifications: () -> ::Array[Types::SuccessfulInstanceCreditSpecificationItem]
        def unsuccessful_instance_credit_specifications: () -> ::Array[Types::UnsuccessfulInstanceCreditSpecificationItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_credit_specification-instance_method
      def modify_instance_credit_specification: (
                                                  ?dry_run: bool,
                                                  ?client_token: ::String,
                                                  instance_credit_specifications: Array[
                                                    {
                                                      instance_id: ::String,
                                                      cpu_credits: ::String?
                                                    },
                                                  ]
                                                ) -> _ModifyInstanceCreditSpecificationResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceCreditSpecificationResponseSuccess

      interface _ModifyInstanceEventStartTimeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceEventStartTimeResult]
        def event: () -> Types::InstanceStatusEvent
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_event_start_time-instance_method
      def modify_instance_event_start_time: (
                                              ?dry_run: bool,
                                              instance_id: ::String,
                                              instance_event_id: ::String,
                                              not_before: ::Time
                                            ) -> _ModifyInstanceEventStartTimeResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceEventStartTimeResponseSuccess

      interface _ModifyInstanceEventWindowResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceEventWindowResult]
        def instance_event_window: () -> Types::InstanceEventWindow
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_event_window-instance_method
      def modify_instance_event_window: (
                                          ?dry_run: bool,
                                          ?name: ::String,
                                          instance_event_window_id: ::String,
                                          ?time_ranges: Array[
                                            {
                                              start_week_day: ("sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday")?,
                                              start_hour: ::Integer?,
                                              end_week_day: ("sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday")?,
                                              end_hour: ::Integer?
                                            },
                                          ],
                                          ?cron_expression: ::String
                                        ) -> _ModifyInstanceEventWindowResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceEventWindowResponseSuccess

      interface _ModifyInstanceMaintenanceOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceMaintenanceOptionsResult]
        def instance_id: () -> ::String
        def auto_recovery: () -> ("disabled" | "default")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_maintenance_options-instance_method
      def modify_instance_maintenance_options: (
                                                 instance_id: ::String,
                                                 ?auto_recovery: ("disabled" | "default"),
                                                 ?dry_run: bool
                                               ) -> _ModifyInstanceMaintenanceOptionsResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceMaintenanceOptionsResponseSuccess

      interface _ModifyInstanceMetadataDefaultsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceMetadataDefaultsResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_metadata_defaults-instance_method
      def modify_instance_metadata_defaults: (
                                               ?http_tokens: ("optional" | "required" | "no-preference"),
                                               ?http_put_response_hop_limit: ::Integer,
                                               ?http_endpoint: ("disabled" | "enabled" | "no-preference"),
                                               ?instance_metadata_tags: ("disabled" | "enabled" | "no-preference"),
                                               ?dry_run: bool
                                             ) -> _ModifyInstanceMetadataDefaultsResponseSuccess
                                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceMetadataDefaultsResponseSuccess

      interface _ModifyInstanceMetadataOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstanceMetadataOptionsResult]
        def instance_id: () -> ::String
        def instance_metadata_options: () -> Types::InstanceMetadataOptionsResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_metadata_options-instance_method
      def modify_instance_metadata_options: (
                                              instance_id: ::String,
                                              ?http_tokens: ("optional" | "required"),
                                              ?http_put_response_hop_limit: ::Integer,
                                              ?http_endpoint: ("disabled" | "enabled"),
                                              ?dry_run: bool,
                                              ?http_protocol_ipv_6: ("disabled" | "enabled"),
                                              ?instance_metadata_tags: ("disabled" | "enabled")
                                            ) -> _ModifyInstanceMetadataOptionsResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstanceMetadataOptionsResponseSuccess

      interface _ModifyInstancePlacementResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyInstancePlacementResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_instance_placement-instance_method
      def modify_instance_placement: (
                                       ?group_name: ::String,
                                       ?partition_number: ::Integer,
                                       ?host_resource_group_arn: ::String,
                                       ?group_id: ::String,
                                       instance_id: ::String,
                                       ?tenancy: ("default" | "dedicated" | "host"),
                                       ?affinity: ("default" | "host"),
                                       ?host_id: ::String
                                     ) -> _ModifyInstancePlacementResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyInstancePlacementResponseSuccess

      interface _ModifyIpamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyIpamResult]
        def ipam: () -> Types::Ipam
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_ipam-instance_method
      def modify_ipam: (
                         ?dry_run: bool,
                         ipam_id: ::String,
                         ?description: ::String,
                         ?add_operating_regions: Array[
                           {
                             region_name: ::String?
                           },
                         ],
                         ?remove_operating_regions: Array[
                           {
                             region_name: ::String?
                           },
                         ],
                         ?tier: ("free" | "advanced"),
                         ?enable_private_gua: bool
                       ) -> _ModifyIpamResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyIpamResponseSuccess

      interface _ModifyIpamPoolResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyIpamPoolResult]
        def ipam_pool: () -> Types::IpamPool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_ipam_pool-instance_method
      def modify_ipam_pool: (
                              ?dry_run: bool,
                              ipam_pool_id: ::String,
                              ?description: ::String,
                              ?auto_import: bool,
                              ?allocation_min_netmask_length: ::Integer,
                              ?allocation_max_netmask_length: ::Integer,
                              ?allocation_default_netmask_length: ::Integer,
                              ?clear_allocation_default_netmask_length: bool,
                              ?add_allocation_resource_tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ],
                              ?remove_allocation_resource_tags: Array[
                                {
                                  key: ::String?,
                                  value: ::String?
                                },
                              ]
                            ) -> _ModifyIpamPoolResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyIpamPoolResponseSuccess

      interface _ModifyIpamResourceCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyIpamResourceCidrResult]
        def ipam_resource_cidr: () -> Types::IpamResourceCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_ipam_resource_cidr-instance_method
      def modify_ipam_resource_cidr: (
                                       ?dry_run: bool,
                                       resource_id: ::String,
                                       resource_cidr: ::String,
                                       resource_region: ::String,
                                       current_ipam_scope_id: ::String,
                                       ?destination_ipam_scope_id: ::String,
                                       monitored: bool
                                     ) -> _ModifyIpamResourceCidrResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyIpamResourceCidrResponseSuccess

      interface _ModifyIpamResourceDiscoveryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyIpamResourceDiscoveryResult]
        def ipam_resource_discovery: () -> Types::IpamResourceDiscovery
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_ipam_resource_discovery-instance_method
      def modify_ipam_resource_discovery: (
                                            ?dry_run: bool,
                                            ipam_resource_discovery_id: ::String,
                                            ?description: ::String,
                                            ?add_operating_regions: Array[
                                              {
                                                region_name: ::String?
                                              },
                                            ],
                                            ?remove_operating_regions: Array[
                                              {
                                                region_name: ::String?
                                              },
                                            ]
                                          ) -> _ModifyIpamResourceDiscoveryResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyIpamResourceDiscoveryResponseSuccess

      interface _ModifyIpamScopeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyIpamScopeResult]
        def ipam_scope: () -> Types::IpamScope
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_ipam_scope-instance_method
      def modify_ipam_scope: (
                               ?dry_run: bool,
                               ipam_scope_id: ::String,
                               ?description: ::String
                             ) -> _ModifyIpamScopeResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyIpamScopeResponseSuccess

      interface _ModifyLaunchTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyLaunchTemplateResult]
        def launch_template: () -> Types::LaunchTemplate
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_launch_template-instance_method
      def modify_launch_template: (
                                    ?dry_run: bool,
                                    ?client_token: ::String,
                                    ?launch_template_id: ::String,
                                    ?launch_template_name: ::String,
                                    ?default_version: ::String
                                  ) -> _ModifyLaunchTemplateResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyLaunchTemplateResponseSuccess

      interface _ModifyLocalGatewayRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyLocalGatewayRouteResult]
        def route: () -> Types::LocalGatewayRoute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_local_gateway_route-instance_method
      def modify_local_gateway_route: (
                                        ?destination_cidr_block: ::String,
                                        local_gateway_route_table_id: ::String,
                                        ?local_gateway_virtual_interface_group_id: ::String,
                                        ?network_interface_id: ::String,
                                        ?dry_run: bool,
                                        ?destination_prefix_list_id: ::String
                                      ) -> _ModifyLocalGatewayRouteResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyLocalGatewayRouteResponseSuccess

      interface _ModifyManagedPrefixListResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyManagedPrefixListResult]
        def prefix_list: () -> Types::ManagedPrefixList
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_managed_prefix_list-instance_method
      def modify_managed_prefix_list: (
                                        ?dry_run: bool,
                                        prefix_list_id: ::String,
                                        ?current_version: ::Integer,
                                        ?prefix_list_name: ::String,
                                        ?add_entries: Array[
                                          {
                                            cidr: ::String,
                                            description: ::String?
                                          },
                                        ],
                                        ?remove_entries: Array[
                                          {
                                            cidr: ::String
                                          },
                                        ],
                                        ?max_entries: ::Integer
                                      ) -> _ModifyManagedPrefixListResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyManagedPrefixListResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_network_interface_attribute-instance_method
      def modify_network_interface_attribute: (
                                                ?ena_srd_specification: {
                                                  ena_srd_enabled: bool?,
                                                  ena_srd_udp_specification: {
                                                    ena_srd_udp_enabled: bool?
                                                  }?
                                                },
                                                ?enable_primary_ipv_6: bool,
                                                ?connection_tracking_specification: {
                                                  tcp_established_timeout: ::Integer?,
                                                  udp_stream_timeout: ::Integer?,
                                                  udp_timeout: ::Integer?
                                                },
                                                ?associate_public_ip_address: bool,
                                                ?dry_run: bool,
                                                network_interface_id: ::String,
                                                ?description: untyped,
                                                ?source_dest_check: {
                                                  value: bool?
                                                },
                                                ?groups: Array[::String],
                                                ?attachment: {
                                                  attachment_id: ::String?,
                                                  delete_on_termination: bool?
                                                }
                                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ModifyPrivateDnsNameOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyPrivateDnsNameOptionsResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_private_dns_name_options-instance_method
      def modify_private_dns_name_options: (
                                             ?dry_run: bool,
                                             instance_id: ::String,
                                             ?private_dns_hostname_type: ("ip-name" | "resource-name"),
                                             ?enable_resource_name_dns_a_record: bool,
                                             ?enable_resource_name_dns_aaaa_record: bool
                                           ) -> _ModifyPrivateDnsNameOptionsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyPrivateDnsNameOptionsResponseSuccess

      interface _ModifyReservedInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyReservedInstancesResult]
        def reserved_instances_modification_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_reserved_instances-instance_method
      def modify_reserved_instances: (
                                       reserved_instances_ids: Array[::String],
                                       ?client_token: ::String,
                                       target_configurations: Array[
                                         {
                                           availability_zone: ::String?,
                                           instance_count: ::Integer?,
                                           instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                           platform: ::String?,
                                           scope: ("Availability Zone" | "Region")?
                                         },
                                       ]
                                     ) -> _ModifyReservedInstancesResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyReservedInstancesResponseSuccess

      interface _ModifySecurityGroupRulesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifySecurityGroupRulesResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_security_group_rules-instance_method
      def modify_security_group_rules: (
                                         group_id: ::String,
                                         security_group_rules: Array[
                                           {
                                             security_group_rule_id: ::String,
                                             security_group_rule: {
                                               ip_protocol: ::String?,
                                               from_port: ::Integer?,
                                               to_port: ::Integer?,
                                               cidr_ipv_4: ::String?,
                                               cidr_ipv_6: ::String?,
                                               prefix_list_id: ::String?,
                                               referenced_group_id: ::String?,
                                               description: ::String?
                                             }?
                                           },
                                         ],
                                         ?dry_run: bool
                                       ) -> _ModifySecurityGroupRulesResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifySecurityGroupRulesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_snapshot_attribute-instance_method
      def modify_snapshot_attribute: (
                                       ?attribute: ("productCodes" | "createVolumePermission"),
                                       ?create_volume_permission: {
                                         add: Array[
                                           {
                                             user_id: ::String?,
                                             group: ("all")?
                                           },
                                         ]?,
                                         remove: Array[
                                           {
                                             user_id: ::String?,
                                             group: ("all")?
                                           },
                                         ]?
                                       },
                                       ?group_names: Array[::String],
                                       ?operation_type: ("add" | "remove"),
                                       snapshot_id: ::String,
                                       ?user_ids: Array[::String],
                                       ?dry_run: bool
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ModifySnapshotTierResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifySnapshotTierResult]
        def snapshot_id: () -> ::String
        def tiering_start_time: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_snapshot_tier-instance_method
      def modify_snapshot_tier: (
                                  snapshot_id: ::String,
                                  ?storage_tier: ("archive"),
                                  ?dry_run: bool
                                ) -> _ModifySnapshotTierResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifySnapshotTierResponseSuccess

      interface _ModifySpotFleetRequestResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifySpotFleetRequestResponse]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_spot_fleet_request-instance_method
      def modify_spot_fleet_request: (
                                       ?launch_template_configs: Array[
                                         {
                                           launch_template_specification: {
                                             launch_template_id: ::String?,
                                             launch_template_name: ::String?,
                                             version: ::String?
                                           }?,
                                           overrides: Array[
                                             {
                                               instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                               spot_price: ::String?,
                                               subnet_id: ::String?,
                                               availability_zone: ::String?,
                                               weighted_capacity: ::Float?,
                                               priority: ::Float?,
                                               instance_requirements: {
                                                 v_cpu_count: {
                                                   min: ::Integer?,
                                                   max: ::Integer?
                                                 }?,
                                                 memory_mi_b: {
                                                   min: ::Integer?,
                                                   max: ::Integer?
                                                 }?,
                                                 cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                                 memory_gi_b_per_v_cpu: {
                                                   min: ::Float?,
                                                   max: ::Float?
                                                 }?,
                                                 excluded_instance_types: Array[::String]?,
                                                 instance_generations: Array[("current" | "previous")]?,
                                                 spot_max_price_percentage_over_lowest_price: ::Integer?,
                                                 on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                                 bare_metal: ("included" | "required" | "excluded")?,
                                                 burstable_performance: ("included" | "required" | "excluded")?,
                                                 require_hibernate_support: bool?,
                                                 network_interface_count: {
                                                   min: ::Integer?,
                                                   max: ::Integer?
                                                 }?,
                                                 local_storage: ("included" | "required" | "excluded")?,
                                                 local_storage_types: Array[("hdd" | "ssd")]?,
                                                 total_local_storage_gb: {
                                                   min: ::Float?,
                                                   max: ::Float?
                                                 }?,
                                                 baseline_ebs_bandwidth_mbps: {
                                                   min: ::Integer?,
                                                   max: ::Integer?
                                                 }?,
                                                 accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                                 accelerator_count: {
                                                   min: ::Integer?,
                                                   max: ::Integer?
                                                 }?,
                                                 accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                                 accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                                 accelerator_total_memory_mi_b: {
                                                   min: ::Integer?,
                                                   max: ::Integer?
                                                 }?,
                                                 network_bandwidth_gbps: {
                                                   min: ::Float?,
                                                   max: ::Float?
                                                 }?,
                                                 allowed_instance_types: Array[::String]?,
                                                 max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                               }?
                                             },
                                           ]?
                                         },
                                       ],
                                       ?on_demand_target_capacity: ::Integer,
                                       ?context: ::String,
                                       spot_fleet_request_id: ::String,
                                       ?target_capacity: ::Integer,
                                       ?excess_capacity_termination_policy: ("noTermination" | "default")
                                     ) -> _ModifySpotFleetRequestResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifySpotFleetRequestResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_subnet_attribute-instance_method
      def modify_subnet_attribute: (
                                     ?assign_ipv_6_address_on_creation: {
                                       value: bool?
                                     },
                                     ?map_public_ip_on_launch: {
                                       value: bool?
                                     },
                                     subnet_id: ::String,
                                     ?map_customer_owned_ip_on_launch: {
                                       value: bool?
                                     },
                                     ?customer_owned_ipv_4_pool: ::String,
                                     ?enable_dns_64: {
                                       value: bool?
                                     },
                                     ?private_dns_hostname_type_on_launch: ("ip-name" | "resource-name"),
                                     ?enable_resource_name_dns_a_record_on_launch: {
                                       value: bool?
                                     },
                                     ?enable_resource_name_dns_aaaa_record_on_launch: {
                                       value: bool?
                                     },
                                     ?enable_lni_at_device_index: ::Integer,
                                     ?disable_lni_at_device_index: {
                                       value: bool?
                                     }
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ModifyTrafficMirrorFilterNetworkServicesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTrafficMirrorFilterNetworkServicesResult]
        def traffic_mirror_filter: () -> Types::TrafficMirrorFilter
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_traffic_mirror_filter_network_services-instance_method
      def modify_traffic_mirror_filter_network_services: (
                                                           traffic_mirror_filter_id: ::String,
                                                           ?add_network_services: Array[("amazon-dns")],
                                                           ?remove_network_services: Array[("amazon-dns")],
                                                           ?dry_run: bool
                                                         ) -> _ModifyTrafficMirrorFilterNetworkServicesResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTrafficMirrorFilterNetworkServicesResponseSuccess

      interface _ModifyTrafficMirrorFilterRuleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTrafficMirrorFilterRuleResult]
        def traffic_mirror_filter_rule: () -> Types::TrafficMirrorFilterRule
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_traffic_mirror_filter_rule-instance_method
      def modify_traffic_mirror_filter_rule: (
                                               traffic_mirror_filter_rule_id: ::String,
                                               ?traffic_direction: ("ingress" | "egress"),
                                               ?rule_number: ::Integer,
                                               ?rule_action: ("accept" | "reject"),
                                               ?destination_port_range: {
                                                 from_port: ::Integer?,
                                                 to_port: ::Integer?
                                               },
                                               ?source_port_range: {
                                                 from_port: ::Integer?,
                                                 to_port: ::Integer?
                                               },
                                               ?protocol: ::Integer,
                                               ?destination_cidr_block: ::String,
                                               ?source_cidr_block: ::String,
                                               ?description: ::String,
                                               ?remove_fields: Array[("destination-port-range" | "source-port-range" | "protocol" | "description")],
                                               ?dry_run: bool
                                             ) -> _ModifyTrafficMirrorFilterRuleResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTrafficMirrorFilterRuleResponseSuccess

      interface _ModifyTrafficMirrorSessionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTrafficMirrorSessionResult]
        def traffic_mirror_session: () -> Types::TrafficMirrorSession
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_traffic_mirror_session-instance_method
      def modify_traffic_mirror_session: (
                                           traffic_mirror_session_id: ::String,
                                           ?traffic_mirror_target_id: ::String,
                                           ?traffic_mirror_filter_id: ::String,
                                           ?packet_length: ::Integer,
                                           ?session_number: ::Integer,
                                           ?virtual_network_id: ::Integer,
                                           ?description: ::String,
                                           ?remove_fields: Array[("packet-length" | "description" | "virtual-network-id")],
                                           ?dry_run: bool
                                         ) -> _ModifyTrafficMirrorSessionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTrafficMirrorSessionResponseSuccess

      interface _ModifyTransitGatewayResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTransitGatewayResult]
        def transit_gateway: () -> Types::TransitGateway
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_transit_gateway-instance_method
      def modify_transit_gateway: (
                                    transit_gateway_id: ::String,
                                    ?description: ::String,
                                    ?options: {
                                      add_transit_gateway_cidr_blocks: Array[::String]?,
                                      remove_transit_gateway_cidr_blocks: Array[::String]?,
                                      vpn_ecmp_support: ("enable" | "disable")?,
                                      dns_support: ("enable" | "disable")?,
                                      security_group_referencing_support: ("enable" | "disable")?,
                                      auto_accept_shared_attachments: ("enable" | "disable")?,
                                      default_route_table_association: ("enable" | "disable")?,
                                      association_default_route_table_id: ::String?,
                                      default_route_table_propagation: ("enable" | "disable")?,
                                      propagation_default_route_table_id: ::String?,
                                      amazon_side_asn: ::Integer?
                                    },
                                    ?dry_run: bool
                                  ) -> _ModifyTransitGatewayResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTransitGatewayResponseSuccess

      interface _ModifyTransitGatewayPrefixListReferenceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTransitGatewayPrefixListReferenceResult]
        def transit_gateway_prefix_list_reference: () -> Types::TransitGatewayPrefixListReference
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_transit_gateway_prefix_list_reference-instance_method
      def modify_transit_gateway_prefix_list_reference: (
                                                          transit_gateway_route_table_id: ::String,
                                                          prefix_list_id: ::String,
                                                          ?transit_gateway_attachment_id: ::String,
                                                          ?blackhole: bool,
                                                          ?dry_run: bool
                                                        ) -> _ModifyTransitGatewayPrefixListReferenceResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTransitGatewayPrefixListReferenceResponseSuccess

      interface _ModifyTransitGatewayVpcAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyTransitGatewayVpcAttachmentResult]
        def transit_gateway_vpc_attachment: () -> Types::TransitGatewayVpcAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_transit_gateway_vpc_attachment-instance_method
      def modify_transit_gateway_vpc_attachment: (
                                                   transit_gateway_attachment_id: ::String,
                                                   ?add_subnet_ids: Array[::String],
                                                   ?remove_subnet_ids: Array[::String],
                                                   ?options: {
                                                     dns_support: ("enable" | "disable")?,
                                                     security_group_referencing_support: ("enable" | "disable")?,
                                                     ipv_6_support: ("enable" | "disable")?,
                                                     appliance_mode_support: ("enable" | "disable")?
                                                   },
                                                   ?dry_run: bool
                                                 ) -> _ModifyTransitGatewayVpcAttachmentResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyTransitGatewayVpcAttachmentResponseSuccess

      interface _ModifyVerifiedAccessEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessEndpointResult]
        def verified_access_endpoint: () -> Types::VerifiedAccessEndpoint
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_endpoint-instance_method
      def modify_verified_access_endpoint: (
                                             verified_access_endpoint_id: ::String,
                                             ?verified_access_group_id: ::String,
                                             ?load_balancer_options: {
                                               subnet_ids: Array[::String]?,
                                               protocol: ("http" | "https")?,
                                               port: ::Integer?
                                             },
                                             ?network_interface_options: {
                                               protocol: ("http" | "https")?,
                                               port: ::Integer?
                                             },
                                             ?description: ::String,
                                             ?client_token: ::String,
                                             ?dry_run: bool
                                           ) -> _ModifyVerifiedAccessEndpointResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessEndpointResponseSuccess

      interface _ModifyVerifiedAccessEndpointPolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessEndpointPolicyResult]
        def policy_enabled: () -> bool
        def policy_document: () -> ::String
        def sse_specification: () -> Types::VerifiedAccessSseSpecificationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_endpoint_policy-instance_method
      def modify_verified_access_endpoint_policy: (
                                                    verified_access_endpoint_id: ::String,
                                                    ?policy_enabled: bool,
                                                    ?policy_document: ::String,
                                                    ?client_token: ::String,
                                                    ?dry_run: bool,
                                                    ?sse_specification: {
                                                      customer_managed_key_enabled: bool?,
                                                      kms_key_arn: ::String?
                                                    }
                                                  ) -> _ModifyVerifiedAccessEndpointPolicyResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessEndpointPolicyResponseSuccess

      interface _ModifyVerifiedAccessGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessGroupResult]
        def verified_access_group: () -> Types::VerifiedAccessGroup
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_group-instance_method
      def modify_verified_access_group: (
                                          verified_access_group_id: ::String,
                                          ?verified_access_instance_id: ::String,
                                          ?description: ::String,
                                          ?client_token: ::String,
                                          ?dry_run: bool
                                        ) -> _ModifyVerifiedAccessGroupResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessGroupResponseSuccess

      interface _ModifyVerifiedAccessGroupPolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessGroupPolicyResult]
        def policy_enabled: () -> bool
        def policy_document: () -> ::String
        def sse_specification: () -> Types::VerifiedAccessSseSpecificationResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_group_policy-instance_method
      def modify_verified_access_group_policy: (
                                                 verified_access_group_id: ::String,
                                                 ?policy_enabled: bool,
                                                 ?policy_document: ::String,
                                                 ?client_token: ::String,
                                                 ?dry_run: bool,
                                                 ?sse_specification: {
                                                   customer_managed_key_enabled: bool?,
                                                   kms_key_arn: ::String?
                                                 }
                                               ) -> _ModifyVerifiedAccessGroupPolicyResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessGroupPolicyResponseSuccess

      interface _ModifyVerifiedAccessInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessInstanceResult]
        def verified_access_instance: () -> Types::VerifiedAccessInstance
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_instance-instance_method
      def modify_verified_access_instance: (
                                             verified_access_instance_id: ::String,
                                             ?description: ::String,
                                             ?dry_run: bool,
                                             ?client_token: ::String
                                           ) -> _ModifyVerifiedAccessInstanceResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessInstanceResponseSuccess

      interface _ModifyVerifiedAccessInstanceLoggingConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessInstanceLoggingConfigurationResult]
        def logging_configuration: () -> Types::VerifiedAccessInstanceLoggingConfiguration
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_instance_logging_configuration-instance_method
      def modify_verified_access_instance_logging_configuration: (
                                                                   verified_access_instance_id: ::String,
                                                                   access_logs: {
                                                                     s3: {
                                                                       enabled: bool,
                                                                       bucket_name: ::String?,
                                                                       prefix: ::String?,
                                                                       bucket_owner: ::String?
                                                                     }?,
                                                                     cloud_watch_logs: {
                                                                       enabled: bool,
                                                                       log_group: ::String?
                                                                     }?,
                                                                     kinesis_data_firehose: {
                                                                       enabled: bool,
                                                                       delivery_stream: ::String?
                                                                     }?,
                                                                     log_version: ::String?,
                                                                     include_trust_context: bool?
                                                                   },
                                                                   ?dry_run: bool,
                                                                   ?client_token: ::String
                                                                 ) -> _ModifyVerifiedAccessInstanceLoggingConfigurationResponseSuccess
                                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessInstanceLoggingConfigurationResponseSuccess

      interface _ModifyVerifiedAccessTrustProviderResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVerifiedAccessTrustProviderResult]
        def verified_access_trust_provider: () -> Types::VerifiedAccessTrustProvider
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_verified_access_trust_provider-instance_method
      def modify_verified_access_trust_provider: (
                                                   verified_access_trust_provider_id: ::String,
                                                   ?oidc_options: {
                                                     issuer: ::String?,
                                                     authorization_endpoint: ::String?,
                                                     token_endpoint: ::String?,
                                                     user_info_endpoint: ::String?,
                                                     client_id: ::String?,
                                                     client_secret: ::String?,
                                                     scope: ::String?
                                                   },
                                                   ?device_options: {
                                                     public_signing_key_url: ::String?
                                                   },
                                                   ?description: ::String,
                                                   ?dry_run: bool,
                                                   ?client_token: ::String,
                                                   ?sse_specification: {
                                                     customer_managed_key_enabled: bool?,
                                                     kms_key_arn: ::String?
                                                   }
                                                 ) -> _ModifyVerifiedAccessTrustProviderResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVerifiedAccessTrustProviderResponseSuccess

      interface _ModifyVolumeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVolumeResult]
        def volume_modification: () -> Types::VolumeModification
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_volume-instance_method
      def modify_volume: (
                           ?dry_run: bool,
                           volume_id: ::String,
                           ?size: ::Integer,
                           ?volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3"),
                           ?iops: ::Integer,
                           ?throughput: ::Integer,
                           ?multi_attach_enabled: bool
                         ) -> _ModifyVolumeResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVolumeResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_volume_attribute-instance_method
      def modify_volume_attribute: (
                                     ?auto_enable_io: {
                                       value: bool?
                                     },
                                     volume_id: ::String,
                                     ?dry_run: bool
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_attribute-instance_method
      def modify_vpc_attribute: (
                                  ?enable_dns_hostnames: {
                                    value: bool?
                                  },
                                  ?enable_dns_support: {
                                    value: bool?
                                  },
                                  vpc_id: ::String,
                                  ?enable_network_address_usage_metrics: {
                                    value: bool?
                                  }
                                ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ModifyVpcEndpointResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcEndpointResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_endpoint-instance_method
      def modify_vpc_endpoint: (
                                 ?dry_run: bool,
                                 vpc_endpoint_id: ::String,
                                 ?reset_policy: bool,
                                 ?policy_document: ::String,
                                 ?add_route_table_ids: Array[::String],
                                 ?remove_route_table_ids: Array[::String],
                                 ?add_subnet_ids: Array[::String],
                                 ?remove_subnet_ids: Array[::String],
                                 ?add_security_group_ids: Array[::String],
                                 ?remove_security_group_ids: Array[::String],
                                 ?ip_address_type: ("ipv4" | "dualstack" | "ipv6"),
                                 ?dns_options: {
                                   dns_record_ip_type: ("ipv4" | "dualstack" | "ipv6" | "service-defined")?,
                                   private_dns_only_for_inbound_resolver_endpoint: bool?
                                 },
                                 ?private_dns_enabled: bool,
                                 ?subnet_configurations: Array[
                                   {
                                     subnet_id: ::String?,
                                     ipv_4: ::String?,
                                     ipv_6: ::String?
                                   },
                                 ]
                               ) -> _ModifyVpcEndpointResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcEndpointResponseSuccess

      interface _ModifyVpcEndpointConnectionNotificationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcEndpointConnectionNotificationResult]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_endpoint_connection_notification-instance_method
      def modify_vpc_endpoint_connection_notification: (
                                                         ?dry_run: bool,
                                                         connection_notification_id: ::String,
                                                         ?connection_notification_arn: ::String,
                                                         ?connection_events: Array[::String]
                                                       ) -> _ModifyVpcEndpointConnectionNotificationResponseSuccess
                                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcEndpointConnectionNotificationResponseSuccess

      interface _ModifyVpcEndpointServiceConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcEndpointServiceConfigurationResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_endpoint_service_configuration-instance_method
      def modify_vpc_endpoint_service_configuration: (
                                                       ?dry_run: bool,
                                                       service_id: ::String,
                                                       ?private_dns_name: ::String,
                                                       ?remove_private_dns_name: bool,
                                                       ?acceptance_required: bool,
                                                       ?add_network_load_balancer_arns: Array[::String],
                                                       ?remove_network_load_balancer_arns: Array[::String],
                                                       ?add_gateway_load_balancer_arns: Array[::String],
                                                       ?remove_gateway_load_balancer_arns: Array[::String],
                                                       ?add_supported_ip_address_types: Array[::String],
                                                       ?remove_supported_ip_address_types: Array[::String]
                                                     ) -> _ModifyVpcEndpointServiceConfigurationResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcEndpointServiceConfigurationResponseSuccess

      interface _ModifyVpcEndpointServicePayerResponsibilityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcEndpointServicePayerResponsibilityResult]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_endpoint_service_payer_responsibility-instance_method
      def modify_vpc_endpoint_service_payer_responsibility: (
                                                              ?dry_run: bool,
                                                              service_id: ::String,
                                                              payer_responsibility: ("ServiceOwner")
                                                            ) -> _ModifyVpcEndpointServicePayerResponsibilityResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcEndpointServicePayerResponsibilityResponseSuccess

      interface _ModifyVpcEndpointServicePermissionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcEndpointServicePermissionsResult]
        def added_principals: () -> ::Array[Types::AddedPrincipal]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_endpoint_service_permissions-instance_method
      def modify_vpc_endpoint_service_permissions: (
                                                     ?dry_run: bool,
                                                     service_id: ::String,
                                                     ?add_allowed_principals: Array[::String],
                                                     ?remove_allowed_principals: Array[::String]
                                                   ) -> _ModifyVpcEndpointServicePermissionsResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcEndpointServicePermissionsResponseSuccess

      interface _ModifyVpcPeeringConnectionOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcPeeringConnectionOptionsResult]
        def accepter_peering_connection_options: () -> Types::PeeringConnectionOptions
        def requester_peering_connection_options: () -> Types::PeeringConnectionOptions
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_peering_connection_options-instance_method
      def modify_vpc_peering_connection_options: (
                                                   ?accepter_peering_connection_options: {
                                                     allow_dns_resolution_from_remote_vpc: bool?,
                                                     allow_egress_from_local_classic_link_to_remote_vpc: bool?,
                                                     allow_egress_from_local_vpc_to_remote_classic_link: bool?
                                                   },
                                                   ?dry_run: bool,
                                                   ?requester_peering_connection_options: {
                                                     allow_dns_resolution_from_remote_vpc: bool?,
                                                     allow_egress_from_local_classic_link_to_remote_vpc: bool?,
                                                     allow_egress_from_local_vpc_to_remote_classic_link: bool?
                                                   },
                                                   vpc_peering_connection_id: ::String
                                                 ) -> _ModifyVpcPeeringConnectionOptionsResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcPeeringConnectionOptionsResponseSuccess

      interface _ModifyVpcTenancyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpcTenancyResult]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpc_tenancy-instance_method
      def modify_vpc_tenancy: (
                                vpc_id: ::String,
                                instance_tenancy: ("default"),
                                ?dry_run: bool
                              ) -> _ModifyVpcTenancyResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpcTenancyResponseSuccess

      interface _ModifyVpnConnectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpnConnectionResult]
        def vpn_connection: () -> Types::VpnConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpn_connection-instance_method
      def modify_vpn_connection: (
                                   vpn_connection_id: ::String,
                                   ?transit_gateway_id: ::String,
                                   ?customer_gateway_id: ::String,
                                   ?vpn_gateway_id: ::String,
                                   ?dry_run: bool
                                 ) -> _ModifyVpnConnectionResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpnConnectionResponseSuccess

      interface _ModifyVpnConnectionOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpnConnectionOptionsResult]
        def vpn_connection: () -> Types::VpnConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpn_connection_options-instance_method
      def modify_vpn_connection_options: (
                                           vpn_connection_id: ::String,
                                           ?local_ipv_4_network_cidr: ::String,
                                           ?remote_ipv_4_network_cidr: ::String,
                                           ?local_ipv_6_network_cidr: ::String,
                                           ?remote_ipv_6_network_cidr: ::String,
                                           ?dry_run: bool
                                         ) -> _ModifyVpnConnectionOptionsResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpnConnectionOptionsResponseSuccess

      interface _ModifyVpnTunnelCertificateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpnTunnelCertificateResult]
        def vpn_connection: () -> Types::VpnConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpn_tunnel_certificate-instance_method
      def modify_vpn_tunnel_certificate: (
                                           vpn_connection_id: ::String,
                                           vpn_tunnel_outside_ip_address: ::String,
                                           ?dry_run: bool
                                         ) -> _ModifyVpnTunnelCertificateResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpnTunnelCertificateResponseSuccess

      interface _ModifyVpnTunnelOptionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ModifyVpnTunnelOptionsResult]
        def vpn_connection: () -> Types::VpnConnection
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#modify_vpn_tunnel_options-instance_method
      def modify_vpn_tunnel_options: (
                                       vpn_connection_id: ::String,
                                       vpn_tunnel_outside_ip_address: ::String,
                                       tunnel_options: {
                                         tunnel_inside_cidr: ::String?,
                                         tunnel_inside_ipv_6_cidr: ::String?,
                                         pre_shared_key: ::String?,
                                         phase_1_lifetime_seconds: ::Integer?,
                                         phase_2_lifetime_seconds: ::Integer?,
                                         rekey_margin_time_seconds: ::Integer?,
                                         rekey_fuzz_percentage: ::Integer?,
                                         replay_window_size: ::Integer?,
                                         dpd_timeout_seconds: ::Integer?,
                                         dpd_timeout_action: ::String?,
                                         phase_1_encryption_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_2_encryption_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_1_integrity_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_2_integrity_algorithms: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         phase_1_dh_group_numbers: Array[
                                           {
                                             value: ::Integer?
                                           },
                                         ]?,
                                         phase_2_dh_group_numbers: Array[
                                           {
                                             value: ::Integer?
                                           },
                                         ]?,
                                         ike_versions: Array[
                                           {
                                             value: ::String?
                                           },
                                         ]?,
                                         startup_action: ::String?,
                                         log_options: {
                                           cloud_watch_log_options: {
                                             log_enabled: bool?,
                                             log_group_arn: ::String?,
                                             log_output_format: ::String?
                                           }?
                                         }?,
                                         enable_tunnel_lifecycle_control: bool?
                                       },
                                       ?dry_run: bool,
                                       ?skip_tunnel_replacement: bool
                                     ) -> _ModifyVpnTunnelOptionsResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ModifyVpnTunnelOptionsResponseSuccess

      interface _MonitorInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::MonitorInstancesResult]
        def instance_monitorings: () -> ::Array[Types::InstanceMonitoring]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#monitor_instances-instance_method
      def monitor_instances: (
                               instance_ids: Array[::String],
                               ?dry_run: bool
                             ) -> _MonitorInstancesResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _MonitorInstancesResponseSuccess

      interface _MoveAddressToVpcResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::MoveAddressToVpcResult]
        def allocation_id: () -> ::String
        def status: () -> ("MoveInProgress" | "InVpc" | "InClassic")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#move_address_to_vpc-instance_method
      def move_address_to_vpc: (
                                 ?dry_run: bool,
                                 public_ip: ::String
                               ) -> _MoveAddressToVpcResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _MoveAddressToVpcResponseSuccess

      interface _MoveByoipCidrToIpamResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::MoveByoipCidrToIpamResult]
        def byoip_cidr: () -> Types::ByoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#move_byoip_cidr_to_ipam-instance_method
      def move_byoip_cidr_to_ipam: (
                                     ?dry_run: bool,
                                     cidr: ::String,
                                     ipam_pool_id: ::String,
                                     ipam_pool_owner: ::String
                                   ) -> _MoveByoipCidrToIpamResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _MoveByoipCidrToIpamResponseSuccess

      interface _MoveCapacityReservationInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::MoveCapacityReservationInstancesResult]
        def source_capacity_reservation: () -> Types::CapacityReservation
        def destination_capacity_reservation: () -> Types::CapacityReservation
        def instance_count: () -> ::Integer
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#move_capacity_reservation_instances-instance_method
      def move_capacity_reservation_instances: (
                                                 ?dry_run: bool,
                                                 ?client_token: ::String,
                                                 source_capacity_reservation_id: ::String,
                                                 destination_capacity_reservation_id: ::String,
                                                 instance_count: ::Integer
                                               ) -> _MoveCapacityReservationInstancesResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _MoveCapacityReservationInstancesResponseSuccess

      interface _ProvisionByoipCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ProvisionByoipCidrResult]
        def byoip_cidr: () -> Types::ByoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#provision_byoip_cidr-instance_method
      def provision_byoip_cidr: (
                                  cidr: ::String,
                                  ?cidr_authorization_context: {
                                    message: ::String,
                                    signature: ::String
                                  },
                                  ?publicly_advertisable: bool,
                                  ?description: ::String,
                                  ?dry_run: bool,
                                  ?pool_tag_specifications: Array[
                                    {
                                      resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                      tags: Array[
                                        {
                                          key: ::String?,
                                          value: ::String?
                                        },
                                      ]?
                                    },
                                  ],
                                  ?multi_region: bool,
                                  ?network_border_group: ::String
                                ) -> _ProvisionByoipCidrResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ProvisionByoipCidrResponseSuccess

      interface _ProvisionIpamByoasnResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ProvisionIpamByoasnResult]
        def byoasn: () -> Types::Byoasn
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#provision_ipam_byoasn-instance_method
      def provision_ipam_byoasn: (
                                   ?dry_run: bool,
                                   ipam_id: ::String,
                                   asn: ::String,
                                   asn_authorization_context: {
                                     message: ::String,
                                     signature: ::String
                                   }
                                 ) -> _ProvisionIpamByoasnResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ProvisionIpamByoasnResponseSuccess

      interface _ProvisionIpamPoolCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ProvisionIpamPoolCidrResult]
        def ipam_pool_cidr: () -> Types::IpamPoolCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#provision_ipam_pool_cidr-instance_method
      def provision_ipam_pool_cidr: (
                                      ?dry_run: bool,
                                      ipam_pool_id: ::String,
                                      ?cidr: ::String,
                                      ?cidr_authorization_context: {
                                        message: ::String?,
                                        signature: ::String?
                                      },
                                      ?netmask_length: ::Integer,
                                      ?client_token: ::String,
                                      ?verification_method: ("remarks-x509" | "dns-token"),
                                      ?ipam_external_resource_verification_token_id: ::String
                                    ) -> _ProvisionIpamPoolCidrResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ProvisionIpamPoolCidrResponseSuccess

      interface _ProvisionPublicIpv4PoolCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ProvisionPublicIpv4PoolCidrResult]
        def pool_id: () -> ::String
        def pool_address_range: () -> Types::PublicIpv4PoolRange
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#provision_public_ipv_4_pool_cidr-instance_method
      def provision_public_ipv_4_pool_cidr: (
                                              ?dry_run: bool,
                                              ipam_pool_id: ::String,
                                              pool_id: ::String,
                                              netmask_length: ::Integer,
                                              ?network_border_group: ::String
                                            ) -> _ProvisionPublicIpv4PoolCidrResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ProvisionPublicIpv4PoolCidrResponseSuccess

      interface _PurchaseCapacityBlockResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PurchaseCapacityBlockResult]
        def capacity_reservation: () -> Types::CapacityReservation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#purchase_capacity_block-instance_method
      def purchase_capacity_block: (
                                     ?dry_run: bool,
                                     ?tag_specifications: Array[
                                       {
                                         resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                         tags: Array[
                                           {
                                             key: ::String?,
                                             value: ::String?
                                           },
                                         ]?
                                       },
                                     ],
                                     capacity_block_offering_id: ::String,
                                     instance_platform: ("Linux/UNIX" | "Red Hat Enterprise Linux" | "SUSE Linux" | "Windows" | "Windows with SQL Server" | "Windows with SQL Server Enterprise" | "Windows with SQL Server Standard" | "Windows with SQL Server Web" | "Linux with SQL Server Standard" | "Linux with SQL Server Web" | "Linux with SQL Server Enterprise" | "RHEL with SQL Server Standard" | "RHEL with SQL Server Enterprise" | "RHEL with SQL Server Web" | "RHEL with HA" | "RHEL with HA and SQL Server Standard" | "RHEL with HA and SQL Server Enterprise" | "Ubuntu Pro")
                                   ) -> _PurchaseCapacityBlockResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PurchaseCapacityBlockResponseSuccess

      interface _PurchaseHostReservationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PurchaseHostReservationResult]
        def client_token: () -> ::String
        def currency_code: () -> ("USD")
        def purchase: () -> ::Array[Types::Purchase]
        def total_hourly_price: () -> ::String
        def total_upfront_price: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#purchase_host_reservation-instance_method
      def purchase_host_reservation: (
                                       ?client_token: ::String,
                                       ?currency_code: ("USD"),
                                       host_id_set: Array[::String],
                                       ?limit_price: ::String,
                                       offering_id: ::String,
                                       ?tag_specifications: Array[
                                         {
                                           resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                           tags: Array[
                                             {
                                               key: ::String?,
                                               value: ::String?
                                             },
                                           ]?
                                         },
                                       ]
                                     ) -> _PurchaseHostReservationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PurchaseHostReservationResponseSuccess

      interface _PurchaseReservedInstancesOfferingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PurchaseReservedInstancesOfferingResult]
        def reserved_instances_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#purchase_reserved_instances_offering-instance_method
      def purchase_reserved_instances_offering: (
                                                  instance_count: ::Integer,
                                                  reserved_instances_offering_id: ::String,
                                                  ?purchase_time: ::Time,
                                                  ?dry_run: bool,
                                                  ?limit_price: {
                                                    amount: ::Float?,
                                                    currency_code: ("USD")?
                                                  }
                                                ) -> _PurchaseReservedInstancesOfferingResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PurchaseReservedInstancesOfferingResponseSuccess

      interface _PurchaseScheduledInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PurchaseScheduledInstancesResult]
        def scheduled_instance_set: () -> ::Array[Types::ScheduledInstance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#purchase_scheduled_instances-instance_method
      def purchase_scheduled_instances: (
                                          ?client_token: ::String,
                                          ?dry_run: bool,
                                          purchase_requests: Array[
                                            {
                                              instance_count: ::Integer,
                                              purchase_token: ::String
                                            },
                                          ]
                                        ) -> _PurchaseScheduledInstancesResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PurchaseScheduledInstancesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reboot_instances-instance_method
      def reboot_instances: (
                              instance_ids: Array[::String],
                              ?dry_run: bool
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _RegisterImageResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterImageResult]
        def image_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#register_image-instance_method
      def register_image: (
                            ?image_location: ::String,
                            ?billing_products: Array[::String],
                            ?boot_mode: ("legacy-bios" | "uefi" | "uefi-preferred"),
                            ?tpm_support: ("v2.0"),
                            ?uefi_data: ::String,
                            ?imds_support: ("v2.0"),
                            ?tag_specifications: Array[
                              {
                                resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                tags: Array[
                                  {
                                    key: ::String?,
                                    value: ::String?
                                  },
                                ]?
                              },
                            ],
                            ?dry_run: bool,
                            name: ::String,
                            ?description: ::String,
                            ?architecture: ("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac"),
                            ?kernel_id: ::String,
                            ?ramdisk_id: ::String,
                            ?root_device_name: ::String,
                            ?block_device_mappings: Array[
                              {
                                ebs: {
                                  delete_on_termination: bool?,
                                  iops: ::Integer?,
                                  snapshot_id: ::String?,
                                  volume_size: ::Integer?,
                                  volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                  kms_key_id: ::String?,
                                  throughput: ::Integer?,
                                  outpost_arn: ::String?,
                                  encrypted: bool?
                                }?,
                                no_device: ::String?,
                                device_name: ::String?,
                                virtual_name: ::String?
                              },
                            ],
                            ?virtualization_type: ::String,
                            ?sriov_net_support: ::String,
                            ?ena_support: bool
                          ) -> _RegisterImageResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterImageResponseSuccess

      interface _RegisterInstanceEventNotificationAttributesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterInstanceEventNotificationAttributesResult]
        def instance_tag_attribute: () -> Types::InstanceTagNotificationAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#register_instance_event_notification_attributes-instance_method
      def register_instance_event_notification_attributes: (
                                                             ?dry_run: bool,
                                                             instance_tag_attribute: {
                                                               include_all_tags_of_instance: bool?,
                                                               instance_tag_keys: Array[::String]?
                                                             }
                                                           ) -> _RegisterInstanceEventNotificationAttributesResponseSuccess
                                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterInstanceEventNotificationAttributesResponseSuccess

      interface _RegisterTransitGatewayMulticastGroupMembersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterTransitGatewayMulticastGroupMembersResult]
        def registered_multicast_group_members: () -> Types::TransitGatewayMulticastRegisteredGroupMembers
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#register_transit_gateway_multicast_group_members-instance_method
      def register_transit_gateway_multicast_group_members: (
                                                              transit_gateway_multicast_domain_id: ::String,
                                                              ?group_ip_address: ::String,
                                                              network_interface_ids: Array[::String],
                                                              ?dry_run: bool
                                                            ) -> _RegisterTransitGatewayMulticastGroupMembersResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterTransitGatewayMulticastGroupMembersResponseSuccess

      interface _RegisterTransitGatewayMulticastGroupSourcesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterTransitGatewayMulticastGroupSourcesResult]
        def registered_multicast_group_sources: () -> Types::TransitGatewayMulticastRegisteredGroupSources
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#register_transit_gateway_multicast_group_sources-instance_method
      def register_transit_gateway_multicast_group_sources: (
                                                              transit_gateway_multicast_domain_id: ::String,
                                                              ?group_ip_address: ::String,
                                                              network_interface_ids: Array[::String],
                                                              ?dry_run: bool
                                                            ) -> _RegisterTransitGatewayMulticastGroupSourcesResponseSuccess
                                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterTransitGatewayMulticastGroupSourcesResponseSuccess

      interface _RejectCapacityReservationBillingOwnershipResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectCapacityReservationBillingOwnershipResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reject_capacity_reservation_billing_ownership-instance_method
      def reject_capacity_reservation_billing_ownership: (
                                                           ?dry_run: bool,
                                                           capacity_reservation_id: ::String
                                                         ) -> _RejectCapacityReservationBillingOwnershipResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectCapacityReservationBillingOwnershipResponseSuccess

      interface _RejectTransitGatewayMulticastDomainAssociationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectTransitGatewayMulticastDomainAssociationsResult]
        def associations: () -> Types::TransitGatewayMulticastDomainAssociations
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reject_transit_gateway_multicast_domain_associations-instance_method
      def reject_transit_gateway_multicast_domain_associations: (
                                                                  ?transit_gateway_multicast_domain_id: ::String,
                                                                  ?transit_gateway_attachment_id: ::String,
                                                                  ?subnet_ids: Array[::String],
                                                                  ?dry_run: bool
                                                                ) -> _RejectTransitGatewayMulticastDomainAssociationsResponseSuccess
                                                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectTransitGatewayMulticastDomainAssociationsResponseSuccess

      interface _RejectTransitGatewayPeeringAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectTransitGatewayPeeringAttachmentResult]
        def transit_gateway_peering_attachment: () -> Types::TransitGatewayPeeringAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reject_transit_gateway_peering_attachment-instance_method
      def reject_transit_gateway_peering_attachment: (
                                                       transit_gateway_attachment_id: ::String,
                                                       ?dry_run: bool
                                                     ) -> _RejectTransitGatewayPeeringAttachmentResponseSuccess
                                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectTransitGatewayPeeringAttachmentResponseSuccess

      interface _RejectTransitGatewayVpcAttachmentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectTransitGatewayVpcAttachmentResult]
        def transit_gateway_vpc_attachment: () -> Types::TransitGatewayVpcAttachment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reject_transit_gateway_vpc_attachment-instance_method
      def reject_transit_gateway_vpc_attachment: (
                                                   transit_gateway_attachment_id: ::String,
                                                   ?dry_run: bool
                                                 ) -> _RejectTransitGatewayVpcAttachmentResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectTransitGatewayVpcAttachmentResponseSuccess

      interface _RejectVpcEndpointConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectVpcEndpointConnectionsResult]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reject_vpc_endpoint_connections-instance_method
      def reject_vpc_endpoint_connections: (
                                             ?dry_run: bool,
                                             service_id: ::String,
                                             vpc_endpoint_ids: Array[::String]
                                           ) -> _RejectVpcEndpointConnectionsResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectVpcEndpointConnectionsResponseSuccess

      interface _RejectVpcPeeringConnectionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RejectVpcPeeringConnectionResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reject_vpc_peering_connection-instance_method
      def reject_vpc_peering_connection: (
                                           ?dry_run: bool,
                                           vpc_peering_connection_id: ::String
                                         ) -> _RejectVpcPeeringConnectionResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RejectVpcPeeringConnectionResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#release_address-instance_method
      def release_address: (
                             ?allocation_id: ::String,
                             ?public_ip: ::String,
                             ?network_border_group: ::String,
                             ?dry_run: bool
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ReleaseHostsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReleaseHostsResult]
        def successful: () -> ::Array[::String]
        def unsuccessful: () -> ::Array[Types::UnsuccessfulItem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#release_hosts-instance_method
      def release_hosts: (
                           host_ids: Array[::String]
                         ) -> _ReleaseHostsResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReleaseHostsResponseSuccess

      interface _ReleaseIpamPoolAllocationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReleaseIpamPoolAllocationResult]
        def success: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#release_ipam_pool_allocation-instance_method
      def release_ipam_pool_allocation: (
                                          ?dry_run: bool,
                                          ipam_pool_id: ::String,
                                          cidr: ::String,
                                          ipam_pool_allocation_id: ::String
                                        ) -> _ReleaseIpamPoolAllocationResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReleaseIpamPoolAllocationResponseSuccess

      interface _ReplaceIamInstanceProfileAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReplaceIamInstanceProfileAssociationResult]
        def iam_instance_profile_association: () -> Types::IamInstanceProfileAssociation
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_iam_instance_profile_association-instance_method
      def replace_iam_instance_profile_association: (
                                                      iam_instance_profile: {
                                                        arn: ::String?,
                                                        name: ::String?
                                                      },
                                                      association_id: ::String
                                                    ) -> _ReplaceIamInstanceProfileAssociationResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReplaceIamInstanceProfileAssociationResponseSuccess

      interface _ReplaceNetworkAclAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReplaceNetworkAclAssociationResult]
        def new_association_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_network_acl_association-instance_method
      def replace_network_acl_association: (
                                             ?dry_run: bool,
                                             association_id: ::String,
                                             network_acl_id: ::String
                                           ) -> _ReplaceNetworkAclAssociationResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReplaceNetworkAclAssociationResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_network_acl_entry-instance_method
      def replace_network_acl_entry: (
                                       ?dry_run: bool,
                                       network_acl_id: ::String,
                                       rule_number: ::Integer,
                                       protocol: ::String,
                                       rule_action: ("allow" | "deny"),
                                       egress: bool,
                                       ?cidr_block: ::String,
                                       ?ipv_6_cidr_block: ::String,
                                       ?icmp_type_code: {
                                         code: ::Integer?,
                                         type: ::Integer?
                                       },
                                       ?port_range: {
                                         from: ::Integer?,
                                         to: ::Integer?
                                       }
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_route-instance_method
      def replace_route: (
                           ?destination_prefix_list_id: ::String,
                           ?vpc_endpoint_id: ::String,
                           ?local_target: bool,
                           ?transit_gateway_id: ::String,
                           ?local_gateway_id: ::String,
                           ?carrier_gateway_id: ::String,
                           ?core_network_arn: ::String,
                           ?dry_run: bool,
                           route_table_id: ::String,
                           ?destination_cidr_block: ::String,
                           ?gateway_id: ::String,
                           ?destination_ipv_6_cidr_block: ::String,
                           ?egress_only_internet_gateway_id: ::String,
                           ?instance_id: ::String,
                           ?network_interface_id: ::String,
                           ?vpc_peering_connection_id: ::String,
                           ?nat_gateway_id: ::String
                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _ReplaceRouteTableAssociationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReplaceRouteTableAssociationResult]
        def new_association_id: () -> ::String
        def association_state: () -> Types::RouteTableAssociationState
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_route_table_association-instance_method
      def replace_route_table_association: (
                                             ?dry_run: bool,
                                             association_id: ::String,
                                             route_table_id: ::String
                                           ) -> _ReplaceRouteTableAssociationResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReplaceRouteTableAssociationResponseSuccess

      interface _ReplaceTransitGatewayRouteResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReplaceTransitGatewayRouteResult]
        def route: () -> Types::TransitGatewayRoute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_transit_gateway_route-instance_method
      def replace_transit_gateway_route: (
                                           destination_cidr_block: ::String,
                                           transit_gateway_route_table_id: ::String,
                                           ?transit_gateway_attachment_id: ::String,
                                           ?blackhole: bool,
                                           ?dry_run: bool
                                         ) -> _ReplaceTransitGatewayRouteResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReplaceTransitGatewayRouteResponseSuccess

      interface _ReplaceVpnTunnelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ReplaceVpnTunnelResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#replace_vpn_tunnel-instance_method
      def replace_vpn_tunnel: (
                                vpn_connection_id: ::String,
                                vpn_tunnel_outside_ip_address: ::String,
                                ?apply_pending_maintenance: bool,
                                ?dry_run: bool
                              ) -> _ReplaceVpnTunnelResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ReplaceVpnTunnelResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#report_instance_status-instance_method
      def report_instance_status: (
                                    ?dry_run: bool,
                                    instances: Array[::String],
                                    status: ("ok" | "impaired"),
                                    ?start_time: ::Time,
                                    ?end_time: ::Time,
                                    reason_codes: Array[("instance-stuck-in-state" | "unresponsive" | "not-accepting-credentials" | "password-not-available" | "performance-network" | "performance-instance-store" | "performance-ebs-volume" | "performance-other" | "other")],
                                    ?description: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _RequestSpotFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RequestSpotFleetResponse]
        def spot_fleet_request_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#request_spot_fleet-instance_method
      def request_spot_fleet: (
                                ?dry_run: bool,
                                spot_fleet_request_config: {
                                  allocation_strategy: ("lowestPrice" | "diversified" | "capacityOptimized" | "capacityOptimizedPrioritized" | "priceCapacityOptimized")?,
                                  on_demand_allocation_strategy: ("lowestPrice" | "prioritized")?,
                                  spot_maintenance_strategies: {
                                    capacity_rebalance: {
                                      replacement_strategy: ("launch" | "launch-before-terminate")?,
                                      termination_delay: ::Integer?
                                    }?
                                  }?,
                                  client_token: ::String?,
                                  excess_capacity_termination_policy: ("noTermination" | "default")?,
                                  fulfilled_capacity: ::Float?,
                                  on_demand_fulfilled_capacity: ::Float?,
                                  iam_fleet_role: ::String,
                                  launch_specifications: Array[
                                    {
                                      addressing_type: ::String?,
                                      block_device_mappings: Array[
                                        {
                                          ebs: {
                                            delete_on_termination: bool?,
                                            iops: ::Integer?,
                                            snapshot_id: ::String?,
                                            volume_size: ::Integer?,
                                            volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                            kms_key_id: ::String?,
                                            throughput: ::Integer?,
                                            outpost_arn: ::String?,
                                            encrypted: bool?
                                          }?,
                                          no_device: ::String?,
                                          device_name: ::String?,
                                          virtual_name: ::String?
                                        },
                                      ]?,
                                      ebs_optimized: bool?,
                                      iam_instance_profile: {
                                        arn: ::String?,
                                        name: ::String?
                                      }?,
                                      image_id: ::String?,
                                      instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                      kernel_id: ::String?,
                                      key_name: ::String?,
                                      monitoring: {
                                        enabled: bool?
                                      }?,
                                      network_interfaces: Array[
                                        {
                                          associate_public_ip_address: bool?,
                                          delete_on_termination: bool?,
                                          description: ::String?,
                                          device_index: ::Integer?,
                                          groups: Array[::String]?,
                                          ipv_6_address_count: ::Integer?,
                                          ipv_6_addresses: Array[
                                            {
                                              ipv_6_address: ::String?,
                                              is_primary_ipv_6: bool?
                                            },
                                          ]?,
                                          network_interface_id: ::String?,
                                          private_ip_address: ::String?,
                                          private_ip_addresses: Array[
                                            {
                                              primary: bool?,
                                              private_ip_address: ::String?
                                            },
                                          ]?,
                                          secondary_private_ip_address_count: ::Integer?,
                                          subnet_id: ::String?,
                                          associate_carrier_ip_address: bool?,
                                          interface_type: ::String?,
                                          network_card_index: ::Integer?,
                                          ipv_4_prefixes: Array[
                                            {
                                              ipv_4_prefix: ::String?
                                            },
                                          ]?,
                                          ipv_4_prefix_count: ::Integer?,
                                          ipv_6_prefixes: Array[
                                            {
                                              ipv_6_prefix: ::String?
                                            },
                                          ]?,
                                          ipv_6_prefix_count: ::Integer?,
                                          primary_ipv_6: bool?,
                                          ena_srd_specification: {
                                            ena_srd_enabled: bool?,
                                            ena_srd_udp_specification: {
                                              ena_srd_udp_enabled: bool?
                                            }?
                                          }?,
                                          connection_tracking_specification: {
                                            tcp_established_timeout: ::Integer?,
                                            udp_stream_timeout: ::Integer?,
                                            udp_timeout: ::Integer?
                                          }?
                                        },
                                      ]?,
                                      placement: {
                                        availability_zone: ::String?,
                                        group_name: ::String?,
                                        tenancy: ("default" | "dedicated" | "host")?
                                      }?,
                                      ramdisk_id: ::String?,
                                      spot_price: ::String?,
                                      subnet_id: ::String?,
                                      user_data: ::String?,
                                      weighted_capacity: ::Float?,
                                      tag_specifications: Array[
                                        {
                                          resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                          tags: Array[
                                            {
                                              key: ::String?,
                                              value: ::String?
                                            },
                                          ]?
                                        },
                                      ]?,
                                      instance_requirements: {
                                        v_cpu_count: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        memory_mi_b: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                        memory_gi_b_per_v_cpu: {
                                          min: ::Float?,
                                          max: ::Float?
                                        }?,
                                        excluded_instance_types: Array[::String]?,
                                        instance_generations: Array[("current" | "previous")]?,
                                        spot_max_price_percentage_over_lowest_price: ::Integer?,
                                        on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                        bare_metal: ("included" | "required" | "excluded")?,
                                        burstable_performance: ("included" | "required" | "excluded")?,
                                        require_hibernate_support: bool?,
                                        network_interface_count: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        local_storage: ("included" | "required" | "excluded")?,
                                        local_storage_types: Array[("hdd" | "ssd")]?,
                                        total_local_storage_gb: {
                                          min: ::Float?,
                                          max: ::Float?
                                        }?,
                                        baseline_ebs_bandwidth_mbps: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                        accelerator_count: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                        accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                        accelerator_total_memory_mi_b: {
                                          min: ::Integer?,
                                          max: ::Integer?
                                        }?,
                                        network_bandwidth_gbps: {
                                          min: ::Float?,
                                          max: ::Float?
                                        }?,
                                        allowed_instance_types: Array[::String]?,
                                        max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                      }?,
                                      security_groups: Array[
                                        {
                                          group_id: ::String?,
                                          group_name: ::String?
                                        },
                                      ]?
                                    },
                                  ]?,
                                  launch_template_configs: Array[
                                    {
                                      launch_template_specification: {
                                        launch_template_id: ::String?,
                                        launch_template_name: ::String?,
                                        version: ::String?
                                      }?,
                                      overrides: Array[
                                        {
                                          instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                          spot_price: ::String?,
                                          subnet_id: ::String?,
                                          availability_zone: ::String?,
                                          weighted_capacity: ::Float?,
                                          priority: ::Float?,
                                          instance_requirements: {
                                            v_cpu_count: {
                                              min: ::Integer?,
                                              max: ::Integer?
                                            }?,
                                            memory_mi_b: {
                                              min: ::Integer?,
                                              max: ::Integer?
                                            }?,
                                            cpu_manufacturers: Array[("intel" | "amd" | "amazon-web-services")]?,
                                            memory_gi_b_per_v_cpu: {
                                              min: ::Float?,
                                              max: ::Float?
                                            }?,
                                            excluded_instance_types: Array[::String]?,
                                            instance_generations: Array[("current" | "previous")]?,
                                            spot_max_price_percentage_over_lowest_price: ::Integer?,
                                            on_demand_max_price_percentage_over_lowest_price: ::Integer?,
                                            bare_metal: ("included" | "required" | "excluded")?,
                                            burstable_performance: ("included" | "required" | "excluded")?,
                                            require_hibernate_support: bool?,
                                            network_interface_count: {
                                              min: ::Integer?,
                                              max: ::Integer?
                                            }?,
                                            local_storage: ("included" | "required" | "excluded")?,
                                            local_storage_types: Array[("hdd" | "ssd")]?,
                                            total_local_storage_gb: {
                                              min: ::Float?,
                                              max: ::Float?
                                            }?,
                                            baseline_ebs_bandwidth_mbps: {
                                              min: ::Integer?,
                                              max: ::Integer?
                                            }?,
                                            accelerator_types: Array[("gpu" | "fpga" | "inference")]?,
                                            accelerator_count: {
                                              min: ::Integer?,
                                              max: ::Integer?
                                            }?,
                                            accelerator_manufacturers: Array[("amazon-web-services" | "amd" | "nvidia" | "xilinx" | "habana")]?,
                                            accelerator_names: Array[("a100" | "inferentia" | "k520" | "k80" | "m60" | "radeon-pro-v520" | "t4" | "vu9p" | "v100" | "a10g" | "h100" | "t4g")]?,
                                            accelerator_total_memory_mi_b: {
                                              min: ::Integer?,
                                              max: ::Integer?
                                            }?,
                                            network_bandwidth_gbps: {
                                              min: ::Float?,
                                              max: ::Float?
                                            }?,
                                            allowed_instance_types: Array[::String]?,
                                            max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer?
                                          }?
                                        },
                                      ]?
                                    },
                                  ]?,
                                  spot_price: ::String?,
                                  target_capacity: ::Integer,
                                  on_demand_target_capacity: ::Integer?,
                                  on_demand_max_total_price: ::String?,
                                  spot_max_total_price: ::String?,
                                  terminate_instances_with_expiration: bool?,
                                  type: ("request" | "maintain" | "instant")?,
                                  valid_from: ::Time?,
                                  valid_until: ::Time?,
                                  replace_unhealthy_instances: bool?,
                                  instance_interruption_behavior: ("hibernate" | "stop" | "terminate")?,
                                  load_balancers_config: {
                                    classic_load_balancers_config: {
                                      classic_load_balancers: Array[
                                        {
                                          name: ::String?
                                        },
                                      ]?
                                    }?,
                                    target_groups_config: {
                                      target_groups: Array[
                                        {
                                          arn: ::String?
                                        },
                                      ]?
                                    }?
                                  }?,
                                  instance_pools_to_use_count: ::Integer?,
                                  context: ::String?,
                                  target_capacity_unit_type: ("vcpu" | "memory-mib" | "units")?,
                                  tag_specifications: Array[
                                    {
                                      resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                      tags: Array[
                                        {
                                          key: ::String?,
                                          value: ::String?
                                        },
                                      ]?
                                    },
                                  ]?
                                }
                              ) -> _RequestSpotFleetResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RequestSpotFleetResponseSuccess

      interface _RequestSpotInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RequestSpotInstancesResult]
        def spot_instance_requests: () -> ::Array[Types::SpotInstanceRequest]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#request_spot_instances-instance_method
      def request_spot_instances: (
                                    ?launch_specification: {
                                      security_group_ids: Array[::String]?,
                                      security_groups: Array[::String]?,
                                      addressing_type: ::String?,
                                      block_device_mappings: Array[
                                        {
                                          ebs: {
                                            delete_on_termination: bool?,
                                            iops: ::Integer?,
                                            snapshot_id: ::String?,
                                            volume_size: ::Integer?,
                                            volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                            kms_key_id: ::String?,
                                            throughput: ::Integer?,
                                            outpost_arn: ::String?,
                                            encrypted: bool?
                                          }?,
                                          no_device: ::String?,
                                          device_name: ::String?,
                                          virtual_name: ::String?
                                        },
                                      ]?,
                                      ebs_optimized: bool?,
                                      iam_instance_profile: {
                                        arn: ::String?,
                                        name: ::String?
                                      }?,
                                      image_id: ::String?,
                                      instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge")?,
                                      kernel_id: ::String?,
                                      key_name: ::String?,
                                      monitoring: {
                                        enabled: bool
                                      }?,
                                      network_interfaces: Array[
                                        {
                                          associate_public_ip_address: bool?,
                                          delete_on_termination: bool?,
                                          description: ::String?,
                                          device_index: ::Integer?,
                                          groups: Array[::String]?,
                                          ipv_6_address_count: ::Integer?,
                                          ipv_6_addresses: Array[
                                            {
                                              ipv_6_address: ::String?,
                                              is_primary_ipv_6: bool?
                                            },
                                          ]?,
                                          network_interface_id: ::String?,
                                          private_ip_address: ::String?,
                                          private_ip_addresses: Array[
                                            {
                                              primary: bool?,
                                              private_ip_address: ::String?
                                            },
                                          ]?,
                                          secondary_private_ip_address_count: ::Integer?,
                                          subnet_id: ::String?,
                                          associate_carrier_ip_address: bool?,
                                          interface_type: ::String?,
                                          network_card_index: ::Integer?,
                                          ipv_4_prefixes: Array[
                                            {
                                              ipv_4_prefix: ::String?
                                            },
                                          ]?,
                                          ipv_4_prefix_count: ::Integer?,
                                          ipv_6_prefixes: Array[
                                            {
                                              ipv_6_prefix: ::String?
                                            },
                                          ]?,
                                          ipv_6_prefix_count: ::Integer?,
                                          primary_ipv_6: bool?,
                                          ena_srd_specification: {
                                            ena_srd_enabled: bool?,
                                            ena_srd_udp_specification: {
                                              ena_srd_udp_enabled: bool?
                                            }?
                                          }?,
                                          connection_tracking_specification: {
                                            tcp_established_timeout: ::Integer?,
                                            udp_stream_timeout: ::Integer?,
                                            udp_timeout: ::Integer?
                                          }?
                                        },
                                      ]?,
                                      placement: {
                                        availability_zone: ::String?,
                                        group_name: ::String?,
                                        tenancy: ("default" | "dedicated" | "host")?
                                      }?,
                                      ramdisk_id: ::String?,
                                      subnet_id: ::String?,
                                      user_data: ::String?
                                    },
                                    ?tag_specifications: Array[
                                      {
                                        resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                        tags: Array[
                                          {
                                            key: ::String?,
                                            value: ::String?
                                          },
                                        ]?
                                      },
                                    ],
                                    ?instance_interruption_behavior: ("hibernate" | "stop" | "terminate"),
                                    ?dry_run: bool,
                                    ?spot_price: ::String,
                                    ?client_token: ::String,
                                    ?instance_count: ::Integer,
                                    ?type: ("one-time" | "persistent"),
                                    ?valid_from: ::Time,
                                    ?valid_until: ::Time,
                                    ?launch_group: ::String,
                                    ?availability_zone_group: ::String,
                                    ?block_duration_minutes: ::Integer
                                  ) -> _RequestSpotInstancesResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RequestSpotInstancesResponseSuccess

      interface _ResetAddressAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ResetAddressAttributeResult]
        def address: () -> Types::AddressAttribute
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_address_attribute-instance_method
      def reset_address_attribute: (
                                     allocation_id: ::String,
                                     attribute: ("domain-name"),
                                     ?dry_run: bool
                                   ) -> _ResetAddressAttributeResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ResetAddressAttributeResponseSuccess

      interface _ResetEbsDefaultKmsKeyIdResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ResetEbsDefaultKmsKeyIdResult]
        def kms_key_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_ebs_default_kms_key_id-instance_method
      def reset_ebs_default_kms_key_id: (
                                          ?dry_run: bool
                                        ) -> _ResetEbsDefaultKmsKeyIdResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ResetEbsDefaultKmsKeyIdResponseSuccess

      interface _ResetFpgaImageAttributeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ResetFpgaImageAttributeResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_fpga_image_attribute-instance_method
      def reset_fpga_image_attribute: (
                                        ?dry_run: bool,
                                        fpga_image_id: ::String,
                                        ?attribute: ("loadPermission")
                                      ) -> _ResetFpgaImageAttributeResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ResetFpgaImageAttributeResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_image_attribute-instance_method
      def reset_image_attribute: (
                                   attribute: ("launchPermission"),
                                   image_id: ::String,
                                   ?dry_run: bool
                                 ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_instance_attribute-instance_method
      def reset_instance_attribute: (
                                      ?dry_run: bool,
                                      instance_id: ::String,
                                      attribute: ("instanceType" | "kernel" | "ramdisk" | "userData" | "disableApiTermination" | "instanceInitiatedShutdownBehavior" | "rootDeviceName" | "blockDeviceMapping" | "productCodes" | "sourceDestCheck" | "groupSet" | "ebsOptimized" | "sriovNetSupport" | "enaSupport" | "enclaveOptions" | "disableApiStop")
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_network_interface_attribute-instance_method
      def reset_network_interface_attribute: (
                                               ?dry_run: bool,
                                               network_interface_id: ::String,
                                               ?source_dest_check: ::String
                                             ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#reset_snapshot_attribute-instance_method
      def reset_snapshot_attribute: (
                                      attribute: ("productCodes" | "createVolumePermission"),
                                      snapshot_id: ::String,
                                      ?dry_run: bool
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _RestoreAddressToClassicResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreAddressToClassicResult]
        def public_ip: () -> ::String
        def status: () -> ("MoveInProgress" | "InVpc" | "InClassic")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#restore_address_to_classic-instance_method
      def restore_address_to_classic: (
                                        ?dry_run: bool,
                                        public_ip: ::String
                                      ) -> _RestoreAddressToClassicResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreAddressToClassicResponseSuccess

      interface _RestoreImageFromRecycleBinResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreImageFromRecycleBinResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#restore_image_from_recycle_bin-instance_method
      def restore_image_from_recycle_bin: (
                                            image_id: ::String,
                                            ?dry_run: bool
                                          ) -> _RestoreImageFromRecycleBinResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreImageFromRecycleBinResponseSuccess

      interface _RestoreManagedPrefixListVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreManagedPrefixListVersionResult]
        def prefix_list: () -> Types::ManagedPrefixList
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#restore_managed_prefix_list_version-instance_method
      def restore_managed_prefix_list_version: (
                                                 ?dry_run: bool,
                                                 prefix_list_id: ::String,
                                                 previous_version: ::Integer,
                                                 current_version: ::Integer
                                               ) -> _RestoreManagedPrefixListVersionResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreManagedPrefixListVersionResponseSuccess

      interface _RestoreSnapshotFromRecycleBinResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreSnapshotFromRecycleBinResult]
        def snapshot_id: () -> ::String
        def outpost_arn: () -> ::String
        def description: () -> ::String
        def encrypted: () -> bool
        def owner_id: () -> ::String
        def progress: () -> ::String
        def start_time: () -> ::Time
        def state: () -> ("pending" | "completed" | "error" | "recoverable" | "recovering")
        def volume_id: () -> ::String
        def volume_size: () -> ::Integer
        def sse_type: () -> ("sse-ebs" | "sse-kms" | "none")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#restore_snapshot_from_recycle_bin-instance_method
      def restore_snapshot_from_recycle_bin: (
                                               snapshot_id: ::String,
                                               ?dry_run: bool
                                             ) -> _RestoreSnapshotFromRecycleBinResponseSuccess
                                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreSnapshotFromRecycleBinResponseSuccess

      interface _RestoreSnapshotTierResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestoreSnapshotTierResult]
        def snapshot_id: () -> ::String
        def restore_start_time: () -> ::Time
        def restore_duration: () -> ::Integer
        def is_permanent_restore: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#restore_snapshot_tier-instance_method
      def restore_snapshot_tier: (
                                   snapshot_id: ::String,
                                   ?temporary_restore_days: ::Integer,
                                   ?permanent_restore: bool,
                                   ?dry_run: bool
                                 ) -> _RestoreSnapshotTierResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestoreSnapshotTierResponseSuccess

      interface _RevokeClientVpnIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RevokeClientVpnIngressResult]
        def status: () -> Types::ClientVpnAuthorizationRuleStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#revoke_client_vpn_ingress-instance_method
      def revoke_client_vpn_ingress: (
                                       client_vpn_endpoint_id: ::String,
                                       target_network_cidr: ::String,
                                       ?access_group_id: ::String,
                                       ?revoke_all_groups: bool,
                                       ?dry_run: bool
                                     ) -> _RevokeClientVpnIngressResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RevokeClientVpnIngressResponseSuccess

      interface _RevokeSecurityGroupEgressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RevokeSecurityGroupEgressResult]
        def return: () -> bool
        def unknown_ip_permissions: () -> ::Array[Types::IpPermission]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#revoke_security_group_egress-instance_method
      def revoke_security_group_egress: (
                                          ?security_group_rule_ids: Array[::String],
                                          ?dry_run: bool,
                                          group_id: ::String,
                                          ?source_security_group_name: ::String,
                                          ?source_security_group_owner_id: ::String,
                                          ?ip_protocol: ::String,
                                          ?from_port: ::Integer,
                                          ?to_port: ::Integer,
                                          ?cidr_ip: ::String,
                                          ?ip_permissions: Array[
                                            {
                                              ip_protocol: ::String?,
                                              from_port: ::Integer?,
                                              to_port: ::Integer?,
                                              user_id_group_pairs: Array[
                                                {
                                                  description: ::String?,
                                                  user_id: ::String?,
                                                  group_name: ::String?,
                                                  group_id: ::String?,
                                                  vpc_id: ::String?,
                                                  vpc_peering_connection_id: ::String?,
                                                  peering_status: ::String?
                                                },
                                              ]?,
                                              ip_ranges: Array[
                                                {
                                                  description: ::String?,
                                                  cidr_ip: ::String?
                                                },
                                              ]?,
                                              ipv_6_ranges: Array[
                                                {
                                                  description: ::String?,
                                                  cidr_ipv_6: ::String?
                                                },
                                              ]?,
                                              prefix_list_ids: Array[
                                                {
                                                  description: ::String?,
                                                  prefix_list_id: ::String?
                                                },
                                              ]?
                                            },
                                          ]
                                        ) -> _RevokeSecurityGroupEgressResponseSuccess
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RevokeSecurityGroupEgressResponseSuccess

      interface _RevokeSecurityGroupIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RevokeSecurityGroupIngressResult]
        def return: () -> bool
        def unknown_ip_permissions: () -> ::Array[Types::IpPermission]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#revoke_security_group_ingress-instance_method
      def revoke_security_group_ingress: (
                                           ?cidr_ip: ::String,
                                           ?from_port: ::Integer,
                                           ?group_id: ::String,
                                           ?group_name: ::String,
                                           ?ip_permissions: Array[
                                             {
                                               ip_protocol: ::String?,
                                               from_port: ::Integer?,
                                               to_port: ::Integer?,
                                               user_id_group_pairs: Array[
                                                 {
                                                   description: ::String?,
                                                   user_id: ::String?,
                                                   group_name: ::String?,
                                                   group_id: ::String?,
                                                   vpc_id: ::String?,
                                                   vpc_peering_connection_id: ::String?,
                                                   peering_status: ::String?
                                                 },
                                               ]?,
                                               ip_ranges: Array[
                                                 {
                                                   description: ::String?,
                                                   cidr_ip: ::String?
                                                 },
                                               ]?,
                                               ipv_6_ranges: Array[
                                                 {
                                                   description: ::String?,
                                                   cidr_ipv_6: ::String?
                                                 },
                                               ]?,
                                               prefix_list_ids: Array[
                                                 {
                                                   description: ::String?,
                                                   prefix_list_id: ::String?
                                                 },
                                               ]?
                                             },
                                           ],
                                           ?ip_protocol: ::String,
                                           ?source_security_group_name: ::String,
                                           ?source_security_group_owner_id: ::String,
                                           ?to_port: ::Integer,
                                           ?security_group_rule_ids: Array[::String],
                                           ?dry_run: bool
                                         ) -> _RevokeSecurityGroupIngressResponseSuccess
                                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RevokeSecurityGroupIngressResponseSuccess

      interface _RunInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::Reservation]
        def reservation_id: () -> ::String
        def owner_id: () -> ::String
        def requester_id: () -> ::String
        def groups: () -> ::Array[Types::GroupIdentifier]
        def instances: () -> ::Array[Types::Instance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#run_instances-instance_method
      def run_instances: (
                           ?block_device_mappings: Array[
                             {
                               ebs: {
                                 delete_on_termination: bool?,
                                 iops: ::Integer?,
                                 snapshot_id: ::String?,
                                 volume_size: ::Integer?,
                                 volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3")?,
                                 kms_key_id: ::String?,
                                 throughput: ::Integer?,
                                 outpost_arn: ::String?,
                                 encrypted: bool?
                               }?,
                               no_device: ::String?,
                               device_name: ::String?,
                               virtual_name: ::String?
                             },
                           ],
                           ?image_id: ::String,
                           ?instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl" | "c7gd.metal" | "m7gd.metal" | "r7gd.metal" | "g6.xlarge" | "g6.2xlarge" | "g6.4xlarge" | "g6.8xlarge" | "g6.12xlarge" | "g6.16xlarge" | "g6.24xlarge" | "g6.48xlarge" | "gr6.4xlarge" | "gr6.8xlarge" | "c7i-flex.large" | "c7i-flex.xlarge" | "c7i-flex.2xlarge" | "c7i-flex.4xlarge" | "c7i-flex.8xlarge" | "u7i-12tb.224xlarge" | "u7in-16tb.224xlarge" | "u7in-24tb.224xlarge" | "u7in-32tb.224xlarge" | "u7ib-12tb.224xlarge" | "c7gn.metal" | "r8g.medium" | "r8g.large" | "r8g.xlarge" | "r8g.2xlarge" | "r8g.4xlarge" | "r8g.8xlarge" | "r8g.12xlarge" | "r8g.16xlarge" | "r8g.24xlarge" | "r8g.48xlarge" | "r8g.metal-24xl" | "r8g.metal-48xl" | "mac2-m1ultra.metal" | "g6e.xlarge" | "g6e.2xlarge" | "g6e.4xlarge" | "g6e.8xlarge" | "g6e.12xlarge" | "g6e.16xlarge" | "g6e.24xlarge" | "g6e.48xlarge"),
                           ?ipv_6_address_count: ::Integer,
                           ?ipv_6_addresses: Array[
                             {
                               ipv_6_address: ::String?,
                               is_primary_ipv_6: bool?
                             },
                           ],
                           ?kernel_id: ::String,
                           ?key_name: ::String,
                           max_count: ::Integer,
                           min_count: ::Integer,
                           ?monitoring: {
                             enabled: bool
                           },
                           ?placement: {
                             affinity: ::String?,
                             group_name: ::String?,
                             partition_number: ::Integer?,
                             host_id: ::String?,
                             tenancy: ("default" | "dedicated" | "host")?,
                             spread_domain: ::String?,
                             host_resource_group_arn: ::String?,
                             group_id: ::String?,
                             availability_zone: ::String?
                           },
                           ?ramdisk_id: ::String,
                           ?security_group_ids: Array[::String],
                           ?security_groups: Array[::String],
                           ?subnet_id: ::String,
                           ?user_data: ::String,
                           ?elastic_gpu_specification: Array[
                             {
                               type: ::String
                             },
                           ],
                           ?elastic_inference_accelerators: Array[
                             {
                               type: ::String,
                               count: ::Integer?
                             },
                           ],
                           ?tag_specifications: Array[
                             {
                               resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                               tags: Array[
                                 {
                                   key: ::String?,
                                   value: ::String?
                                 },
                               ]?
                             },
                           ],
                           ?launch_template: {
                             launch_template_id: ::String?,
                             launch_template_name: ::String?,
                             version: ::String?
                           },
                           ?instance_market_options: {
                             market_type: ("spot" | "capacity-block")?,
                             spot_options: {
                               max_price: ::String?,
                               spot_instance_type: ("one-time" | "persistent")?,
                               block_duration_minutes: ::Integer?,
                               valid_until: ::Time?,
                               instance_interruption_behavior: ("hibernate" | "stop" | "terminate")?
                             }?
                           },
                           ?credit_specification: {
                             cpu_credits: ::String
                           },
                           ?cpu_options: {
                             core_count: ::Integer?,
                             threads_per_core: ::Integer?,
                             amd_sev_snp: ("enabled" | "disabled")?
                           },
                           ?capacity_reservation_specification: {
                             capacity_reservation_preference: ("open" | "none")?,
                             capacity_reservation_target: {
                               capacity_reservation_id: ::String?,
                               capacity_reservation_resource_group_arn: ::String?
                             }?
                           },
                           ?hibernation_options: {
                             configured: bool?
                           },
                           ?license_specifications: Array[
                             {
                               license_configuration_arn: ::String?
                             },
                           ],
                           ?metadata_options: {
                             http_tokens: ("optional" | "required")?,
                             http_put_response_hop_limit: ::Integer?,
                             http_endpoint: ("disabled" | "enabled")?,
                             http_protocol_ipv_6: ("disabled" | "enabled")?,
                             instance_metadata_tags: ("disabled" | "enabled")?
                           },
                           ?enclave_options: {
                             enabled: bool?
                           },
                           ?private_dns_name_options: {
                             hostname_type: ("ip-name" | "resource-name")?,
                             enable_resource_name_dns_a_record: bool?,
                             enable_resource_name_dns_aaaa_record: bool?
                           },
                           ?maintenance_options: {
                             auto_recovery: ("disabled" | "default")?
                           },
                           ?disable_api_stop: bool,
                           ?enable_primary_ipv_6: bool,
                           ?dry_run: bool,
                           ?disable_api_termination: bool,
                           ?instance_initiated_shutdown_behavior: ("stop" | "terminate"),
                           ?private_ip_address: ::String,
                           ?client_token: ::String,
                           ?additional_info: ::String,
                           ?network_interfaces: Array[
                             {
                               associate_public_ip_address: bool?,
                               delete_on_termination: bool?,
                               description: ::String?,
                               device_index: ::Integer?,
                               groups: Array[::String]?,
                               ipv_6_address_count: ::Integer?,
                               ipv_6_addresses: Array[
                                 {
                                   ipv_6_address: ::String?,
                                   is_primary_ipv_6: bool?
                                 },
                               ]?,
                               network_interface_id: ::String?,
                               private_ip_address: ::String?,
                               private_ip_addresses: Array[
                                 {
                                   primary: bool?,
                                   private_ip_address: ::String?
                                 },
                               ]?,
                               secondary_private_ip_address_count: ::Integer?,
                               subnet_id: ::String?,
                               associate_carrier_ip_address: bool?,
                               interface_type: ::String?,
                               network_card_index: ::Integer?,
                               ipv_4_prefixes: Array[
                                 {
                                   ipv_4_prefix: ::String?
                                 },
                               ]?,
                               ipv_4_prefix_count: ::Integer?,
                               ipv_6_prefixes: Array[
                                 {
                                   ipv_6_prefix: ::String?
                                 },
                               ]?,
                               ipv_6_prefix_count: ::Integer?,
                               primary_ipv_6: bool?,
                               ena_srd_specification: {
                                 ena_srd_enabled: bool?,
                                 ena_srd_udp_specification: {
                                   ena_srd_udp_enabled: bool?
                                 }?
                               }?,
                               connection_tracking_specification: {
                                 tcp_established_timeout: ::Integer?,
                                 udp_stream_timeout: ::Integer?,
                                 udp_timeout: ::Integer?
                               }?
                             },
                           ],
                           ?iam_instance_profile: {
                             arn: ::String?,
                             name: ::String?
                           },
                           ?ebs_optimized: bool
                         ) -> _RunInstancesResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RunInstancesResponseSuccess

      interface _RunScheduledInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RunScheduledInstancesResult]
        def instance_id_set: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#run_scheduled_instances-instance_method
      def run_scheduled_instances: (
                                     ?client_token: ::String,
                                     ?dry_run: bool,
                                     ?instance_count: ::Integer,
                                     launch_specification: {
                                       block_device_mappings: Array[
                                         {
                                           device_name: ::String?,
                                           ebs: {
                                             delete_on_termination: bool?,
                                             encrypted: bool?,
                                             iops: ::Integer?,
                                             snapshot_id: ::String?,
                                             volume_size: ::Integer?,
                                             volume_type: ::String?
                                           }?,
                                           no_device: ::String?,
                                           virtual_name: ::String?
                                         },
                                       ]?,
                                       ebs_optimized: bool?,
                                       iam_instance_profile: {
                                         arn: ::String?,
                                         name: ::String?
                                       }?,
                                       image_id: ::String,
                                       instance_type: ::String?,
                                       kernel_id: ::String?,
                                       key_name: ::String?,
                                       monitoring: {
                                         enabled: bool?
                                       }?,
                                       network_interfaces: Array[
                                         {
                                           associate_public_ip_address: bool?,
                                           delete_on_termination: bool?,
                                           description: ::String?,
                                           device_index: ::Integer?,
                                           groups: Array[::String]?,
                                           ipv_6_address_count: ::Integer?,
                                           ipv_6_addresses: Array[
                                             {
                                               ipv_6_address: ::String?
                                             },
                                           ]?,
                                           network_interface_id: ::String?,
                                           private_ip_address: ::String?,
                                           private_ip_address_configs: Array[
                                             {
                                               primary: bool?,
                                               private_ip_address: ::String?
                                             },
                                           ]?,
                                           secondary_private_ip_address_count: ::Integer?,
                                           subnet_id: ::String?
                                         },
                                       ]?,
                                       placement: {
                                         availability_zone: ::String?,
                                         group_name: ::String?
                                       }?,
                                       ramdisk_id: ::String?,
                                       security_group_ids: Array[::String]?,
                                       subnet_id: ::String?,
                                       user_data: ::String?
                                     },
                                     scheduled_instance_id: ::String
                                   ) -> _RunScheduledInstancesResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RunScheduledInstancesResponseSuccess

      interface _SearchLocalGatewayRoutesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SearchLocalGatewayRoutesResult]
        def routes: () -> ::Array[Types::LocalGatewayRoute]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#search_local_gateway_routes-instance_method
      def search_local_gateway_routes: (
                                         local_gateway_route_table_id: ::String,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ],
                                         ?max_results: ::Integer,
                                         ?next_token: ::String,
                                         ?dry_run: bool
                                       ) -> _SearchLocalGatewayRoutesResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SearchLocalGatewayRoutesResponseSuccess

      interface _SearchTransitGatewayMulticastGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SearchTransitGatewayMulticastGroupsResult]
        def multicast_groups: () -> ::Array[Types::TransitGatewayMulticastGroup]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#search_transit_gateway_multicast_groups-instance_method
      def search_transit_gateway_multicast_groups: (
                                                     transit_gateway_multicast_domain_id: ::String,
                                                     ?filters: Array[
                                                       {
                                                         name: ::String?,
                                                         values: Array[::String]?
                                                       },
                                                     ],
                                                     ?max_results: ::Integer,
                                                     ?next_token: ::String,
                                                     ?dry_run: bool
                                                   ) -> _SearchTransitGatewayMulticastGroupsResponseSuccess
                                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SearchTransitGatewayMulticastGroupsResponseSuccess

      interface _SearchTransitGatewayRoutesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SearchTransitGatewayRoutesResult]
        def routes: () -> ::Array[Types::TransitGatewayRoute]
        def additional_routes_available: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#search_transit_gateway_routes-instance_method
      def search_transit_gateway_routes: (
                                           transit_gateway_route_table_id: ::String,
                                           filters: Array[
                                             {
                                               name: ::String?,
                                               values: Array[::String]?
                                             },
                                           ],
                                           ?max_results: ::Integer,
                                           ?dry_run: bool
                                         ) -> _SearchTransitGatewayRoutesResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SearchTransitGatewayRoutesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#send_diagnostic_interrupt-instance_method
      def send_diagnostic_interrupt: (
                                       instance_id: ::String,
                                       ?dry_run: bool
                                     ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _StartInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartInstancesResult]
        def starting_instances: () -> ::Array[Types::InstanceStateChange]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#start_instances-instance_method
      def start_instances: (
                             instance_ids: Array[::String],
                             ?additional_info: ::String,
                             ?dry_run: bool
                           ) -> _StartInstancesResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartInstancesResponseSuccess

      interface _StartNetworkInsightsAccessScopeAnalysisResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartNetworkInsightsAccessScopeAnalysisResult]
        def network_insights_access_scope_analysis: () -> Types::NetworkInsightsAccessScopeAnalysis
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#start_network_insights_access_scope_analysis-instance_method
      def start_network_insights_access_scope_analysis: (
                                                          network_insights_access_scope_id: ::String,
                                                          ?dry_run: bool,
                                                          ?tag_specifications: Array[
                                                            {
                                                              resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                              tags: Array[
                                                                {
                                                                  key: ::String?,
                                                                  value: ::String?
                                                                },
                                                              ]?
                                                            },
                                                          ],
                                                          client_token: ::String
                                                        ) -> _StartNetworkInsightsAccessScopeAnalysisResponseSuccess
                                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartNetworkInsightsAccessScopeAnalysisResponseSuccess

      interface _StartNetworkInsightsAnalysisResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartNetworkInsightsAnalysisResult]
        def network_insights_analysis: () -> Types::NetworkInsightsAnalysis
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#start_network_insights_analysis-instance_method
      def start_network_insights_analysis: (
                                             network_insights_path_id: ::String,
                                             ?additional_accounts: Array[::String],
                                             ?filter_in_arns: Array[::String],
                                             ?dry_run: bool,
                                             ?tag_specifications: Array[
                                               {
                                                 resource_type: ("capacity-reservation" | "client-vpn-endpoint" | "customer-gateway" | "carrier-gateway" | "coip-pool" | "dedicated-host" | "dhcp-options" | "egress-only-internet-gateway" | "elastic-ip" | "elastic-gpu" | "export-image-task" | "export-instance-task" | "fleet" | "fpga-image" | "host-reservation" | "image" | "import-image-task" | "import-snapshot-task" | "instance" | "instance-event-window" | "internet-gateway" | "ipam" | "ipam-pool" | "ipam-scope" | "ipv4pool-ec2" | "ipv6pool-ec2" | "key-pair" | "launch-template" | "local-gateway" | "local-gateway-route-table" | "local-gateway-virtual-interface" | "local-gateway-virtual-interface-group" | "local-gateway-route-table-vpc-association" | "local-gateway-route-table-virtual-interface-group-association" | "natgateway" | "network-acl" | "network-interface" | "network-insights-analysis" | "network-insights-path" | "network-insights-access-scope" | "network-insights-access-scope-analysis" | "placement-group" | "prefix-list" | "replace-root-volume-task" | "reserved-instances" | "route-table" | "security-group" | "security-group-rule" | "snapshot" | "spot-fleet-request" | "spot-instances-request" | "subnet" | "subnet-cidr-reservation" | "traffic-mirror-filter" | "traffic-mirror-session" | "traffic-mirror-target" | "transit-gateway" | "transit-gateway-attachment" | "transit-gateway-connect-peer" | "transit-gateway-multicast-domain" | "transit-gateway-policy-table" | "transit-gateway-route-table" | "transit-gateway-route-table-announcement" | "volume" | "vpc" | "vpc-endpoint" | "vpc-endpoint-connection" | "vpc-endpoint-service" | "vpc-endpoint-service-permission" | "vpc-peering-connection" | "vpn-connection" | "vpn-gateway" | "vpc-flow-log" | "capacity-reservation-fleet" | "traffic-mirror-filter-rule" | "vpc-endpoint-connection-device-type" | "verified-access-instance" | "verified-access-group" | "verified-access-endpoint" | "verified-access-policy" | "verified-access-trust-provider" | "vpn-connection-device-type" | "vpc-block-public-access-exclusion" | "ipam-resource-discovery" | "ipam-resource-discovery-association" | "instance-connect-endpoint" | "ipam-external-resource-verification-token")?,
                                                 tags: Array[
                                                   {
                                                     key: ::String?,
                                                     value: ::String?
                                                   },
                                                 ]?
                                               },
                                             ],
                                             client_token: ::String
                                           ) -> _StartNetworkInsightsAnalysisResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartNetworkInsightsAnalysisResponseSuccess

      interface _StartVpcEndpointServicePrivateDnsVerificationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartVpcEndpointServicePrivateDnsVerificationResult]
        def return_value: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#start_vpc_endpoint_service_private_dns_verification-instance_method
      def start_vpc_endpoint_service_private_dns_verification: (
                                                                 ?dry_run: bool,
                                                                 service_id: ::String
                                                               ) -> _StartVpcEndpointServicePrivateDnsVerificationResponseSuccess
                                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartVpcEndpointServicePrivateDnsVerificationResponseSuccess

      interface _StopInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopInstancesResult]
        def stopping_instances: () -> ::Array[Types::InstanceStateChange]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#stop_instances-instance_method
      def stop_instances: (
                            instance_ids: Array[::String],
                            ?hibernate: bool,
                            ?dry_run: bool,
                            ?force: bool
                          ) -> _StopInstancesResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopInstancesResponseSuccess

      interface _TerminateClientVpnConnectionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TerminateClientVpnConnectionsResult]
        def client_vpn_endpoint_id: () -> ::String
        def username: () -> ::String
        def connection_statuses: () -> ::Array[Types::TerminateConnectionStatus]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#terminate_client_vpn_connections-instance_method
      def terminate_client_vpn_connections: (
                                              client_vpn_endpoint_id: ::String,
                                              ?connection_id: ::String,
                                              ?username: ::String,
                                              ?dry_run: bool
                                            ) -> _TerminateClientVpnConnectionsResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TerminateClientVpnConnectionsResponseSuccess

      interface _TerminateInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TerminateInstancesResult]
        def terminating_instances: () -> ::Array[Types::InstanceStateChange]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#terminate_instances-instance_method
      def terminate_instances: (
                                 instance_ids: Array[::String],
                                 ?dry_run: bool
                               ) -> _TerminateInstancesResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TerminateInstancesResponseSuccess

      interface _UnassignIpv6AddressesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UnassignIpv6AddressesResult]
        def network_interface_id: () -> ::String
        def unassigned_ipv_6_addresses: () -> ::Array[::String]
        def unassigned_ipv_6_prefixes: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#unassign_ipv_6_addresses-instance_method
      def unassign_ipv_6_addresses: (
                                      ?ipv_6_prefixes: Array[::String],
                                      network_interface_id: ::String,
                                      ?ipv_6_addresses: Array[::String]
                                    ) -> _UnassignIpv6AddressesResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UnassignIpv6AddressesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#unassign_private_ip_addresses-instance_method
      def unassign_private_ip_addresses: (
                                           ?ipv_4_prefixes: Array[::String],
                                           network_interface_id: ::String,
                                           ?private_ip_addresses: Array[::String]
                                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _UnassignPrivateNatGatewayAddressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UnassignPrivateNatGatewayAddressResult]
        def nat_gateway_id: () -> ::String
        def nat_gateway_addresses: () -> ::Array[Types::NatGatewayAddress]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#unassign_private_nat_gateway_address-instance_method
      def unassign_private_nat_gateway_address: (
                                                  nat_gateway_id: ::String,
                                                  private_ip_addresses: Array[::String],
                                                  ?max_drain_duration_seconds: ::Integer,
                                                  ?dry_run: bool
                                                ) -> _UnassignPrivateNatGatewayAddressResponseSuccess
                                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UnassignPrivateNatGatewayAddressResponseSuccess

      interface _UnlockSnapshotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UnlockSnapshotResult]
        def snapshot_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#unlock_snapshot-instance_method
      def unlock_snapshot: (
                             snapshot_id: ::String,
                             ?dry_run: bool
                           ) -> _UnlockSnapshotResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UnlockSnapshotResponseSuccess

      interface _UnmonitorInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UnmonitorInstancesResult]
        def instance_monitorings: () -> ::Array[Types::InstanceMonitoring]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#unmonitor_instances-instance_method
      def unmonitor_instances: (
                                 instance_ids: Array[::String],
                                 ?dry_run: bool
                               ) -> _UnmonitorInstancesResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UnmonitorInstancesResponseSuccess

      interface _UpdateSecurityGroupRuleDescriptionsEgressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateSecurityGroupRuleDescriptionsEgressResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#update_security_group_rule_descriptions_egress-instance_method
      def update_security_group_rule_descriptions_egress: (
                                                            ?dry_run: bool,
                                                            ?group_id: ::String,
                                                            ?group_name: ::String,
                                                            ?ip_permissions: Array[
                                                              {
                                                                ip_protocol: ::String?,
                                                                from_port: ::Integer?,
                                                                to_port: ::Integer?,
                                                                user_id_group_pairs: Array[
                                                                  {
                                                                    description: ::String?,
                                                                    user_id: ::String?,
                                                                    group_name: ::String?,
                                                                    group_id: ::String?,
                                                                    vpc_id: ::String?,
                                                                    vpc_peering_connection_id: ::String?,
                                                                    peering_status: ::String?
                                                                  },
                                                                ]?,
                                                                ip_ranges: Array[
                                                                  {
                                                                    description: ::String?,
                                                                    cidr_ip: ::String?
                                                                  },
                                                                ]?,
                                                                ipv_6_ranges: Array[
                                                                  {
                                                                    description: ::String?,
                                                                    cidr_ipv_6: ::String?
                                                                  },
                                                                ]?,
                                                                prefix_list_ids: Array[
                                                                  {
                                                                    description: ::String?,
                                                                    prefix_list_id: ::String?
                                                                  },
                                                                ]?
                                                              },
                                                            ],
                                                            ?security_group_rule_descriptions: Array[
                                                              {
                                                                security_group_rule_id: ::String?,
                                                                description: ::String?
                                                              },
                                                            ]
                                                          ) -> _UpdateSecurityGroupRuleDescriptionsEgressResponseSuccess
                                                        | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateSecurityGroupRuleDescriptionsEgressResponseSuccess

      interface _UpdateSecurityGroupRuleDescriptionsIngressResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateSecurityGroupRuleDescriptionsIngressResult]
        def return: () -> bool
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#update_security_group_rule_descriptions_ingress-instance_method
      def update_security_group_rule_descriptions_ingress: (
                                                             ?dry_run: bool,
                                                             ?group_id: ::String,
                                                             ?group_name: ::String,
                                                             ?ip_permissions: Array[
                                                               {
                                                                 ip_protocol: ::String?,
                                                                 from_port: ::Integer?,
                                                                 to_port: ::Integer?,
                                                                 user_id_group_pairs: Array[
                                                                   {
                                                                     description: ::String?,
                                                                     user_id: ::String?,
                                                                     group_name: ::String?,
                                                                     group_id: ::String?,
                                                                     vpc_id: ::String?,
                                                                     vpc_peering_connection_id: ::String?,
                                                                     peering_status: ::String?
                                                                   },
                                                                 ]?,
                                                                 ip_ranges: Array[
                                                                   {
                                                                     description: ::String?,
                                                                     cidr_ip: ::String?
                                                                   },
                                                                 ]?,
                                                                 ipv_6_ranges: Array[
                                                                   {
                                                                     description: ::String?,
                                                                     cidr_ipv_6: ::String?
                                                                   },
                                                                 ]?,
                                                                 prefix_list_ids: Array[
                                                                   {
                                                                     description: ::String?,
                                                                     prefix_list_id: ::String?
                                                                   },
                                                                 ]?
                                                               },
                                                             ],
                                                             ?security_group_rule_descriptions: Array[
                                                               {
                                                                 security_group_rule_id: ::String?,
                                                                 description: ::String?
                                                               },
                                                             ]
                                                           ) -> _UpdateSecurityGroupRuleDescriptionsIngressResponseSuccess
                                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateSecurityGroupRuleDescriptionsIngressResponseSuccess

      interface _WithdrawByoipCidrResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::WithdrawByoipCidrResult]
        def byoip_cidr: () -> Types::ByoipCidr
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#withdraw_byoip_cidr-instance_method
      def withdraw_byoip_cidr: (
                                 cidr: ::String,
                                 ?dry_run: bool
                               ) -> _WithdrawByoipCidrResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _WithdrawByoipCidrResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/EC2/Client.html#wait_until-instance_method
      def wait_until: (:bundle_task_complete waiter_name, 
                    ?bundle_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeBundleTasksResponseSuccess
                    | (:bundle_task_complete waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeBundleTasksResponseSuccess
                    | (:conversion_task_cancelled waiter_name, 
                    ?dry_run: bool,
                    ?conversion_task_ids: Array[::String]
                  ) -> Client::_DescribeConversionTasksResponseSuccess
                    | (:conversion_task_cancelled waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeConversionTasksResponseSuccess
                    | (:conversion_task_completed waiter_name, 
                    ?dry_run: bool,
                    ?conversion_task_ids: Array[::String]
                  ) -> Client::_DescribeConversionTasksResponseSuccess
                    | (:conversion_task_completed waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeConversionTasksResponseSuccess
                    | (:conversion_task_deleted waiter_name, 
                    ?dry_run: bool,
                    ?conversion_task_ids: Array[::String]
                  ) -> Client::_DescribeConversionTasksResponseSuccess
                    | (:conversion_task_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeConversionTasksResponseSuccess
                    | (:customer_gateway_available waiter_name, 
                    ?customer_gateway_ids: Array[::String],
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?dry_run: bool
                  ) -> Client::_DescribeCustomerGatewaysResponseSuccess
                    | (:customer_gateway_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeCustomerGatewaysResponseSuccess
                    | (:export_task_cancelled waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?export_task_ids: Array[::String]
                  ) -> Client::_DescribeExportTasksResponseSuccess
                    | (:export_task_cancelled waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeExportTasksResponseSuccess
                    | (:export_task_completed waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?export_task_ids: Array[::String]
                  ) -> Client::_DescribeExportTasksResponseSuccess
                    | (:export_task_completed waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeExportTasksResponseSuccess
                    | (:image_available waiter_name, 
                    ?executable_users: Array[::String],
                    ?image_ids: Array[::String],
                    ?owners: Array[::String],
                    ?include_deprecated: bool,
                    ?include_disabled: bool,
                    ?max_results: ::Integer,
                    ?next_token: ::String,
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeImagesResponseSuccess
                    | (:image_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeImagesResponseSuccess
                    | (:image_exists waiter_name, 
                    ?executable_users: Array[::String],
                    ?image_ids: Array[::String],
                    ?owners: Array[::String],
                    ?include_deprecated: bool,
                    ?include_disabled: bool,
                    ?max_results: ::Integer,
                    ?next_token: ::String,
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeImagesResponseSuccess
                    | (:image_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeImagesResponseSuccess
                    | (:instance_exists waiter_name, 
                    ?instance_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_running waiter_name, 
                    ?instance_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_running waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_status_ok waiter_name, 
                    ?instance_ids: Array[::String],
                    ?max_results: ::Integer,
                    ?next_token: ::String,
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?include_all_instances: bool
                  ) -> Client::_DescribeInstanceStatusResponseSuccess
                    | (:instance_status_ok waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstanceStatusResponseSuccess
                    | (:instance_stopped waiter_name, 
                    ?instance_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_stopped waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_terminated waiter_name, 
                    ?instance_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_terminated waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:internet_gateway_exists waiter_name, 
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool,
                    ?internet_gateway_ids: Array[::String],
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeInternetGatewaysResponseSuccess
                    | (:internet_gateway_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInternetGatewaysResponseSuccess
                    | (:key_pair_exists waiter_name, 
                    ?key_names: Array[::String],
                    ?key_pair_ids: Array[::String],
                    ?include_public_key: bool,
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeKeyPairsResponseSuccess
                    | (:key_pair_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeKeyPairsResponseSuccess
                    | (:nat_gateway_available waiter_name, 
                    ?dry_run: bool,
                    ?filter: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?max_results: ::Integer,
                    ?nat_gateway_ids: Array[::String],
                    ?next_token: ::String
                  ) -> Client::_DescribeNatGatewaysResponseSuccess
                    | (:nat_gateway_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeNatGatewaysResponseSuccess
                    | (:nat_gateway_deleted waiter_name, 
                    ?dry_run: bool,
                    ?filter: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?max_results: ::Integer,
                    ?nat_gateway_ids: Array[::String],
                    ?next_token: ::String
                  ) -> Client::_DescribeNatGatewaysResponseSuccess
                    | (:nat_gateway_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeNatGatewaysResponseSuccess
                    | (:network_interface_available waiter_name, 
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool,
                    ?network_interface_ids: Array[::String],
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeNetworkInterfacesResponseSuccess
                    | (:network_interface_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeNetworkInterfacesResponseSuccess
                    | (:password_data_available waiter_name, 
                    instance_id: ::String,
                    ?dry_run: bool
                  ) -> Client::_GetPasswordDataResponseSuccess
                    | (:password_data_available waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_GetPasswordDataResponseSuccess
                    | (:security_group_exists waiter_name, 
                    ?group_ids: Array[::String],
                    ?group_names: Array[::String],
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeSecurityGroupsResponseSuccess
                    | (:security_group_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeSecurityGroupsResponseSuccess
                    | (:snapshot_completed waiter_name, 
                    ?max_results: ::Integer,
                    ?next_token: ::String,
                    ?owner_ids: Array[::String],
                    ?restorable_by_user_ids: Array[::String],
                    ?snapshot_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeSnapshotsResponseSuccess
                    | (:snapshot_completed waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeSnapshotsResponseSuccess
                    | (:snapshot_imported waiter_name, 
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?import_task_ids: Array[::String],
                    ?max_results: ::Integer,
                    ?next_token: ::String
                  ) -> Client::_DescribeImportSnapshotTasksResponseSuccess
                    | (:snapshot_imported waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeImportSnapshotTasksResponseSuccess
                    | (:spot_instance_request_fulfilled waiter_name, 
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool,
                    ?spot_instance_request_ids: Array[::String],
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeSpotInstanceRequestsResponseSuccess
                    | (:spot_instance_request_fulfilled waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeSpotInstanceRequestsResponseSuccess
                    | (:store_image_task_complete waiter_name, 
                    ?image_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeStoreImageTasksResponseSuccess
                    | (:store_image_task_complete waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeStoreImageTasksResponseSuccess
                    | (:subnet_available waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?subnet_ids: Array[::String],
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool
                  ) -> Client::_DescribeSubnetsResponseSuccess
                    | (:subnet_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeSubnetsResponseSuccess
                    | (:system_status_ok waiter_name, 
                    ?instance_ids: Array[::String],
                    ?max_results: ::Integer,
                    ?next_token: ::String,
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?include_all_instances: bool
                  ) -> Client::_DescribeInstanceStatusResponseSuccess
                    | (:system_status_ok waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstanceStatusResponseSuccess
                    | (:volume_available waiter_name, 
                    ?volume_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeVolumesResponseSuccess
                    | (:volume_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVolumesResponseSuccess
                    | (:volume_deleted waiter_name, 
                    ?volume_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeVolumesResponseSuccess
                    | (:volume_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVolumesResponseSuccess
                    | (:volume_in_use waiter_name, 
                    ?volume_ids: Array[::String],
                    ?dry_run: bool,
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?next_token: ::String,
                    ?max_results: ::Integer
                  ) -> Client::_DescribeVolumesResponseSuccess
                    | (:volume_in_use waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVolumesResponseSuccess
                    | (:vpc_available waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?vpc_ids: Array[::String],
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool
                  ) -> Client::_DescribeVpcsResponseSuccess
                    | (:vpc_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVpcsResponseSuccess
                    | (:vpc_exists waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?vpc_ids: Array[::String],
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool
                  ) -> Client::_DescribeVpcsResponseSuccess
                    | (:vpc_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVpcsResponseSuccess
                    | (:vpc_peering_connection_deleted waiter_name, 
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool,
                    ?vpc_peering_connection_ids: Array[::String],
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeVpcPeeringConnectionsResponseSuccess
                    | (:vpc_peering_connection_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVpcPeeringConnectionsResponseSuccess
                    | (:vpc_peering_connection_exists waiter_name, 
                    ?next_token: ::String,
                    ?max_results: ::Integer,
                    ?dry_run: bool,
                    ?vpc_peering_connection_ids: Array[::String],
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ]
                  ) -> Client::_DescribeVpcPeeringConnectionsResponseSuccess
                    | (:vpc_peering_connection_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVpcPeeringConnectionsResponseSuccess
                    | (:vpn_connection_available waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?vpn_connection_ids: Array[::String],
                    ?dry_run: bool
                  ) -> Client::_DescribeVpnConnectionsResponseSuccess
                    | (:vpn_connection_available waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVpnConnectionsResponseSuccess
                    | (:vpn_connection_deleted waiter_name, 
                    ?filters: Array[
                      {
                        name: ::String?,
                        values: Array[::String]?
                      },
                    ],
                    ?vpn_connection_ids: Array[::String],
                    ?dry_run: bool
                  ) -> Client::_DescribeVpnConnectionsResponseSuccess
                    | (:vpn_connection_deleted waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeVpnConnectionsResponseSuccess
    end
  end
end

