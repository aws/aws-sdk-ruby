# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module RoboMaker
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _BatchDeleteWorldsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchDeleteWorldsResponse]
        def unprocessed_worlds: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#batch_delete_worlds-instance_method
      def batch_delete_worlds: (
                                 worlds: Array[::String]
                               ) -> _BatchDeleteWorldsResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchDeleteWorldsResponseSuccess

      interface _BatchDescribeSimulationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchDescribeSimulationJobResponse]
        def jobs: () -> ::Array[Types::SimulationJob]
        def unprocessed_jobs: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#batch_describe_simulation_job-instance_method
      def batch_describe_simulation_job: (
                                           jobs: Array[::String]
                                         ) -> _BatchDescribeSimulationJobResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchDescribeSimulationJobResponseSuccess

      interface _CancelDeploymentJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelDeploymentJobResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#cancel_deployment_job-instance_method
      def cancel_deployment_job: (
                                   job: ::String
                                 ) -> _CancelDeploymentJobResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelDeploymentJobResponseSuccess

      interface _CancelSimulationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelSimulationJobResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#cancel_simulation_job-instance_method
      def cancel_simulation_job: (
                                   job: ::String
                                 ) -> _CancelSimulationJobResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelSimulationJobResponseSuccess

      interface _CancelSimulationJobBatchResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelSimulationJobBatchResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#cancel_simulation_job_batch-instance_method
      def cancel_simulation_job_batch: (
                                         batch: ::String
                                       ) -> _CancelSimulationJobBatchResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelSimulationJobBatchResponseSuccess

      interface _CancelWorldExportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelWorldExportJobResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#cancel_world_export_job-instance_method
      def cancel_world_export_job: (
                                     job: ::String
                                   ) -> _CancelWorldExportJobResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelWorldExportJobResponseSuccess

      interface _CancelWorldGenerationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelWorldGenerationJobResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#cancel_world_generation_job-instance_method
      def cancel_world_generation_job: (
                                         job: ::String
                                       ) -> _CancelWorldGenerationJobResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelWorldGenerationJobResponseSuccess

      interface _CreateDeploymentJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDeploymentJobResponse]
        def arn: () -> ::String
        def fleet: () -> ::String
        def status: () -> ("Pending" | "Preparing" | "InProgress" | "Failed" | "Succeeded" | "Canceled")
        def deployment_application_configs: () -> ::Array[Types::DeploymentApplicationConfig]
        def failure_reason: () -> ::String
        def failure_code: () -> ("ResourceNotFound" | "EnvironmentSetupError" | "EtagMismatch" | "FailureThresholdBreached" | "RobotDeploymentAborted" | "RobotDeploymentNoResponse" | "RobotAgentConnectionTimeout" | "GreengrassDeploymentFailed" | "InvalidGreengrassGroup" | "MissingRobotArchitecture" | "MissingRobotApplicationArchitecture" | "MissingRobotDeploymentResource" | "GreengrassGroupVersionDoesNotExist" | "LambdaDeleted" | "ExtractingBundleFailure" | "PreLaunchFileFailure" | "PostLaunchFileFailure" | "BadPermissionError" | "DownloadConditionFailed" | "BadLambdaAssociated" | "InternalServerError" | "RobotApplicationDoesNotExist" | "DeploymentFleetDoesNotExist" | "FleetDeploymentTimeout")
        def created_at: () -> ::Time
        def deployment_config: () -> Types::DeploymentConfig
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_deployment_job-instance_method
      def create_deployment_job: (
                                   ?deployment_config: {
                                     concurrent_deployment_percentage: ::Integer?,
                                     failure_threshold_percentage: ::Integer?,
                                     robot_deployment_timeout_in_seconds: ::Integer?,
                                     download_condition_file: {
                                       bucket: ::String,
                                       key: ::String,
                                       etag: ::String?
                                     }?
                                   },
                                   client_request_token: ::String,
                                   fleet: ::String,
                                   deployment_application_configs: Array[
                                     {
                                       application: ::String,
                                       application_version: ::String,
                                       launch_config: {
                                         package_name: ::String,
                                         pre_launch_file: ::String?,
                                         launch_file: ::String,
                                         post_launch_file: ::String?,
                                         environment_variables: Hash[::String, ::String]?
                                       }
                                     },
                                   ],
                                   ?tags: Hash[::String, ::String]
                                 ) -> _CreateDeploymentJobResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDeploymentJobResponseSuccess

      interface _CreateFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateFleetResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def created_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_fleet-instance_method
      def create_fleet: (
                          name: ::String,
                          ?tags: Hash[::String, ::String]
                        ) -> _CreateFleetResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateFleetResponseSuccess

      interface _CreateRobotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRobotResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def created_at: () -> ::Time
        def greengrass_group_id: () -> ::String
        def architecture: () -> ("X86_64" | "ARM64" | "ARMHF")
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_robot-instance_method
      def create_robot: (
                          name: ::String,
                          architecture: ("X86_64" | "ARM64" | "ARMHF"),
                          greengrass_group_id: ::String,
                          ?tags: Hash[::String, ::String]
                        ) -> _CreateRobotResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRobotResponseSuccess

      interface _CreateRobotApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRobotApplicationResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def last_updated_at: () -> ::Time
        def revision_id: () -> ::String
        def tags: () -> ::Hash[::String, ::String]
        def environment: () -> Types::Environment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_robot_application-instance_method
      def create_robot_application: (
                                      name: ::String,
                                      ?sources: Array[
                                        {
                                          s3_bucket: ::String?,
                                          s3_key: ::String?,
                                          architecture: ("X86_64" | "ARM64" | "ARMHF")?
                                        },
                                      ],
                                      robot_software_suite: {
                                        name: ("ROS" | "ROS2" | "General")?,
                                        version: ("Kinetic" | "Melodic" | "Dashing" | "Foxy")?
                                      },
                                      ?tags: Hash[::String, ::String],
                                      ?environment: {
                                        uri: ::String?
                                      }
                                    ) -> _CreateRobotApplicationResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRobotApplicationResponseSuccess

      interface _CreateRobotApplicationVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRobotApplicationVersionResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def last_updated_at: () -> ::Time
        def revision_id: () -> ::String
        def environment: () -> Types::Environment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_robot_application_version-instance_method
      def create_robot_application_version: (
                                              application: ::String,
                                              ?current_revision_id: ::String,
                                              ?s3_etags: Array[::String],
                                              ?image_digest: ::String
                                            ) -> _CreateRobotApplicationVersionResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRobotApplicationVersionResponseSuccess

      interface _CreateSimulationApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSimulationApplicationResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def simulation_software_suite: () -> Types::SimulationSoftwareSuite
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def rendering_engine: () -> Types::RenderingEngine
        def last_updated_at: () -> ::Time
        def revision_id: () -> ::String
        def tags: () -> ::Hash[::String, ::String]
        def environment: () -> Types::Environment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_simulation_application-instance_method
      def create_simulation_application: (
                                           name: ::String,
                                           ?sources: Array[
                                             {
                                               s3_bucket: ::String?,
                                               s3_key: ::String?,
                                               architecture: ("X86_64" | "ARM64" | "ARMHF")?
                                             },
                                           ],
                                           simulation_software_suite: {
                                             name: ("Gazebo" | "RosbagPlay" | "SimulationRuntime")?,
                                             version: ::String?
                                           },
                                           robot_software_suite: {
                                             name: ("ROS" | "ROS2" | "General")?,
                                             version: ("Kinetic" | "Melodic" | "Dashing" | "Foxy")?
                                           },
                                           ?rendering_engine: {
                                             name: ("OGRE")?,
                                             version: ::String?
                                           },
                                           ?tags: Hash[::String, ::String],
                                           ?environment: {
                                             uri: ::String?
                                           }
                                         ) -> _CreateSimulationApplicationResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSimulationApplicationResponseSuccess

      interface _CreateSimulationApplicationVersionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSimulationApplicationVersionResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def simulation_software_suite: () -> Types::SimulationSoftwareSuite
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def rendering_engine: () -> Types::RenderingEngine
        def last_updated_at: () -> ::Time
        def revision_id: () -> ::String
        def environment: () -> Types::Environment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_simulation_application_version-instance_method
      def create_simulation_application_version: (
                                                   application: ::String,
                                                   ?current_revision_id: ::String,
                                                   ?s3_etags: Array[::String],
                                                   ?image_digest: ::String
                                                 ) -> _CreateSimulationApplicationVersionResponseSuccess
                                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSimulationApplicationVersionResponseSuccess

      interface _CreateSimulationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSimulationJobResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "Preparing" | "Running" | "Restarting" | "Completed" | "Failed" | "RunningFailed" | "Terminating" | "Terminated" | "Canceled")
        def last_started_at: () -> ::Time
        def last_updated_at: () -> ::Time
        def failure_behavior: () -> ("Fail" | "Continue")
        def failure_code: () -> ("InternalServiceError" | "RobotApplicationCrash" | "SimulationApplicationCrash" | "RobotApplicationHealthCheckFailure" | "SimulationApplicationHealthCheckFailure" | "BadPermissionsRobotApplication" | "BadPermissionsSimulationApplication" | "BadPermissionsS3Object" | "BadPermissionsS3Output" | "BadPermissionsCloudwatchLogs" | "SubnetIpLimitExceeded" | "ENILimitExceeded" | "BadPermissionsUserCredentials" | "InvalidBundleRobotApplication" | "InvalidBundleSimulationApplication" | "InvalidS3Resource" | "ThrottlingError" | "LimitExceeded" | "MismatchedEtag" | "RobotApplicationVersionMismatchedEtag" | "SimulationApplicationVersionMismatchedEtag" | "ResourceNotFound" | "RequestThrottled" | "BatchTimedOut" | "BatchCanceled" | "InvalidInput" | "WrongRegionS3Bucket" | "WrongRegionS3Output" | "WrongRegionRobotApplication" | "WrongRegionSimulationApplication" | "UploadContentMismatchError")
        def client_request_token: () -> ::String
        def output_location: () -> Types::OutputLocation
        def logging_config: () -> Types::LoggingConfig
        def max_job_duration_in_seconds: () -> ::Integer
        def simulation_time_millis: () -> ::Integer
        def iam_role: () -> ::String
        def robot_applications: () -> ::Array[Types::RobotApplicationConfig]
        def simulation_applications: () -> ::Array[Types::SimulationApplicationConfig]
        def data_sources: () -> ::Array[Types::DataSource]
        def tags: () -> ::Hash[::String, ::String]
        def vpc_config: () -> Types::VPCConfigResponse
        def compute: () -> Types::ComputeResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_simulation_job-instance_method
      def create_simulation_job: (
                                   ?client_request_token: ::String,
                                   ?output_location: {
                                     s3_bucket: ::String?,
                                     s3_prefix: ::String?
                                   },
                                   ?logging_config: {
                                     record_all_ros_topics: bool?
                                   },
                                   max_job_duration_in_seconds: ::Integer,
                                   iam_role: ::String,
                                   ?failure_behavior: ("Fail" | "Continue"),
                                   ?robot_applications: Array[
                                     {
                                       application: ::String,
                                       application_version: ::String?,
                                       launch_config: {
                                         package_name: ::String?,
                                         launch_file: ::String?,
                                         environment_variables: Hash[::String, ::String]?,
                                         port_forwarding_config: {
                                           port_mappings: Array[
                                             {
                                               job_port: ::Integer,
                                               application_port: ::Integer,
                                               enable_on_public_ip: bool?
                                             },
                                           ]?
                                         }?,
                                         stream_ui: bool?,
                                         command: Array[::String]?
                                       },
                                       upload_configurations: Array[
                                         {
                                           name: ::String,
                                           path: ::String,
                                           upload_behavior: ("UPLOAD_ON_TERMINATE" | "UPLOAD_ROLLING_AUTO_REMOVE")
                                         },
                                       ]?,
                                       use_default_upload_configurations: bool?,
                                       tools: Array[
                                         {
                                           stream_ui: bool?,
                                           name: ::String,
                                           command: ::String,
                                           stream_output_to_cloud_watch: bool?,
                                           exit_behavior: ("FAIL" | "RESTART")?
                                         },
                                       ]?,
                                       use_default_tools: bool?
                                     },
                                   ],
                                   ?simulation_applications: Array[
                                     {
                                       application: ::String,
                                       application_version: ::String?,
                                       launch_config: {
                                         package_name: ::String?,
                                         launch_file: ::String?,
                                         environment_variables: Hash[::String, ::String]?,
                                         port_forwarding_config: {
                                           port_mappings: Array[
                                             {
                                               job_port: ::Integer,
                                               application_port: ::Integer,
                                               enable_on_public_ip: bool?
                                             },
                                           ]?
                                         }?,
                                         stream_ui: bool?,
                                         command: Array[::String]?
                                       },
                                       upload_configurations: Array[
                                         {
                                           name: ::String,
                                           path: ::String,
                                           upload_behavior: ("UPLOAD_ON_TERMINATE" | "UPLOAD_ROLLING_AUTO_REMOVE")
                                         },
                                       ]?,
                                       world_configs: Array[
                                         {
                                           world: ::String?
                                         },
                                       ]?,
                                       use_default_upload_configurations: bool?,
                                       tools: Array[
                                         {
                                           stream_ui: bool?,
                                           name: ::String,
                                           command: ::String,
                                           stream_output_to_cloud_watch: bool?,
                                           exit_behavior: ("FAIL" | "RESTART")?
                                         },
                                       ]?,
                                       use_default_tools: bool?
                                     },
                                   ],
                                   ?data_sources: Array[
                                     {
                                       name: ::String,
                                       s3_bucket: ::String,
                                       s3_keys: Array[::String],
                                       type: ("Prefix" | "Archive" | "File")?,
                                       destination: ::String?
                                     },
                                   ],
                                   ?tags: Hash[::String, ::String],
                                   ?vpc_config: {
                                     subnets: Array[::String],
                                     security_groups: Array[::String]?,
                                     assign_public_ip: bool?
                                   },
                                   ?compute: {
                                     simulation_unit_limit: ::Integer?,
                                     compute_type: ("CPU" | "GPU_AND_CPU")?,
                                     gpu_unit_limit: ::Integer?
                                   }
                                 ) -> _CreateSimulationJobResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSimulationJobResponseSuccess

      interface _CreateWorldExportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateWorldExportJobResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "Running" | "Completed" | "Failed" | "Canceling" | "Canceled")
        def created_at: () -> ::Time
        def failure_code: () -> ("InternalServiceError" | "LimitExceeded" | "ResourceNotFound" | "RequestThrottled" | "InvalidInput" | "AccessDenied")
        def client_request_token: () -> ::String
        def output_location: () -> Types::OutputLocation
        def iam_role: () -> ::String
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_world_export_job-instance_method
      def create_world_export_job: (
                                     ?client_request_token: ::String,
                                     worlds: Array[::String],
                                     output_location: {
                                       s3_bucket: ::String?,
                                       s3_prefix: ::String?
                                     },
                                     iam_role: ::String,
                                     ?tags: Hash[::String, ::String]
                                   ) -> _CreateWorldExportJobResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateWorldExportJobResponseSuccess

      interface _CreateWorldGenerationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateWorldGenerationJobResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "Running" | "Completed" | "Failed" | "PartialFailed" | "Canceling" | "Canceled")
        def created_at: () -> ::Time
        def failure_code: () -> ("InternalServiceError" | "LimitExceeded" | "ResourceNotFound" | "RequestThrottled" | "InvalidInput" | "AllWorldGenerationFailed")
        def client_request_token: () -> ::String
        def template: () -> ::String
        def world_count: () -> Types::WorldCount
        def tags: () -> ::Hash[::String, ::String]
        def world_tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_world_generation_job-instance_method
      def create_world_generation_job: (
                                         ?client_request_token: ::String,
                                         template: ::String,
                                         world_count: {
                                           floorplan_count: ::Integer?,
                                           interior_count_per_floorplan: ::Integer?
                                         },
                                         ?tags: Hash[::String, ::String],
                                         ?world_tags: Hash[::String, ::String]
                                       ) -> _CreateWorldGenerationJobResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateWorldGenerationJobResponseSuccess

      interface _CreateWorldTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateWorldTemplateResponse]
        def arn: () -> ::String
        def client_request_token: () -> ::String
        def created_at: () -> ::Time
        def name: () -> ::String
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#create_world_template-instance_method
      def create_world_template: (
                                   ?client_request_token: ::String,
                                   ?name: ::String,
                                   ?template_body: ::String,
                                   ?template_location: {
                                     s3_bucket: ::String,
                                     s3_key: ::String
                                   },
                                   ?tags: Hash[::String, ::String]
                                 ) -> _CreateWorldTemplateResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateWorldTemplateResponseSuccess

      interface _DeleteFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteFleetResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#delete_fleet-instance_method
      def delete_fleet: (
                          fleet: ::String
                        ) -> _DeleteFleetResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteFleetResponseSuccess

      interface _DeleteRobotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteRobotResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#delete_robot-instance_method
      def delete_robot: (
                          robot: ::String
                        ) -> _DeleteRobotResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteRobotResponseSuccess

      interface _DeleteRobotApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteRobotApplicationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#delete_robot_application-instance_method
      def delete_robot_application: (
                                      application: ::String,
                                      ?application_version: ::String
                                    ) -> _DeleteRobotApplicationResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteRobotApplicationResponseSuccess

      interface _DeleteSimulationApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteSimulationApplicationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#delete_simulation_application-instance_method
      def delete_simulation_application: (
                                           application: ::String,
                                           ?application_version: ::String
                                         ) -> _DeleteSimulationApplicationResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteSimulationApplicationResponseSuccess

      interface _DeleteWorldTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteWorldTemplateResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#delete_world_template-instance_method
      def delete_world_template: (
                                   template: ::String
                                 ) -> _DeleteWorldTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteWorldTemplateResponseSuccess

      interface _DeregisterRobotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeregisterRobotResponse]
        def fleet: () -> ::String
        def robot: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#deregister_robot-instance_method
      def deregister_robot: (
                              fleet: ::String,
                              robot: ::String
                            ) -> _DeregisterRobotResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeregisterRobotResponseSuccess

      interface _DescribeDeploymentJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDeploymentJobResponse]
        def arn: () -> ::String
        def fleet: () -> ::String
        def status: () -> ("Pending" | "Preparing" | "InProgress" | "Failed" | "Succeeded" | "Canceled")
        def deployment_config: () -> Types::DeploymentConfig
        def deployment_application_configs: () -> ::Array[Types::DeploymentApplicationConfig]
        def failure_reason: () -> ::String
        def failure_code: () -> ("ResourceNotFound" | "EnvironmentSetupError" | "EtagMismatch" | "FailureThresholdBreached" | "RobotDeploymentAborted" | "RobotDeploymentNoResponse" | "RobotAgentConnectionTimeout" | "GreengrassDeploymentFailed" | "InvalidGreengrassGroup" | "MissingRobotArchitecture" | "MissingRobotApplicationArchitecture" | "MissingRobotDeploymentResource" | "GreengrassGroupVersionDoesNotExist" | "LambdaDeleted" | "ExtractingBundleFailure" | "PreLaunchFileFailure" | "PostLaunchFileFailure" | "BadPermissionError" | "DownloadConditionFailed" | "BadLambdaAssociated" | "InternalServerError" | "RobotApplicationDoesNotExist" | "DeploymentFleetDoesNotExist" | "FleetDeploymentTimeout")
        def created_at: () -> ::Time
        def robot_deployment_summary: () -> ::Array[Types::RobotDeployment]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_deployment_job-instance_method
      def describe_deployment_job: (
                                     job: ::String
                                   ) -> _DescribeDeploymentJobResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDeploymentJobResponseSuccess

      interface _DescribeFleetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeFleetResponse]
        def name: () -> ::String
        def arn: () -> ::String
        def robots: () -> ::Array[Types::Robot]
        def created_at: () -> ::Time
        def last_deployment_status: () -> ("Pending" | "Preparing" | "InProgress" | "Failed" | "Succeeded" | "Canceled")
        def last_deployment_job: () -> ::String
        def last_deployment_time: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_fleet-instance_method
      def describe_fleet: (
                            fleet: ::String
                          ) -> _DescribeFleetResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeFleetResponseSuccess

      interface _DescribeRobotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRobotResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def fleet_arn: () -> ::String
        def status: () -> ("Available" | "Registered" | "PendingNewDeployment" | "Deploying" | "Failed" | "InSync" | "NoResponse")
        def greengrass_group_id: () -> ::String
        def created_at: () -> ::Time
        def architecture: () -> ("X86_64" | "ARM64" | "ARMHF")
        def last_deployment_job: () -> ::String
        def last_deployment_time: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_robot-instance_method
      def describe_robot: (
                            robot: ::String
                          ) -> _DescribeRobotResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRobotResponseSuccess

      interface _DescribeRobotApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRobotApplicationResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def revision_id: () -> ::String
        def last_updated_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
        def environment: () -> Types::Environment
        def image_digest: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_robot_application-instance_method
      def describe_robot_application: (
                                        application: ::String,
                                        ?application_version: ::String
                                      ) -> _DescribeRobotApplicationResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRobotApplicationResponseSuccess

      interface _DescribeSimulationApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSimulationApplicationResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def simulation_software_suite: () -> Types::SimulationSoftwareSuite
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def rendering_engine: () -> Types::RenderingEngine
        def revision_id: () -> ::String
        def last_updated_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
        def environment: () -> Types::Environment
        def image_digest: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_simulation_application-instance_method
      def describe_simulation_application: (
                                             application: ::String,
                                             ?application_version: ::String
                                           ) -> _DescribeSimulationApplicationResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSimulationApplicationResponseSuccess

      interface _DescribeSimulationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSimulationJobResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def status: () -> ("Pending" | "Preparing" | "Running" | "Restarting" | "Completed" | "Failed" | "RunningFailed" | "Terminating" | "Terminated" | "Canceled")
        def last_started_at: () -> ::Time
        def last_updated_at: () -> ::Time
        def failure_behavior: () -> ("Fail" | "Continue")
        def failure_code: () -> ("InternalServiceError" | "RobotApplicationCrash" | "SimulationApplicationCrash" | "RobotApplicationHealthCheckFailure" | "SimulationApplicationHealthCheckFailure" | "BadPermissionsRobotApplication" | "BadPermissionsSimulationApplication" | "BadPermissionsS3Object" | "BadPermissionsS3Output" | "BadPermissionsCloudwatchLogs" | "SubnetIpLimitExceeded" | "ENILimitExceeded" | "BadPermissionsUserCredentials" | "InvalidBundleRobotApplication" | "InvalidBundleSimulationApplication" | "InvalidS3Resource" | "ThrottlingError" | "LimitExceeded" | "MismatchedEtag" | "RobotApplicationVersionMismatchedEtag" | "SimulationApplicationVersionMismatchedEtag" | "ResourceNotFound" | "RequestThrottled" | "BatchTimedOut" | "BatchCanceled" | "InvalidInput" | "WrongRegionS3Bucket" | "WrongRegionS3Output" | "WrongRegionRobotApplication" | "WrongRegionSimulationApplication" | "UploadContentMismatchError")
        def failure_reason: () -> ::String
        def client_request_token: () -> ::String
        def output_location: () -> Types::OutputLocation
        def logging_config: () -> Types::LoggingConfig
        def max_job_duration_in_seconds: () -> ::Integer
        def simulation_time_millis: () -> ::Integer
        def iam_role: () -> ::String
        def robot_applications: () -> ::Array[Types::RobotApplicationConfig]
        def simulation_applications: () -> ::Array[Types::SimulationApplicationConfig]
        def data_sources: () -> ::Array[Types::DataSource]
        def tags: () -> ::Hash[::String, ::String]
        def vpc_config: () -> Types::VPCConfigResponse
        def network_interface: () -> Types::NetworkInterface
        def compute: () -> Types::ComputeResponse
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_simulation_job-instance_method
      def describe_simulation_job: (
                                     job: ::String
                                   ) -> _DescribeSimulationJobResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSimulationJobResponseSuccess

      interface _DescribeSimulationJobBatchResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeSimulationJobBatchResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "InProgress" | "Failed" | "Completed" | "Canceled" | "Canceling" | "Completing" | "TimingOut" | "TimedOut")
        def last_updated_at: () -> ::Time
        def created_at: () -> ::Time
        def client_request_token: () -> ::String
        def batch_policy: () -> Types::BatchPolicy
        def failure_code: () -> ("InternalServiceError")
        def failure_reason: () -> ::String
        def failed_requests: () -> ::Array[Types::FailedCreateSimulationJobRequest]
        def pending_requests: () -> ::Array[Types::SimulationJobRequest]
        def created_requests: () -> ::Array[Types::SimulationJobSummary]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_simulation_job_batch-instance_method
      def describe_simulation_job_batch: (
                                           batch: ::String
                                         ) -> _DescribeSimulationJobBatchResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeSimulationJobBatchResponseSuccess

      interface _DescribeWorldResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeWorldResponse]
        def arn: () -> ::String
        def generation_job: () -> ::String
        def template: () -> ::String
        def created_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
        def world_description_body: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_world-instance_method
      def describe_world: (
                            world: ::String
                          ) -> _DescribeWorldResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeWorldResponseSuccess

      interface _DescribeWorldExportJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeWorldExportJobResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "Running" | "Completed" | "Failed" | "Canceling" | "Canceled")
        def created_at: () -> ::Time
        def failure_code: () -> ("InternalServiceError" | "LimitExceeded" | "ResourceNotFound" | "RequestThrottled" | "InvalidInput" | "AccessDenied")
        def failure_reason: () -> ::String
        def client_request_token: () -> ::String
        def worlds: () -> ::Array[::String]
        def output_location: () -> Types::OutputLocation
        def iam_role: () -> ::String
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_world_export_job-instance_method
      def describe_world_export_job: (
                                       job: ::String
                                     ) -> _DescribeWorldExportJobResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeWorldExportJobResponseSuccess

      interface _DescribeWorldGenerationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeWorldGenerationJobResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "Running" | "Completed" | "Failed" | "PartialFailed" | "Canceling" | "Canceled")
        def created_at: () -> ::Time
        def failure_code: () -> ("InternalServiceError" | "LimitExceeded" | "ResourceNotFound" | "RequestThrottled" | "InvalidInput" | "AllWorldGenerationFailed")
        def failure_reason: () -> ::String
        def client_request_token: () -> ::String
        def template: () -> ::String
        def world_count: () -> Types::WorldCount
        def finished_worlds_summary: () -> Types::FinishedWorldsSummary
        def tags: () -> ::Hash[::String, ::String]
        def world_tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_world_generation_job-instance_method
      def describe_world_generation_job: (
                                           job: ::String
                                         ) -> _DescribeWorldGenerationJobResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeWorldGenerationJobResponseSuccess

      interface _DescribeWorldTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeWorldTemplateResponse]
        def arn: () -> ::String
        def client_request_token: () -> ::String
        def name: () -> ::String
        def created_at: () -> ::Time
        def last_updated_at: () -> ::Time
        def tags: () -> ::Hash[::String, ::String]
        def version: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#describe_world_template-instance_method
      def describe_world_template: (
                                     template: ::String
                                   ) -> _DescribeWorldTemplateResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeWorldTemplateResponseSuccess

      interface _GetWorldTemplateBodyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetWorldTemplateBodyResponse]
        def template_body: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#get_world_template_body-instance_method
      def get_world_template_body: (
                                     ?template: ::String,
                                     ?generation_job: ::String
                                   ) -> _GetWorldTemplateBodyResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetWorldTemplateBodyResponseSuccess

      interface _ListDeploymentJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDeploymentJobsResponse]
        def deployment_jobs: () -> ::Array[Types::DeploymentJob]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_deployment_jobs-instance_method
      def list_deployment_jobs: (
                                  ?filters: Array[
                                    {
                                      name: ::String?,
                                      values: Array[::String]?
                                    },
                                  ],
                                  ?next_token: ::String,
                                  ?max_results: ::Integer
                                ) -> _ListDeploymentJobsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDeploymentJobsResponseSuccess

      interface _ListFleetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListFleetsResponse]
        def fleet_details: () -> ::Array[Types::Fleet]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_fleets-instance_method
      def list_fleets: (
                         ?next_token: ::String,
                         ?max_results: ::Integer,
                         ?filters: Array[
                           {
                             name: ::String?,
                             values: Array[::String]?
                           },
                         ]
                       ) -> _ListFleetsResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListFleetsResponseSuccess

      interface _ListRobotApplicationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListRobotApplicationsResponse]
        def robot_application_summaries: () -> ::Array[Types::RobotApplicationSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_robot_applications-instance_method
      def list_robot_applications: (
                                     ?version_qualifier: ::String,
                                     ?next_token: ::String,
                                     ?max_results: ::Integer,
                                     ?filters: Array[
                                       {
                                         name: ::String?,
                                         values: Array[::String]?
                                       },
                                     ]
                                   ) -> _ListRobotApplicationsResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListRobotApplicationsResponseSuccess

      interface _ListRobotsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListRobotsResponse]
        def robots: () -> ::Array[Types::Robot]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_robots-instance_method
      def list_robots: (
                         ?next_token: ::String,
                         ?max_results: ::Integer,
                         ?filters: Array[
                           {
                             name: ::String?,
                             values: Array[::String]?
                           },
                         ]
                       ) -> _ListRobotsResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListRobotsResponseSuccess

      interface _ListSimulationApplicationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListSimulationApplicationsResponse]
        def simulation_application_summaries: () -> ::Array[Types::SimulationApplicationSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_simulation_applications-instance_method
      def list_simulation_applications: (
                                          ?version_qualifier: ::String,
                                          ?next_token: ::String,
                                          ?max_results: ::Integer,
                                          ?filters: Array[
                                            {
                                              name: ::String?,
                                              values: Array[::String]?
                                            },
                                          ]
                                        ) -> _ListSimulationApplicationsResponseSuccess
                                      | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListSimulationApplicationsResponseSuccess

      interface _ListSimulationJobBatchesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListSimulationJobBatchesResponse]
        def simulation_job_batch_summaries: () -> ::Array[Types::SimulationJobBatchSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_simulation_job_batches-instance_method
      def list_simulation_job_batches: (
                                         ?next_token: ::String,
                                         ?max_results: ::Integer,
                                         ?filters: Array[
                                           {
                                             name: ::String?,
                                             values: Array[::String]?
                                           },
                                         ]
                                       ) -> _ListSimulationJobBatchesResponseSuccess
                                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListSimulationJobBatchesResponseSuccess

      interface _ListSimulationJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListSimulationJobsResponse]
        def simulation_job_summaries: () -> ::Array[Types::SimulationJobSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_simulation_jobs-instance_method
      def list_simulation_jobs: (
                                  ?next_token: ::String,
                                  ?max_results: ::Integer,
                                  ?filters: Array[
                                    {
                                      name: ::String?,
                                      values: Array[::String]?
                                    },
                                  ]
                                ) -> _ListSimulationJobsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListSimulationJobsResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ListWorldExportJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListWorldExportJobsResponse]
        def world_export_job_summaries: () -> ::Array[Types::WorldExportJobSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_world_export_jobs-instance_method
      def list_world_export_jobs: (
                                    ?next_token: ::String,
                                    ?max_results: ::Integer,
                                    ?filters: Array[
                                      {
                                        name: ::String?,
                                        values: Array[::String]?
                                      },
                                    ]
                                  ) -> _ListWorldExportJobsResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListWorldExportJobsResponseSuccess

      interface _ListWorldGenerationJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListWorldGenerationJobsResponse]
        def world_generation_job_summaries: () -> ::Array[Types::WorldGenerationJobSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_world_generation_jobs-instance_method
      def list_world_generation_jobs: (
                                        ?next_token: ::String,
                                        ?max_results: ::Integer,
                                        ?filters: Array[
                                          {
                                            name: ::String?,
                                            values: Array[::String]?
                                          },
                                        ]
                                      ) -> _ListWorldGenerationJobsResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListWorldGenerationJobsResponseSuccess

      interface _ListWorldTemplatesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListWorldTemplatesResponse]
        def template_summaries: () -> ::Array[Types::TemplateSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_world_templates-instance_method
      def list_world_templates: (
                                  ?next_token: ::String,
                                  ?max_results: ::Integer
                                ) -> _ListWorldTemplatesResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListWorldTemplatesResponseSuccess

      interface _ListWorldsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListWorldsResponse]
        def world_summaries: () -> ::Array[Types::WorldSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#list_worlds-instance_method
      def list_worlds: (
                         ?next_token: ::String,
                         ?max_results: ::Integer,
                         ?filters: Array[
                           {
                             name: ::String?,
                             values: Array[::String]?
                           },
                         ]
                       ) -> _ListWorldsResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListWorldsResponseSuccess

      interface _RegisterRobotResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterRobotResponse]
        def fleet: () -> ::String
        def robot: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#register_robot-instance_method
      def register_robot: (
                            fleet: ::String,
                            robot: ::String
                          ) -> _RegisterRobotResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterRobotResponseSuccess

      interface _RestartSimulationJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RestartSimulationJobResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#restart_simulation_job-instance_method
      def restart_simulation_job: (
                                    job: ::String
                                  ) -> _RestartSimulationJobResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RestartSimulationJobResponseSuccess

      interface _StartSimulationJobBatchResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartSimulationJobBatchResponse]
        def arn: () -> ::String
        def status: () -> ("Pending" | "InProgress" | "Failed" | "Completed" | "Canceled" | "Canceling" | "Completing" | "TimingOut" | "TimedOut")
        def created_at: () -> ::Time
        def client_request_token: () -> ::String
        def batch_policy: () -> Types::BatchPolicy
        def failure_code: () -> ("InternalServiceError")
        def failure_reason: () -> ::String
        def failed_requests: () -> ::Array[Types::FailedCreateSimulationJobRequest]
        def pending_requests: () -> ::Array[Types::SimulationJobRequest]
        def created_requests: () -> ::Array[Types::SimulationJobSummary]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#start_simulation_job_batch-instance_method
      def start_simulation_job_batch: (
                                        ?client_request_token: ::String,
                                        ?batch_policy: {
                                          timeout_in_seconds: ::Integer?,
                                          max_concurrency: ::Integer?
                                        },
                                        create_simulation_job_requests: Array[
                                          {
                                            output_location: {
                                              s3_bucket: ::String?,
                                              s3_prefix: ::String?
                                            }?,
                                            logging_config: {
                                              record_all_ros_topics: bool?
                                            }?,
                                            max_job_duration_in_seconds: ::Integer,
                                            iam_role: ::String?,
                                            failure_behavior: ("Fail" | "Continue")?,
                                            use_default_applications: bool?,
                                            robot_applications: Array[
                                              {
                                                application: ::String,
                                                application_version: ::String?,
                                                launch_config: {
                                                  package_name: ::String?,
                                                  launch_file: ::String?,
                                                  environment_variables: Hash[::String, ::String]?,
                                                  port_forwarding_config: {
                                                    port_mappings: Array[
                                                      {
                                                        job_port: ::Integer,
                                                        application_port: ::Integer,
                                                        enable_on_public_ip: bool?
                                                      },
                                                    ]?
                                                  }?,
                                                  stream_ui: bool?,
                                                  command: Array[::String]?
                                                },
                                                upload_configurations: Array[
                                                  {
                                                    name: ::String,
                                                    path: ::String,
                                                    upload_behavior: ("UPLOAD_ON_TERMINATE" | "UPLOAD_ROLLING_AUTO_REMOVE")
                                                  },
                                                ]?,
                                                use_default_upload_configurations: bool?,
                                                tools: Array[
                                                  {
                                                    stream_ui: bool?,
                                                    name: ::String,
                                                    command: ::String,
                                                    stream_output_to_cloud_watch: bool?,
                                                    exit_behavior: ("FAIL" | "RESTART")?
                                                  },
                                                ]?,
                                                use_default_tools: bool?
                                              },
                                            ]?,
                                            simulation_applications: Array[
                                              {
                                                application: ::String,
                                                application_version: ::String?,
                                                launch_config: {
                                                  package_name: ::String?,
                                                  launch_file: ::String?,
                                                  environment_variables: Hash[::String, ::String]?,
                                                  port_forwarding_config: {
                                                    port_mappings: Array[
                                                      {
                                                        job_port: ::Integer,
                                                        application_port: ::Integer,
                                                        enable_on_public_ip: bool?
                                                      },
                                                    ]?
                                                  }?,
                                                  stream_ui: bool?,
                                                  command: Array[::String]?
                                                },
                                                upload_configurations: Array[
                                                  {
                                                    name: ::String,
                                                    path: ::String,
                                                    upload_behavior: ("UPLOAD_ON_TERMINATE" | "UPLOAD_ROLLING_AUTO_REMOVE")
                                                  },
                                                ]?,
                                                world_configs: Array[
                                                  {
                                                    world: ::String?
                                                  },
                                                ]?,
                                                use_default_upload_configurations: bool?,
                                                tools: Array[
                                                  {
                                                    stream_ui: bool?,
                                                    name: ::String,
                                                    command: ::String,
                                                    stream_output_to_cloud_watch: bool?,
                                                    exit_behavior: ("FAIL" | "RESTART")?
                                                  },
                                                ]?,
                                                use_default_tools: bool?
                                              },
                                            ]?,
                                            data_sources: Array[
                                              {
                                                name: ::String,
                                                s3_bucket: ::String,
                                                s3_keys: Array[::String],
                                                type: ("Prefix" | "Archive" | "File")?,
                                                destination: ::String?
                                              },
                                            ]?,
                                            vpc_config: {
                                              subnets: Array[::String],
                                              security_groups: Array[::String]?,
                                              assign_public_ip: bool?
                                            }?,
                                            compute: {
                                              simulation_unit_limit: ::Integer?,
                                              compute_type: ("CPU" | "GPU_AND_CPU")?,
                                              gpu_unit_limit: ::Integer?
                                            }?,
                                            tags: Hash[::String, ::String]?
                                          },
                                        ],
                                        ?tags: Hash[::String, ::String]
                                      ) -> _StartSimulationJobBatchResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartSimulationJobBatchResponseSuccess

      interface _SyncDeploymentJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::SyncDeploymentJobResponse]
        def arn: () -> ::String
        def fleet: () -> ::String
        def status: () -> ("Pending" | "Preparing" | "InProgress" | "Failed" | "Succeeded" | "Canceled")
        def deployment_config: () -> Types::DeploymentConfig
        def deployment_application_configs: () -> ::Array[Types::DeploymentApplicationConfig]
        def failure_reason: () -> ::String
        def failure_code: () -> ("ResourceNotFound" | "EnvironmentSetupError" | "EtagMismatch" | "FailureThresholdBreached" | "RobotDeploymentAborted" | "RobotDeploymentNoResponse" | "RobotAgentConnectionTimeout" | "GreengrassDeploymentFailed" | "InvalidGreengrassGroup" | "MissingRobotArchitecture" | "MissingRobotApplicationArchitecture" | "MissingRobotDeploymentResource" | "GreengrassGroupVersionDoesNotExist" | "LambdaDeleted" | "ExtractingBundleFailure" | "PreLaunchFileFailure" | "PostLaunchFileFailure" | "BadPermissionError" | "DownloadConditionFailed" | "BadLambdaAssociated" | "InternalServerError" | "RobotApplicationDoesNotExist" | "DeploymentFleetDoesNotExist" | "FleetDeploymentTimeout")
        def created_at: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#sync_deployment_job-instance_method
      def sync_deployment_job: (
                                 client_request_token: ::String,
                                 fleet: ::String
                               ) -> _SyncDeploymentJobResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _SyncDeploymentJobResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateRobotApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateRobotApplicationResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def last_updated_at: () -> ::Time
        def revision_id: () -> ::String
        def environment: () -> Types::Environment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#update_robot_application-instance_method
      def update_robot_application: (
                                      application: ::String,
                                      ?sources: Array[
                                        {
                                          s3_bucket: ::String?,
                                          s3_key: ::String?,
                                          architecture: ("X86_64" | "ARM64" | "ARMHF")?
                                        },
                                      ],
                                      robot_software_suite: {
                                        name: ("ROS" | "ROS2" | "General")?,
                                        version: ("Kinetic" | "Melodic" | "Dashing" | "Foxy")?
                                      },
                                      ?current_revision_id: ::String,
                                      ?environment: {
                                        uri: ::String?
                                      }
                                    ) -> _UpdateRobotApplicationResponseSuccess
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateRobotApplicationResponseSuccess

      interface _UpdateSimulationApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateSimulationApplicationResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def version: () -> ::String
        def sources: () -> ::Array[Types::Source]
        def simulation_software_suite: () -> Types::SimulationSoftwareSuite
        def robot_software_suite: () -> Types::RobotSoftwareSuite
        def rendering_engine: () -> Types::RenderingEngine
        def last_updated_at: () -> ::Time
        def revision_id: () -> ::String
        def environment: () -> Types::Environment
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#update_simulation_application-instance_method
      def update_simulation_application: (
                                           application: ::String,
                                           ?sources: Array[
                                             {
                                               s3_bucket: ::String?,
                                               s3_key: ::String?,
                                               architecture: ("X86_64" | "ARM64" | "ARMHF")?
                                             },
                                           ],
                                           simulation_software_suite: {
                                             name: ("Gazebo" | "RosbagPlay" | "SimulationRuntime")?,
                                             version: ::String?
                                           },
                                           robot_software_suite: {
                                             name: ("ROS" | "ROS2" | "General")?,
                                             version: ("Kinetic" | "Melodic" | "Dashing" | "Foxy")?
                                           },
                                           ?rendering_engine: {
                                             name: ("OGRE")?,
                                             version: ::String?
                                           },
                                           ?current_revision_id: ::String,
                                           ?environment: {
                                             uri: ::String?
                                           }
                                         ) -> _UpdateSimulationApplicationResponseSuccess
                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateSimulationApplicationResponseSuccess

      interface _UpdateWorldTemplateResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateWorldTemplateResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def created_at: () -> ::Time
        def last_updated_at: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/RoboMaker/Client.html#update_world_template-instance_method
      def update_world_template: (
                                   template: ::String,
                                   ?name: ::String,
                                   ?template_body: ::String,
                                   ?template_location: {
                                     s3_bucket: ::String,
                                     s3_key: ::String
                                   }
                                 ) -> _UpdateWorldTemplateResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateWorldTemplateResponseSuccess
    end
  end
end

