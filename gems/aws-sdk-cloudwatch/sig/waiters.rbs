# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module CloudWatch
    module Waiters

      class AlarmExists
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    ?alarm_names: Array[::String],
                    ?alarm_name_prefix: ::String,
                    ?alarm_types: Array[("CompositeAlarm" | "MetricAlarm")],
                    ?children_of_alarm_name: ::String,
                    ?parents_of_alarm_name: ::String,
                    ?state_value: ("OK" | "ALARM" | "INSUFFICIENT_DATA"),
                    ?action_prefix: ::String,
                    ?max_records: ::Integer,
                    ?next_token: ::String
                  ) -> Client::_DescribeAlarmsResponseSuccess
                | (?Hash[Symbol, untyped]) -> Client::_DescribeAlarmsResponseSuccess
      end

      class CompositeAlarmExists
        def initialize: (?client: Client, ?max_attempts: Integer, ?delay: Integer, ?before_attempt: Proc, ?before_wait: Proc) -> void
                      | (?Hash[Symbol, untyped]) -> void

        def wait: (
                    ?alarm_names: Array[::String],
                    ?alarm_name_prefix: ::String,
                    ?alarm_types: Array[("CompositeAlarm" | "MetricAlarm")],
                    ?children_of_alarm_name: ::String,
                    ?parents_of_alarm_name: ::String,
                    ?state_value: ("OK" | "ALARM" | "INSUFFICIENT_DATA"),
                    ?action_prefix: ::String,
                    ?max_records: ::Integer,
                    ?next_token: ::String
                  ) -> Client::_DescribeAlarmsResponseSuccess
                | (?Hash[Symbol, untyped]) -> Client::_DescribeAlarmsResponseSuccess
      end
    end
  end
end
