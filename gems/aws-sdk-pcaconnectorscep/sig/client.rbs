# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module PcaConnectorScep
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CreateChallengeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateChallengeResponse]
        def challenge: () -> Types::Challenge
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#create_challenge-instance_method
      def create_challenge: (
                              connector_arn: ::String,
                              ?client_token: ::String,
                              ?tags: Hash[::String, ::String]
                            ) -> _CreateChallengeResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateChallengeResponseSuccess

      interface _CreateConnectorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateConnectorResponse]
        def connector_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#create_connector-instance_method
      def create_connector: (
                              certificate_authority_arn: ::String,
                              ?mobile_device_management: {
                                intune: {
                                  azure_application_id: ::String,
                                  domain: ::String
                                }?
                              },
                              ?client_token: ::String,
                              ?tags: Hash[::String, ::String]
                            ) -> _CreateConnectorResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateConnectorResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#delete_challenge-instance_method
      def delete_challenge: (
                              challenge_arn: ::String
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#delete_connector-instance_method
      def delete_connector: (
                              connector_arn: ::String
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _GetChallengeMetadataResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetChallengeMetadataResponse]
        def challenge_metadata: () -> Types::ChallengeMetadata
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#get_challenge_metadata-instance_method
      def get_challenge_metadata: (
                                    challenge_arn: ::String
                                  ) -> _GetChallengeMetadataResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetChallengeMetadataResponseSuccess

      interface _GetChallengePasswordResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetChallengePasswordResponse]
        def password: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#get_challenge_password-instance_method
      def get_challenge_password: (
                                    challenge_arn: ::String
                                  ) -> _GetChallengePasswordResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetChallengePasswordResponseSuccess

      interface _GetConnectorResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetConnectorResponse]
        def connector: () -> Types::Connector
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#get_connector-instance_method
      def get_connector: (
                           connector_arn: ::String
                         ) -> _GetConnectorResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetConnectorResponseSuccess

      interface _ListChallengeMetadataResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListChallengeMetadataResponse]
        def challenges: () -> ::Array[Types::ChallengeMetadataSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#list_challenge_metadata-instance_method
      def list_challenge_metadata: (
                                     ?max_results: ::Integer,
                                     ?next_token: ::String,
                                     connector_arn: ::String
                                   ) -> _ListChallengeMetadataResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListChallengeMetadataResponseSuccess

      interface _ListConnectorsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListConnectorsResponse]
        def connectors: () -> ::Array[Types::ConnectorSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#list_connectors-instance_method
      def list_connectors: (
                             ?max_results: ::Integer,
                             ?next_token: ::String
                           ) -> _ListConnectorsResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListConnectorsResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PcaConnectorScep/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
    end
  end
end

