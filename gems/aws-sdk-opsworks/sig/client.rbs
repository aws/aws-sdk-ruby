# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module OpsWorks
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?simple_json: bool,
                      ?stub_responses: untyped,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#assign_instance-instance_method
      def assign_instance: (
                             instance_id: ::String,
                             layer_ids: Array[::String]
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#assign_volume-instance_method
      def assign_volume: (
                           volume_id: ::String,
                           ?instance_id: ::String
                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#associate_elastic_ip-instance_method
      def associate_elastic_ip: (
                                  elastic_ip: ::String,
                                  ?instance_id: ::String
                                ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#attach_elastic_load_balancer-instance_method
      def attach_elastic_load_balancer: (
                                          elastic_load_balancer_name: ::String,
                                          layer_id: ::String
                                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _CloneStackResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CloneStackResult]
        def stack_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#clone_stack-instance_method
      def clone_stack: (
                         source_stack_id: ::String,
                         ?name: ::String,
                         ?region: ::String,
                         ?vpc_id: ::String,
                         ?attributes: Hash[("Color"), ::String],
                         service_role_arn: ::String,
                         ?default_instance_profile_arn: ::String,
                         ?default_os: ::String,
                         ?hostname_theme: ::String,
                         ?default_availability_zone: ::String,
                         ?default_subnet_id: ::String,
                         ?custom_json: ::String,
                         ?configuration_manager: {
                           name: ::String?,
                           version: ::String?
                         },
                         ?chef_configuration: {
                           manage_berkshelf: bool?,
                           berkshelf_version: ::String?
                         },
                         ?use_custom_cookbooks: bool,
                         ?use_opsworks_security_groups: bool,
                         ?custom_cookbooks_source: {
                           type: ("git" | "svn" | "archive" | "s3")?,
                           url: ::String?,
                           username: ::String?,
                           password: ::String?,
                           ssh_key: ::String?,
                           revision: ::String?
                         },
                         ?default_ssh_key_name: ::String,
                         ?clone_permissions: bool,
                         ?clone_app_ids: Array[::String],
                         ?default_root_device_type: ("ebs" | "instance-store"),
                         ?agent_version: ::String
                       ) -> _CloneStackResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CloneStackResponseSuccess

      interface _CreateAppResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateAppResult]
        def app_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#create_app-instance_method
      def create_app: (
                        stack_id: ::String,
                        ?shortname: ::String,
                        name: ::String,
                        ?description: ::String,
                        ?data_sources: Array[
                          {
                            type: ::String?,
                            arn: ::String?,
                            database_name: ::String?
                          },
                        ],
                        type: ("aws-flow-ruby" | "java" | "rails" | "php" | "nodejs" | "static" | "other"),
                        ?app_source: {
                          type: ("git" | "svn" | "archive" | "s3")?,
                          url: ::String?,
                          username: ::String?,
                          password: ::String?,
                          ssh_key: ::String?,
                          revision: ::String?
                        },
                        ?domains: Array[::String],
                        ?enable_ssl: bool,
                        ?ssl_configuration: {
                          certificate: ::String,
                          private_key: ::String,
                          chain: ::String?
                        },
                        ?attributes: Hash[("DocumentRoot" | "RailsEnv" | "AutoBundleOnDeploy" | "AwsFlowRubySettings"), ::String],
                        ?environment: Array[
                          {
                            key: ::String,
                            value: ::String,
                            secure: bool?
                          },
                        ]
                      ) -> _CreateAppResponseSuccess
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateAppResponseSuccess

      interface _CreateDeploymentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDeploymentResult]
        def deployment_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#create_deployment-instance_method
      def create_deployment: (
                               stack_id: ::String,
                               ?app_id: ::String,
                               ?instance_ids: Array[::String],
                               ?layer_ids: Array[::String],
                               command: {
                                 name: ("install_dependencies" | "update_dependencies" | "update_custom_cookbooks" | "execute_recipes" | "configure" | "setup" | "deploy" | "rollback" | "start" | "stop" | "restart" | "undeploy"),
                                 args: Hash[::String, Array[::String]]?
                               },
                               ?comment: ::String,
                               ?custom_json: ::String
                             ) -> _CreateDeploymentResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDeploymentResponseSuccess

      interface _CreateInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateInstanceResult]
        def instance_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#create_instance-instance_method
      def create_instance: (
                             stack_id: ::String,
                             layer_ids: Array[::String],
                             instance_type: ::String,
                             ?auto_scaling_type: ("load" | "timer"),
                             ?hostname: ::String,
                             ?os: ::String,
                             ?ami_id: ::String,
                             ?ssh_key_name: ::String,
                             ?availability_zone: ::String,
                             ?virtualization_type: ::String,
                             ?subnet_id: ::String,
                             ?architecture: ("x86_64" | "i386"),
                             ?root_device_type: ("ebs" | "instance-store"),
                             ?block_device_mappings: Array[
                               {
                                 device_name: ::String?,
                                 no_device: ::String?,
                                 virtual_name: ::String?,
                                 ebs: {
                                   snapshot_id: ::String?,
                                   iops: ::Integer?,
                                   volume_size: ::Integer?,
                                   volume_type: ("gp2" | "io1" | "standard")?,
                                   delete_on_termination: bool?
                                 }?
                               },
                             ],
                             ?install_updates_on_boot: bool,
                             ?ebs_optimized: bool,
                             ?agent_version: ::String,
                             ?tenancy: ::String
                           ) -> _CreateInstanceResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateInstanceResponseSuccess

      interface _CreateLayerResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateLayerResult]
        def layer_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#create_layer-instance_method
      def create_layer: (
                          stack_id: ::String,
                          type: ("aws-flow-ruby" | "ecs-cluster" | "java-app" | "lb" | "web" | "php-app" | "rails-app" | "nodejs-app" | "memcached" | "db-master" | "monitoring-master" | "custom"),
                          name: ::String,
                          shortname: ::String,
                          ?attributes: Hash[("EcsClusterArn" | "EnableHaproxyStats" | "HaproxyStatsUrl" | "HaproxyStatsUser" | "HaproxyStatsPassword" | "HaproxyHealthCheckUrl" | "HaproxyHealthCheckMethod" | "MysqlRootPassword" | "MysqlRootPasswordUbiquitous" | "GangliaUrl" | "GangliaUser" | "GangliaPassword" | "MemcachedMemory" | "NodejsVersion" | "RubyVersion" | "RubygemsVersion" | "ManageBundler" | "BundlerVersion" | "RailsStack" | "PassengerVersion" | "Jvm" | "JvmVersion" | "JvmOptions" | "JavaAppServer" | "JavaAppServerVersion"), ::String],
                          ?cloud_watch_logs_configuration: {
                            enabled: bool?,
                            log_streams: Array[
                              {
                                log_group_name: ::String?,
                                datetime_format: ::String?,
                                time_zone: ("LOCAL" | "UTC")?,
                                file: ::String?,
                                file_fingerprint_lines: ::String?,
                                multi_line_start_pattern: ::String?,
                                initial_position: ("start_of_file" | "end_of_file")?,
                                encoding: ("ascii" | "big5" | "big5hkscs" | "cp037" | "cp424" | "cp437" | "cp500" | "cp720" | "cp737" | "cp775" | "cp850" | "cp852" | "cp855" | "cp856" | "cp857" | "cp858" | "cp860" | "cp861" | "cp862" | "cp863" | "cp864" | "cp865" | "cp866" | "cp869" | "cp874" | "cp875" | "cp932" | "cp949" | "cp950" | "cp1006" | "cp1026" | "cp1140" | "cp1250" | "cp1251" | "cp1252" | "cp1253" | "cp1254" | "cp1255" | "cp1256" | "cp1257" | "cp1258" | "euc_jp" | "euc_jis_2004" | "euc_jisx0213" | "euc_kr" | "gb2312" | "gbk" | "gb18030" | "hz" | "iso2022_jp" | "iso2022_jp_1" | "iso2022_jp_2" | "iso2022_jp_2004" | "iso2022_jp_3" | "iso2022_jp_ext" | "iso2022_kr" | "latin_1" | "iso8859_2" | "iso8859_3" | "iso8859_4" | "iso8859_5" | "iso8859_6" | "iso8859_7" | "iso8859_8" | "iso8859_9" | "iso8859_10" | "iso8859_13" | "iso8859_14" | "iso8859_15" | "iso8859_16" | "johab" | "koi8_r" | "koi8_u" | "mac_cyrillic" | "mac_greek" | "mac_iceland" | "mac_latin2" | "mac_roman" | "mac_turkish" | "ptcp154" | "shift_jis" | "shift_jis_2004" | "shift_jisx0213" | "utf_32" | "utf_32_be" | "utf_32_le" | "utf_16" | "utf_16_be" | "utf_16_le" | "utf_7" | "utf_8" | "utf_8_sig")?,
                                buffer_duration: ::Integer?,
                                batch_count: ::Integer?,
                                batch_size: ::Integer?
                              },
                            ]?
                          },
                          ?custom_instance_profile_arn: ::String,
                          ?custom_json: ::String,
                          ?custom_security_group_ids: Array[::String],
                          ?packages: Array[::String],
                          ?volume_configurations: Array[
                            {
                              mount_point: ::String,
                              raid_level: ::Integer?,
                              number_of_disks: ::Integer,
                              size: ::Integer,
                              volume_type: ::String?,
                              iops: ::Integer?,
                              encrypted: bool?
                            },
                          ],
                          ?enable_auto_healing: bool,
                          ?auto_assign_elastic_ips: bool,
                          ?auto_assign_public_ips: bool,
                          ?custom_recipes: {
                            setup: Array[::String]?,
                            configure: Array[::String]?,
                            deploy: Array[::String]?,
                            undeploy: Array[::String]?,
                            shutdown: Array[::String]?
                          },
                          ?install_updates_on_boot: bool,
                          ?use_ebs_optimized_instances: bool,
                          ?lifecycle_event_configuration: {
                            shutdown: {
                              execution_timeout: ::Integer?,
                              delay_until_elb_connections_drained: bool?
                            }?
                          }
                        ) -> _CreateLayerResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateLayerResponseSuccess

      interface _CreateStackResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateStackResult]
        def stack_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#create_stack-instance_method
      def create_stack: (
                          name: ::String,
                          region: ::String,
                          ?vpc_id: ::String,
                          ?attributes: Hash[("Color"), ::String],
                          service_role_arn: ::String,
                          default_instance_profile_arn: ::String,
                          ?default_os: ::String,
                          ?hostname_theme: ::String,
                          ?default_availability_zone: ::String,
                          ?default_subnet_id: ::String,
                          ?custom_json: ::String,
                          ?configuration_manager: {
                            name: ::String?,
                            version: ::String?
                          },
                          ?chef_configuration: {
                            manage_berkshelf: bool?,
                            berkshelf_version: ::String?
                          },
                          ?use_custom_cookbooks: bool,
                          ?use_opsworks_security_groups: bool,
                          ?custom_cookbooks_source: {
                            type: ("git" | "svn" | "archive" | "s3")?,
                            url: ::String?,
                            username: ::String?,
                            password: ::String?,
                            ssh_key: ::String?,
                            revision: ::String?
                          },
                          ?default_ssh_key_name: ::String,
                          ?default_root_device_type: ("ebs" | "instance-store"),
                          ?agent_version: ::String
                        ) -> _CreateStackResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateStackResponseSuccess

      interface _CreateUserProfileResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateUserProfileResult]
        def iam_user_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#create_user_profile-instance_method
      def create_user_profile: (
                                 iam_user_arn: ::String,
                                 ?ssh_username: ::String,
                                 ?ssh_public_key: ::String,
                                 ?allow_self_management: bool
                               ) -> _CreateUserProfileResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateUserProfileResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#delete_app-instance_method
      def delete_app: (
                        app_id: ::String
                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#delete_instance-instance_method
      def delete_instance: (
                             instance_id: ::String,
                             ?delete_elastic_ip: bool,
                             ?delete_volumes: bool
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#delete_layer-instance_method
      def delete_layer: (
                          layer_id: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#delete_stack-instance_method
      def delete_stack: (
                          stack_id: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#delete_user_profile-instance_method
      def delete_user_profile: (
                                 iam_user_arn: ::String
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#deregister_ecs_cluster-instance_method
      def deregister_ecs_cluster: (
                                    ecs_cluster_arn: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#deregister_elastic_ip-instance_method
      def deregister_elastic_ip: (
                                   elastic_ip: ::String
                                 ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#deregister_instance-instance_method
      def deregister_instance: (
                                 instance_id: ::String
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#deregister_rds_db_instance-instance_method
      def deregister_rds_db_instance: (
                                        rds_db_instance_arn: ::String
                                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#deregister_volume-instance_method
      def deregister_volume: (
                               volume_id: ::String
                             ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _DescribeAgentVersionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAgentVersionsResult]
        def agent_versions: () -> ::Array[Types::AgentVersion]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_agent_versions-instance_method
      def describe_agent_versions: (
                                     ?stack_id: ::String,
                                     ?configuration_manager: {
                                       name: ::String?,
                                       version: ::String?
                                     }
                                   ) -> _DescribeAgentVersionsResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAgentVersionsResponseSuccess

      interface _DescribeAppsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeAppsResult]
        def apps: () -> ::Array[Types::App]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_apps-instance_method
      def describe_apps: (
                           ?stack_id: ::String,
                           ?app_ids: Array[::String]
                         ) -> _DescribeAppsResponseSuccess
                       | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeAppsResponseSuccess

      interface _DescribeCommandsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeCommandsResult]
        def commands: () -> ::Array[Types::Command]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_commands-instance_method
      def describe_commands: (
                               ?deployment_id: ::String,
                               ?instance_id: ::String,
                               ?command_ids: Array[::String]
                             ) -> _DescribeCommandsResponseSuccess
                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeCommandsResponseSuccess

      interface _DescribeDeploymentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeDeploymentsResult]
        def deployments: () -> ::Array[Types::Deployment]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_deployments-instance_method
      def describe_deployments: (
                                  ?stack_id: ::String,
                                  ?app_id: ::String,
                                  ?deployment_ids: Array[::String]
                                ) -> _DescribeDeploymentsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeDeploymentsResponseSuccess

      interface _DescribeEcsClustersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeEcsClustersResult]
        def ecs_clusters: () -> ::Array[Types::EcsCluster]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_ecs_clusters-instance_method
      def describe_ecs_clusters: (
                                   ?ecs_cluster_arns: Array[::String],
                                   ?stack_id: ::String,
                                   ?next_token: ::String,
                                   ?max_results: ::Integer
                                 ) -> _DescribeEcsClustersResponseSuccess
                               | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEcsClustersResponseSuccess

      interface _DescribeElasticIpsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeElasticIpsResult]
        def elastic_ips: () -> ::Array[Types::ElasticIp]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_elastic_ips-instance_method
      def describe_elastic_ips: (
                                  ?instance_id: ::String,
                                  ?stack_id: ::String,
                                  ?ips: Array[::String]
                                ) -> _DescribeElasticIpsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeElasticIpsResponseSuccess

      interface _DescribeElasticLoadBalancersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeElasticLoadBalancersResult]
        def elastic_load_balancers: () -> ::Array[Types::ElasticLoadBalancer]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_elastic_load_balancers-instance_method
      def describe_elastic_load_balancers: (
                                             ?stack_id: ::String,
                                             ?layer_ids: Array[::String]
                                           ) -> _DescribeElasticLoadBalancersResponseSuccess
                                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeElasticLoadBalancersResponseSuccess

      interface _DescribeInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeInstancesResult]
        def instances: () -> ::Array[Types::Instance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_instances-instance_method
      def describe_instances: (
                                ?stack_id: ::String,
                                ?layer_id: ::String,
                                ?instance_ids: Array[::String]
                              ) -> _DescribeInstancesResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeInstancesResponseSuccess

      interface _DescribeLayersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLayersResult]
        def layers: () -> ::Array[Types::Layer]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_layers-instance_method
      def describe_layers: (
                             ?stack_id: ::String,
                             ?layer_ids: Array[::String]
                           ) -> _DescribeLayersResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLayersResponseSuccess

      interface _DescribeLoadBasedAutoScalingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeLoadBasedAutoScalingResult]
        def load_based_auto_scaling_configurations: () -> ::Array[Types::LoadBasedAutoScalingConfiguration]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_load_based_auto_scaling-instance_method
      def describe_load_based_auto_scaling: (
                                              layer_ids: Array[::String]
                                            ) -> _DescribeLoadBasedAutoScalingResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeLoadBasedAutoScalingResponseSuccess

      interface _DescribeMyUserProfileResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeMyUserProfileResult]
        def user_profile: () -> Types::SelfUserProfile
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_my_user_profile-instance_method
      def describe_my_user_profile: () -> _DescribeMyUserProfileResponseSuccess
                                  | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeMyUserProfileResponseSuccess

      interface _DescribeOperatingSystemsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeOperatingSystemsResponse]
        def operating_systems: () -> ::Array[Types::OperatingSystem]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_operating_systems-instance_method
      def describe_operating_systems: () -> _DescribeOperatingSystemsResponseSuccess
                                    | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeOperatingSystemsResponseSuccess

      interface _DescribePermissionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribePermissionsResult]
        def permissions: () -> ::Array[Types::Permission]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_permissions-instance_method
      def describe_permissions: (
                                  ?iam_user_arn: ::String,
                                  ?stack_id: ::String
                                ) -> _DescribePermissionsResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribePermissionsResponseSuccess

      interface _DescribeRaidArraysResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRaidArraysResult]
        def raid_arrays: () -> ::Array[Types::RaidArray]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_raid_arrays-instance_method
      def describe_raid_arrays: (
                                  ?instance_id: ::String,
                                  ?stack_id: ::String,
                                  ?raid_array_ids: Array[::String]
                                ) -> _DescribeRaidArraysResponseSuccess
                              | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRaidArraysResponseSuccess

      interface _DescribeRdsDbInstancesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeRdsDbInstancesResult]
        def rds_db_instances: () -> ::Array[Types::RdsDbInstance]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_rds_db_instances-instance_method
      def describe_rds_db_instances: (
                                       stack_id: ::String,
                                       ?rds_db_instance_arns: Array[::String]
                                     ) -> _DescribeRdsDbInstancesResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeRdsDbInstancesResponseSuccess

      interface _DescribeServiceErrorsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeServiceErrorsResult]
        def service_errors: () -> ::Array[Types::ServiceError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_service_errors-instance_method
      def describe_service_errors: (
                                     ?stack_id: ::String,
                                     ?instance_id: ::String,
                                     ?service_error_ids: Array[::String]
                                   ) -> _DescribeServiceErrorsResponseSuccess
                                 | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeServiceErrorsResponseSuccess

      interface _DescribeStackProvisioningParametersResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeStackProvisioningParametersResult]
        def agent_installer_url: () -> ::String
        def parameters: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_stack_provisioning_parameters-instance_method
      def describe_stack_provisioning_parameters: (
                                                    stack_id: ::String
                                                  ) -> _DescribeStackProvisioningParametersResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeStackProvisioningParametersResponseSuccess

      interface _DescribeStackSummaryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeStackSummaryResult]
        def stack_summary: () -> Types::StackSummary
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_stack_summary-instance_method
      def describe_stack_summary: (
                                    stack_id: ::String
                                  ) -> _DescribeStackSummaryResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeStackSummaryResponseSuccess

      interface _DescribeStacksResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeStacksResult]
        def stacks: () -> ::Array[Types::Stack]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_stacks-instance_method
      def describe_stacks: (
                             ?stack_ids: Array[::String]
                           ) -> _DescribeStacksResponseSuccess
                         | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeStacksResponseSuccess

      interface _DescribeTimeBasedAutoScalingResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeTimeBasedAutoScalingResult]
        def time_based_auto_scaling_configurations: () -> ::Array[Types::TimeBasedAutoScalingConfiguration]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_time_based_auto_scaling-instance_method
      def describe_time_based_auto_scaling: (
                                              instance_ids: Array[::String]
                                            ) -> _DescribeTimeBasedAutoScalingResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeTimeBasedAutoScalingResponseSuccess

      interface _DescribeUserProfilesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeUserProfilesResult]
        def user_profiles: () -> ::Array[Types::UserProfile]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_user_profiles-instance_method
      def describe_user_profiles: (
                                    ?iam_user_arns: Array[::String]
                                  ) -> _DescribeUserProfilesResponseSuccess
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeUserProfilesResponseSuccess

      interface _DescribeVolumesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeVolumesResult]
        def volumes: () -> ::Array[Types::Volume]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#describe_volumes-instance_method
      def describe_volumes: (
                              ?instance_id: ::String,
                              ?stack_id: ::String,
                              ?raid_array_id: ::String,
                              ?volume_ids: Array[::String]
                            ) -> _DescribeVolumesResponseSuccess
                          | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeVolumesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#detach_elastic_load_balancer-instance_method
      def detach_elastic_load_balancer: (
                                          elastic_load_balancer_name: ::String,
                                          layer_id: ::String
                                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#disassociate_elastic_ip-instance_method
      def disassociate_elastic_ip: (
                                     elastic_ip: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _GetHostnameSuggestionResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetHostnameSuggestionResult]
        def layer_id: () -> ::String
        def hostname: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#get_hostname_suggestion-instance_method
      def get_hostname_suggestion: (
                                     layer_id: ::String
                                   ) -> _GetHostnameSuggestionResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetHostnameSuggestionResponseSuccess

      interface _GrantAccessResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GrantAccessResult]
        def temporary_credential: () -> Types::TemporaryCredential
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#grant_access-instance_method
      def grant_access: (
                          instance_id: ::String,
                          ?valid_for_in_minutes: ::Integer
                        ) -> _GrantAccessResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GrantAccessResponseSuccess

      interface _ListTagsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsResult]
        def tags: () -> ::Hash[::String, ::String]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#list_tags-instance_method
      def list_tags: (
                       resource_arn: ::String,
                       ?max_results: ::Integer,
                       ?next_token: ::String
                     ) -> _ListTagsResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#reboot_instance-instance_method
      def reboot_instance: (
                             instance_id: ::String
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _RegisterEcsClusterResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterEcsClusterResult]
        def ecs_cluster_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#register_ecs_cluster-instance_method
      def register_ecs_cluster: (
                                  ecs_cluster_arn: ::String,
                                  stack_id: ::String
                                ) -> _RegisterEcsClusterResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterEcsClusterResponseSuccess

      interface _RegisterElasticIpResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterElasticIpResult]
        def elastic_ip: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#register_elastic_ip-instance_method
      def register_elastic_ip: (
                                 elastic_ip: ::String,
                                 stack_id: ::String
                               ) -> _RegisterElasticIpResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterElasticIpResponseSuccess

      interface _RegisterInstanceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterInstanceResult]
        def instance_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#register_instance-instance_method
      def register_instance: (
                               stack_id: ::String,
                               ?hostname: ::String,
                               ?public_ip: ::String,
                               ?private_ip: ::String,
                               ?rsa_public_key: ::String,
                               ?rsa_public_key_fingerprint: ::String,
                               ?instance_identity: {
                                 document: ::String?,
                                 signature: ::String?
                               }
                             ) -> _RegisterInstanceResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterInstanceResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#register_rds_db_instance-instance_method
      def register_rds_db_instance: (
                                      stack_id: ::String,
                                      rds_db_instance_arn: ::String,
                                      db_user: ::String,
                                      db_password: ::String
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _RegisterVolumeResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::RegisterVolumeResult]
        def volume_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#register_volume-instance_method
      def register_volume: (
                             ?ec2_volume_id: ::String,
                             stack_id: ::String
                           ) -> _RegisterVolumeResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _RegisterVolumeResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#set_load_based_auto_scaling-instance_method
      def set_load_based_auto_scaling: (
                                         layer_id: ::String,
                                         ?enable: bool,
                                         ?up_scaling: {
                                           instance_count: ::Integer?,
                                           thresholds_wait_time: ::Integer?,
                                           ignore_metrics_time: ::Integer?,
                                           cpu_threshold: ::Float?,
                                           memory_threshold: ::Float?,
                                           load_threshold: ::Float?,
                                           alarms: Array[::String]?
                                         },
                                         ?down_scaling: {
                                           instance_count: ::Integer?,
                                           thresholds_wait_time: ::Integer?,
                                           ignore_metrics_time: ::Integer?,
                                           cpu_threshold: ::Float?,
                                           memory_threshold: ::Float?,
                                           load_threshold: ::Float?,
                                           alarms: Array[::String]?
                                         }
                                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#set_permission-instance_method
      def set_permission: (
                            stack_id: ::String,
                            iam_user_arn: ::String,
                            ?allow_ssh: bool,
                            ?allow_sudo: bool,
                            ?level: ::String
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#set_time_based_auto_scaling-instance_method
      def set_time_based_auto_scaling: (
                                         instance_id: ::String,
                                         ?auto_scaling_schedule: {
                                           monday: Hash[::String, ::String]?,
                                           tuesday: Hash[::String, ::String]?,
                                           wednesday: Hash[::String, ::String]?,
                                           thursday: Hash[::String, ::String]?,
                                           friday: Hash[::String, ::String]?,
                                           saturday: Hash[::String, ::String]?,
                                           sunday: Hash[::String, ::String]?
                                         }
                                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#start_instance-instance_method
      def start_instance: (
                            instance_id: ::String
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#start_stack-instance_method
      def start_stack: (
                         stack_id: ::String
                       ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#stop_instance-instance_method
      def stop_instance: (
                           instance_id: ::String,
                           ?force: bool
                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#stop_stack-instance_method
      def stop_stack: (
                        stack_id: ::String
                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#unassign_instance-instance_method
      def unassign_instance: (
                               instance_id: ::String
                             ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#unassign_volume-instance_method
      def unassign_volume: (
                             volume_id: ::String
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_app-instance_method
      def update_app: (
                        app_id: ::String,
                        ?name: ::String,
                        ?description: ::String,
                        ?data_sources: Array[
                          {
                            type: ::String?,
                            arn: ::String?,
                            database_name: ::String?
                          },
                        ],
                        ?type: ("aws-flow-ruby" | "java" | "rails" | "php" | "nodejs" | "static" | "other"),
                        ?app_source: {
                          type: ("git" | "svn" | "archive" | "s3")?,
                          url: ::String?,
                          username: ::String?,
                          password: ::String?,
                          ssh_key: ::String?,
                          revision: ::String?
                        },
                        ?domains: Array[::String],
                        ?enable_ssl: bool,
                        ?ssl_configuration: {
                          certificate: ::String,
                          private_key: ::String,
                          chain: ::String?
                        },
                        ?attributes: Hash[("DocumentRoot" | "RailsEnv" | "AutoBundleOnDeploy" | "AwsFlowRubySettings"), ::String],
                        ?environment: Array[
                          {
                            key: ::String,
                            value: ::String,
                            secure: bool?
                          },
                        ]
                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_elastic_ip-instance_method
      def update_elastic_ip: (
                               elastic_ip: ::String,
                               ?name: ::String
                             ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_instance-instance_method
      def update_instance: (
                             instance_id: ::String,
                             ?layer_ids: Array[::String],
                             ?instance_type: ::String,
                             ?auto_scaling_type: ("load" | "timer"),
                             ?hostname: ::String,
                             ?os: ::String,
                             ?ami_id: ::String,
                             ?ssh_key_name: ::String,
                             ?architecture: ("x86_64" | "i386"),
                             ?install_updates_on_boot: bool,
                             ?ebs_optimized: bool,
                             ?agent_version: ::String
                           ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_layer-instance_method
      def update_layer: (
                          layer_id: ::String,
                          ?name: ::String,
                          ?shortname: ::String,
                          ?attributes: Hash[("EcsClusterArn" | "EnableHaproxyStats" | "HaproxyStatsUrl" | "HaproxyStatsUser" | "HaproxyStatsPassword" | "HaproxyHealthCheckUrl" | "HaproxyHealthCheckMethod" | "MysqlRootPassword" | "MysqlRootPasswordUbiquitous" | "GangliaUrl" | "GangliaUser" | "GangliaPassword" | "MemcachedMemory" | "NodejsVersion" | "RubyVersion" | "RubygemsVersion" | "ManageBundler" | "BundlerVersion" | "RailsStack" | "PassengerVersion" | "Jvm" | "JvmVersion" | "JvmOptions" | "JavaAppServer" | "JavaAppServerVersion"), ::String],
                          ?cloud_watch_logs_configuration: {
                            enabled: bool?,
                            log_streams: Array[
                              {
                                log_group_name: ::String?,
                                datetime_format: ::String?,
                                time_zone: ("LOCAL" | "UTC")?,
                                file: ::String?,
                                file_fingerprint_lines: ::String?,
                                multi_line_start_pattern: ::String?,
                                initial_position: ("start_of_file" | "end_of_file")?,
                                encoding: ("ascii" | "big5" | "big5hkscs" | "cp037" | "cp424" | "cp437" | "cp500" | "cp720" | "cp737" | "cp775" | "cp850" | "cp852" | "cp855" | "cp856" | "cp857" | "cp858" | "cp860" | "cp861" | "cp862" | "cp863" | "cp864" | "cp865" | "cp866" | "cp869" | "cp874" | "cp875" | "cp932" | "cp949" | "cp950" | "cp1006" | "cp1026" | "cp1140" | "cp1250" | "cp1251" | "cp1252" | "cp1253" | "cp1254" | "cp1255" | "cp1256" | "cp1257" | "cp1258" | "euc_jp" | "euc_jis_2004" | "euc_jisx0213" | "euc_kr" | "gb2312" | "gbk" | "gb18030" | "hz" | "iso2022_jp" | "iso2022_jp_1" | "iso2022_jp_2" | "iso2022_jp_2004" | "iso2022_jp_3" | "iso2022_jp_ext" | "iso2022_kr" | "latin_1" | "iso8859_2" | "iso8859_3" | "iso8859_4" | "iso8859_5" | "iso8859_6" | "iso8859_7" | "iso8859_8" | "iso8859_9" | "iso8859_10" | "iso8859_13" | "iso8859_14" | "iso8859_15" | "iso8859_16" | "johab" | "koi8_r" | "koi8_u" | "mac_cyrillic" | "mac_greek" | "mac_iceland" | "mac_latin2" | "mac_roman" | "mac_turkish" | "ptcp154" | "shift_jis" | "shift_jis_2004" | "shift_jisx0213" | "utf_32" | "utf_32_be" | "utf_32_le" | "utf_16" | "utf_16_be" | "utf_16_le" | "utf_7" | "utf_8" | "utf_8_sig")?,
                                buffer_duration: ::Integer?,
                                batch_count: ::Integer?,
                                batch_size: ::Integer?
                              },
                            ]?
                          },
                          ?custom_instance_profile_arn: ::String,
                          ?custom_json: ::String,
                          ?custom_security_group_ids: Array[::String],
                          ?packages: Array[::String],
                          ?volume_configurations: Array[
                            {
                              mount_point: ::String,
                              raid_level: ::Integer?,
                              number_of_disks: ::Integer,
                              size: ::Integer,
                              volume_type: ::String?,
                              iops: ::Integer?,
                              encrypted: bool?
                            },
                          ],
                          ?enable_auto_healing: bool,
                          ?auto_assign_elastic_ips: bool,
                          ?auto_assign_public_ips: bool,
                          ?custom_recipes: {
                            setup: Array[::String]?,
                            configure: Array[::String]?,
                            deploy: Array[::String]?,
                            undeploy: Array[::String]?,
                            shutdown: Array[::String]?
                          },
                          ?install_updates_on_boot: bool,
                          ?use_ebs_optimized_instances: bool,
                          ?lifecycle_event_configuration: {
                            shutdown: {
                              execution_timeout: ::Integer?,
                              delay_until_elb_connections_drained: bool?
                            }?
                          }
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_my_user_profile-instance_method
      def update_my_user_profile: (
                                    ?ssh_public_key: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_rds_db_instance-instance_method
      def update_rds_db_instance: (
                                    rds_db_instance_arn: ::String,
                                    ?db_user: ::String,
                                    ?db_password: ::String
                                  ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_stack-instance_method
      def update_stack: (
                          stack_id: ::String,
                          ?name: ::String,
                          ?attributes: Hash[("Color"), ::String],
                          ?service_role_arn: ::String,
                          ?default_instance_profile_arn: ::String,
                          ?default_os: ::String,
                          ?hostname_theme: ::String,
                          ?default_availability_zone: ::String,
                          ?default_subnet_id: ::String,
                          ?custom_json: ::String,
                          ?configuration_manager: {
                            name: ::String?,
                            version: ::String?
                          },
                          ?chef_configuration: {
                            manage_berkshelf: bool?,
                            berkshelf_version: ::String?
                          },
                          ?use_custom_cookbooks: bool,
                          ?custom_cookbooks_source: {
                            type: ("git" | "svn" | "archive" | "s3")?,
                            url: ::String?,
                            username: ::String?,
                            password: ::String?,
                            ssh_key: ::String?,
                            revision: ::String?
                          },
                          ?default_ssh_key_name: ::String,
                          ?default_root_device_type: ("ebs" | "instance-store"),
                          ?use_opsworks_security_groups: bool,
                          ?agent_version: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_user_profile-instance_method
      def update_user_profile: (
                                 iam_user_arn: ::String,
                                 ?ssh_username: ::String,
                                 ?ssh_public_key: ::String,
                                 ?allow_self_management: bool
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#update_volume-instance_method
      def update_volume: (
                           volume_id: ::String,
                           ?name: ::String,
                           ?mount_point: ::String
                         ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/OpsWorks/Client.html#wait_until-instance_method
      def wait_until: (:app_exists waiter_name, 
                    ?stack_id: ::String,
                    ?app_ids: Array[::String]
                  ) -> Client::_DescribeAppsResponseSuccess
                    | (:app_exists waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeAppsResponseSuccess
                    | (:deployment_successful waiter_name, 
                    ?stack_id: ::String,
                    ?app_id: ::String,
                    ?deployment_ids: Array[::String]
                  ) -> Client::_DescribeDeploymentsResponseSuccess
                    | (:deployment_successful waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeDeploymentsResponseSuccess
                    | (:instance_online waiter_name, 
                    ?stack_id: ::String,
                    ?layer_id: ::String,
                    ?instance_ids: Array[::String]
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_online waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_registered waiter_name, 
                    ?stack_id: ::String,
                    ?layer_id: ::String,
                    ?instance_ids: Array[::String]
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_registered waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_stopped waiter_name, 
                    ?stack_id: ::String,
                    ?layer_id: ::String,
                    ?instance_ids: Array[::String]
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_stopped waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_terminated waiter_name, 
                    ?stack_id: ::String,
                    ?layer_id: ::String,
                    ?instance_ids: Array[::String]
                  ) -> Client::_DescribeInstancesResponseSuccess
                    | (:instance_terminated waiter_name, ?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_DescribeInstancesResponseSuccess
    end
  end
end

