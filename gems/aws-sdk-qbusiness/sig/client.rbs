# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module QBusiness
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?event_stream_handler: Proc,
                      ?ignore_configured_endpoint_urls: bool,
                      ?input_event_stream_handler: Proc,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?output_event_stream_handler: Proc,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _BatchDeleteDocumentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchDeleteDocumentResponse]
        def failed_documents: () -> ::Array[Types::FailedDocument]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#batch_delete_document-instance_method
      def batch_delete_document: (
                                   application_id: ::String,
                                   index_id: ::String,
                                   documents: Array[
                                     {
                                       document_id: ::String
                                     },
                                   ],
                                   ?data_source_sync_id: ::String
                                 ) -> _BatchDeleteDocumentResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchDeleteDocumentResponseSuccess

      interface _BatchPutDocumentResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchPutDocumentResponse]
        def failed_documents: () -> ::Array[Types::FailedDocument]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#batch_put_document-instance_method
      def batch_put_document: (
                                application_id: ::String,
                                index_id: ::String,
                                documents: Array[
                                  {
                                    id: ::String,
                                    attributes: Array[
                                      {
                                        name: ::String,
                                        value: {
                                          string_value: ::String?,
                                          string_list_value: Array[::String]?,
                                          long_value: ::Integer?,
                                          date_value: ::Time?
                                        }
                                      },
                                    ]?,
                                    content: {
                                      blob: ::String?,
                                      s3: {
                                        bucket: ::String,
                                        key: ::String
                                      }?
                                    }?,
                                    content_type: ("PDF" | "HTML" | "MS_WORD" | "PLAIN_TEXT" | "PPT" | "RTF" | "XML" | "XSLT" | "MS_EXCEL" | "CSV" | "JSON" | "MD")?,
                                    title: ::String?,
                                    access_configuration: {
                                      access_controls: Array[
                                        {
                                          principals: Array[
                                            {
                                              user: {
                                                id: ::String?,
                                                access: ("ALLOW" | "DENY"),
                                                membership_type: ("INDEX" | "DATASOURCE")?
                                              }?,
                                              group: {
                                                name: ::String?,
                                                access: ("ALLOW" | "DENY"),
                                                membership_type: ("INDEX" | "DATASOURCE")?
                                              }?
                                            },
                                          ],
                                          member_relation: ("AND" | "OR")?
                                        },
                                      ],
                                      member_relation: ("AND" | "OR")?
                                    }?,
                                    document_enrichment_configuration: {
                                      inline_configurations: Array[
                                        {
                                          condition: {
                                            key: ::String,
                                            operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                            value: {
                                              string_value: ::String?,
                                              string_list_value: Array[::String]?,
                                              long_value: ::Integer?,
                                              date_value: ::Time?
                                            }?
                                          }?,
                                          target: {
                                            key: ::String,
                                            value: {
                                              string_value: ::String?,
                                              string_list_value: Array[::String]?,
                                              long_value: ::Integer?,
                                              date_value: ::Time?
                                            }?,
                                            attribute_value_operator: ("DELETE")?
                                          }?,
                                          document_content_operator: ("DELETE")?
                                        },
                                      ]?,
                                      pre_extraction_hook_configuration: {
                                        invocation_condition: {
                                          key: ::String,
                                          operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                          value: {
                                            string_value: ::String?,
                                            string_list_value: Array[::String]?,
                                            long_value: ::Integer?,
                                            date_value: ::Time?
                                          }?
                                        }?,
                                        lambda_arn: ::String?,
                                        s3_bucket_name: ::String?,
                                        role_arn: ::String?
                                      }?,
                                      post_extraction_hook_configuration: {
                                        invocation_condition: {
                                          key: ::String,
                                          operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                          value: {
                                            string_value: ::String?,
                                            string_list_value: Array[::String]?,
                                            long_value: ::Integer?,
                                            date_value: ::Time?
                                          }?
                                        }?,
                                        lambda_arn: ::String?,
                                        s3_bucket_name: ::String?,
                                        role_arn: ::String?
                                      }?
                                    }?
                                  },
                                ],
                                ?role_arn: ::String,
                                ?data_source_sync_id: ::String
                              ) -> _BatchPutDocumentResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchPutDocumentResponseSuccess

      interface _ChatResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ChatOutput]
        def output_stream: () -> Types::ChatOutputStream
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#chat-instance_method
      def chat: (
                  application_id: ::String,
                  ?user_id: ::String,
                  ?user_groups: Array[::String],
                  ?conversation_id: ::String,
                  ?parent_message_id: ::String,
                  ?client_token: ::String,
                  input_event_stream_hander: untyped
                ) ?{ (*untyped) -> void } -> _ChatResponseSuccess
              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) ?{ (*untyped) -> void } -> _ChatResponseSuccess

      interface _ChatSyncResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ChatSyncOutput]
        def conversation_id: () -> ::String
        def system_message: () -> ::String
        def system_message_id: () -> ::String
        def user_message_id: () -> ::String
        def action_review: () -> Types::ActionReview
        def auth_challenge_request: () -> Types::AuthChallengeRequest
        def source_attributions: () -> ::Array[Types::SourceAttribution]
        def failed_attachments: () -> ::Array[Types::AttachmentOutput]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#chat_sync-instance_method
      def chat_sync: (
                       application_id: ::String,
                       ?user_id: ::String,
                       ?user_groups: Array[::String],
                       ?user_message: ::String,
                       ?attachments: Array[
                         {
                           name: ::String,
                           data: ::String
                         },
                       ],
                       ?action_execution: {
                         plugin_id: ::String,
                         payload: Hash[::String, {
                             value: {
                             }
                           }],
                         payload_field_name_separator: ::String
                       },
                       ?auth_challenge_response: {
                         response_map: Hash[::String, ::String]
                       },
                       ?conversation_id: ::String,
                       ?parent_message_id: ::String,
                       ?attribute_filter: {
                         and_all_filters: Array[
                           untyped,
                         ]?,
                         or_all_filters: Array[
                           untyped,
                         ]?,
                         not_filter: untyped?,
                         equals_to: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?,
                         contains_all: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?,
                         contains_any: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?,
                         greater_than: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?,
                         greater_than_or_equals: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?,
                         less_than: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?,
                         less_than_or_equals: {
                           name: ::String,
                           value: {
                             string_value: ::String?,
                             string_list_value: Array[::String]?,
                             long_value: ::Integer?,
                             date_value: ::Time?
                           }
                         }?
                       },
                       ?chat_mode: ("RETRIEVAL_MODE" | "CREATOR_MODE" | "PLUGIN_MODE"),
                       ?chat_mode_configuration: {
                         plugin_configuration: {
                           plugin_id: ::String
                         }?
                       },
                       ?client_token: ::String
                     ) -> _ChatSyncResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ChatSyncResponseSuccess

      interface _CreateApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateApplicationResponse]
        def application_id: () -> ::String
        def application_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_application-instance_method
      def create_application: (
                                display_name: ::String,
                                ?role_arn: ::String,
                                ?identity_type: ("AWS_IAM_IDP_SAML" | "AWS_IAM_IDP_OIDC" | "AWS_IAM_IDC"),
                                ?iam_identity_provider_arn: ::String,
                                ?identity_center_instance_arn: ::String,
                                ?client_ids_for_oidc: Array[::String],
                                ?description: ::String,
                                ?encryption_configuration: {
                                  kms_key_id: ::String?
                                },
                                ?tags: Array[
                                  {
                                    key: ::String,
                                    value: ::String
                                  },
                                ],
                                ?client_token: ::String,
                                ?attachments_configuration: {
                                  attachments_control_mode: ("ENABLED" | "DISABLED")
                                },
                                ?q_apps_configuration: {
                                  q_apps_control_mode: ("ENABLED" | "DISABLED")
                                },
                                ?personalization_configuration: {
                                  personalization_control_mode: ("ENABLED" | "DISABLED")
                                }
                              ) -> _CreateApplicationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateApplicationResponseSuccess

      interface _CreateDataSourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateDataSourceResponse]
        def data_source_id: () -> ::String
        def data_source_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_data_source-instance_method
      def create_data_source: (
                                application_id: ::String,
                                index_id: ::String,
                                display_name: ::String,
                                configuration: {
                                },
                                ?vpc_configuration: {
                                  subnet_ids: Array[::String],
                                  security_group_ids: Array[::String]
                                },
                                ?description: ::String,
                                ?tags: Array[
                                  {
                                    key: ::String,
                                    value: ::String
                                  },
                                ],
                                ?sync_schedule: ::String,
                                ?role_arn: ::String,
                                ?client_token: ::String,
                                ?document_enrichment_configuration: {
                                  inline_configurations: Array[
                                    {
                                      condition: {
                                        key: ::String,
                                        operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                        value: {
                                          string_value: ::String?,
                                          string_list_value: Array[::String]?,
                                          long_value: ::Integer?,
                                          date_value: ::Time?
                                        }?
                                      }?,
                                      target: {
                                        key: ::String,
                                        value: {
                                          string_value: ::String?,
                                          string_list_value: Array[::String]?,
                                          long_value: ::Integer?,
                                          date_value: ::Time?
                                        }?,
                                        attribute_value_operator: ("DELETE")?
                                      }?,
                                      document_content_operator: ("DELETE")?
                                    },
                                  ]?,
                                  pre_extraction_hook_configuration: {
                                    invocation_condition: {
                                      key: ::String,
                                      operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                      value: {
                                        string_value: ::String?,
                                        string_list_value: Array[::String]?,
                                        long_value: ::Integer?,
                                        date_value: ::Time?
                                      }?
                                    }?,
                                    lambda_arn: ::String?,
                                    s3_bucket_name: ::String?,
                                    role_arn: ::String?
                                  }?,
                                  post_extraction_hook_configuration: {
                                    invocation_condition: {
                                      key: ::String,
                                      operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                      value: {
                                        string_value: ::String?,
                                        string_list_value: Array[::String]?,
                                        long_value: ::Integer?,
                                        date_value: ::Time?
                                      }?
                                    }?,
                                    lambda_arn: ::String?,
                                    s3_bucket_name: ::String?,
                                    role_arn: ::String?
                                  }?
                                }
                              ) -> _CreateDataSourceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateDataSourceResponseSuccess

      interface _CreateIndexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateIndexResponse]
        def index_id: () -> ::String
        def index_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_index-instance_method
      def create_index: (
                          application_id: ::String,
                          display_name: ::String,
                          ?type: ("ENTERPRISE" | "STARTER"),
                          ?description: ::String,
                          ?tags: Array[
                            {
                              key: ::String,
                              value: ::String
                            },
                          ],
                          ?capacity_configuration: {
                            units: ::Integer?
                          },
                          ?client_token: ::String
                        ) -> _CreateIndexResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateIndexResponseSuccess

      interface _CreatePluginResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreatePluginResponse]
        def plugin_id: () -> ::String
        def plugin_arn: () -> ::String
        def build_status: () -> ("READY" | "CREATE_IN_PROGRESS" | "CREATE_FAILED" | "UPDATE_IN_PROGRESS" | "UPDATE_FAILED" | "DELETE_IN_PROGRESS" | "DELETE_FAILED")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_plugin-instance_method
      def create_plugin: (
                           application_id: ::String,
                           display_name: ::String,
                           type: ("SERVICE_NOW" | "SALESFORCE" | "JIRA" | "ZENDESK" | "CUSTOM"),
                           auth_configuration: {
                             basic_auth_configuration: {
                               secret_arn: ::String,
                               role_arn: ::String
                             }?,
                             o_auth_2_client_credential_configuration: {
                               secret_arn: ::String,
                               role_arn: ::String
                             }?,
                             no_auth_configuration: {
                             }?
                           },
                           ?server_url: ::String,
                           ?custom_plugin_configuration: {
                             description: ::String,
                             api_schema_type: ("OPEN_API_V3"),
                             api_schema: {
                               payload: ::String?,
                               s3: {
                                 bucket: ::String,
                                 key: ::String
                               }?
                             }
                           },
                           ?tags: Array[
                             {
                               key: ::String,
                               value: ::String
                             },
                           ],
                           ?client_token: ::String
                         ) -> _CreatePluginResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreatePluginResponseSuccess

      interface _CreateRetrieverResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateRetrieverResponse]
        def retriever_id: () -> ::String
        def retriever_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_retriever-instance_method
      def create_retriever: (
                              application_id: ::String,
                              type: ("NATIVE_INDEX" | "KENDRA_INDEX"),
                              display_name: ::String,
                              configuration: {
                                native_index_configuration: {
                                  index_id: ::String,
                                  boosting_override: Hash[::String, {
                                      number_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH"),
                                        boosting_type: ("PRIORITIZE_LARGER_VALUES" | "PRIORITIZE_SMALLER_VALUES")?
                                      }?,
                                      string_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH"),
                                        attribute_value_boosting: Hash[::String, ("LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH")]?
                                      }?,
                                      date_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH"),
                                        boosting_duration_in_seconds: ::Integer?
                                      }?,
                                      string_list_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH")
                                      }?
                                    }]?
                                }?,
                                kendra_index_configuration: {
                                  index_id: ::String
                                }?
                              },
                              ?role_arn: ::String,
                              ?client_token: ::String,
                              ?tags: Array[
                                {
                                  key: ::String,
                                  value: ::String
                                },
                              ]
                            ) -> _CreateRetrieverResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateRetrieverResponseSuccess

      interface _CreateUserResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateUserResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_user-instance_method
      def create_user: (
                         application_id: ::String,
                         user_id: ::String,
                         ?user_aliases: Array[
                           {
                             index_id: ::String?,
                             data_source_id: ::String?,
                             user_id: ::String
                           },
                         ],
                         ?client_token: ::String
                       ) -> _CreateUserResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateUserResponseSuccess

      interface _CreateWebExperienceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateWebExperienceResponse]
        def web_experience_id: () -> ::String
        def web_experience_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#create_web_experience-instance_method
      def create_web_experience: (
                                   application_id: ::String,
                                   ?title: ::String,
                                   ?subtitle: ::String,
                                   ?welcome_message: ::String,
                                   ?sample_prompts_control_mode: ("ENABLED" | "DISABLED"),
                                   ?role_arn: ::String,
                                   ?tags: Array[
                                     {
                                       key: ::String,
                                       value: ::String
                                     },
                                   ],
                                   ?client_token: ::String,
                                   ?identity_provider_configuration: {
                                     saml_configuration: {
                                       authentication_url: ::String
                                     }?,
                                     open_id_connect_configuration: {
                                       secrets_arn: ::String,
                                       secrets_role: ::String
                                     }?
                                   }
                                 ) -> _CreateWebExperienceResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateWebExperienceResponseSuccess

      interface _DeleteApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteApplicationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_application-instance_method
      def delete_application: (
                                application_id: ::String
                              ) -> _DeleteApplicationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteApplicationResponseSuccess

      interface _DeleteChatControlsConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteChatControlsConfigurationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_chat_controls_configuration-instance_method
      def delete_chat_controls_configuration: (
                                                application_id: ::String
                                              ) -> _DeleteChatControlsConfigurationResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteChatControlsConfigurationResponseSuccess

      interface _DeleteConversationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteConversationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_conversation-instance_method
      def delete_conversation: (
                                 conversation_id: ::String,
                                 application_id: ::String,
                                 ?user_id: ::String
                               ) -> _DeleteConversationResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteConversationResponseSuccess

      interface _DeleteDataSourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteDataSourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_data_source-instance_method
      def delete_data_source: (
                                application_id: ::String,
                                index_id: ::String,
                                data_source_id: ::String
                              ) -> _DeleteDataSourceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteDataSourceResponseSuccess

      interface _DeleteGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteGroupResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_group-instance_method
      def delete_group: (
                          application_id: ::String,
                          index_id: ::String,
                          group_name: ::String,
                          ?data_source_id: ::String
                        ) -> _DeleteGroupResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteGroupResponseSuccess

      interface _DeleteIndexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteIndexResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_index-instance_method
      def delete_index: (
                          application_id: ::String,
                          index_id: ::String
                        ) -> _DeleteIndexResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteIndexResponseSuccess

      interface _DeletePluginResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeletePluginResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_plugin-instance_method
      def delete_plugin: (
                           application_id: ::String,
                           plugin_id: ::String
                         ) -> _DeletePluginResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeletePluginResponseSuccess

      interface _DeleteRetrieverResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteRetrieverResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_retriever-instance_method
      def delete_retriever: (
                              application_id: ::String,
                              retriever_id: ::String
                            ) -> _DeleteRetrieverResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteRetrieverResponseSuccess

      interface _DeleteUserResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteUserResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_user-instance_method
      def delete_user: (
                         application_id: ::String,
                         user_id: ::String
                       ) -> _DeleteUserResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteUserResponseSuccess

      interface _DeleteWebExperienceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteWebExperienceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#delete_web_experience-instance_method
      def delete_web_experience: (
                                   application_id: ::String,
                                   web_experience_id: ::String
                                 ) -> _DeleteWebExperienceResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteWebExperienceResponseSuccess

      interface _GetApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetApplicationResponse]
        def display_name: () -> ::String
        def application_id: () -> ::String
        def application_arn: () -> ::String
        def identity_type: () -> ("AWS_IAM_IDP_SAML" | "AWS_IAM_IDP_OIDC" | "AWS_IAM_IDC")
        def iam_identity_provider_arn: () -> ::String
        def identity_center_application_arn: () -> ::String
        def role_arn: () -> ::String
        def status: () -> ("CREATING" | "ACTIVE" | "DELETING" | "FAILED" | "UPDATING")
        def description: () -> ::String
        def encryption_configuration: () -> Types::EncryptionConfiguration
        def created_at: () -> ::Time
        def updated_at: () -> ::Time
        def attachments_configuration: () -> Types::AppliedAttachmentsConfiguration
        def q_apps_configuration: () -> Types::QAppsConfiguration
        def personalization_configuration: () -> Types::PersonalizationConfiguration
        def auto_subscription_configuration: () -> Types::AutoSubscriptionConfiguration
        def client_ids_for_oidc: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_application-instance_method
      def get_application: (
                             application_id: ::String
                           ) -> _GetApplicationResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetApplicationResponseSuccess

      interface _GetChatControlsConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetChatControlsConfigurationResponse]
        def response_scope: () -> ("ENTERPRISE_CONTENT_ONLY" | "EXTENDED_KNOWLEDGE_ENABLED")
        def blocked_phrases: () -> Types::BlockedPhrasesConfiguration
        def topic_configurations: () -> ::Array[Types::TopicConfiguration]
        def creator_mode_configuration: () -> Types::AppliedCreatorModeConfiguration
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_chat_controls_configuration-instance_method
      def get_chat_controls_configuration: (
                                             application_id: ::String,
                                             ?max_results: ::Integer,
                                             ?next_token: ::String
                                           ) -> _GetChatControlsConfigurationResponseSuccess
                                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetChatControlsConfigurationResponseSuccess

      interface _GetDataSourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetDataSourceResponse]
        def application_id: () -> ::String
        def index_id: () -> ::String
        def data_source_id: () -> ::String
        def data_source_arn: () -> ::String
        def display_name: () -> ::String
        def type: () -> ::String
        def configuration: () -> untyped
        def vpc_configuration: () -> Types::DataSourceVpcConfiguration
        def created_at: () -> ::Time
        def updated_at: () -> ::Time
        def description: () -> ::String
        def status: () -> ("PENDING_CREATION" | "CREATING" | "ACTIVE" | "DELETING" | "FAILED" | "UPDATING")
        def sync_schedule: () -> ::String
        def role_arn: () -> ::String
        def document_enrichment_configuration: () -> Types::DocumentEnrichmentConfiguration
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_data_source-instance_method
      def get_data_source: (
                             application_id: ::String,
                             index_id: ::String,
                             data_source_id: ::String
                           ) -> _GetDataSourceResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetDataSourceResponseSuccess

      interface _GetGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetGroupResponse]
        def status: () -> Types::GroupStatusDetail
        def status_history: () -> ::Array[Types::GroupStatusDetail]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_group-instance_method
      def get_group: (
                       application_id: ::String,
                       index_id: ::String,
                       group_name: ::String,
                       ?data_source_id: ::String
                     ) -> _GetGroupResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetGroupResponseSuccess

      interface _GetIndexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetIndexResponse]
        def application_id: () -> ::String
        def index_id: () -> ::String
        def display_name: () -> ::String
        def type: () -> ("ENTERPRISE" | "STARTER")
        def index_arn: () -> ::String
        def status: () -> ("CREATING" | "ACTIVE" | "DELETING" | "FAILED" | "UPDATING")
        def description: () -> ::String
        def created_at: () -> ::Time
        def updated_at: () -> ::Time
        def capacity_configuration: () -> Types::IndexCapacityConfiguration
        def document_attribute_configurations: () -> ::Array[Types::DocumentAttributeConfiguration]
        def index_statistics: () -> Types::IndexStatistics
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_index-instance_method
      def get_index: (
                       application_id: ::String,
                       index_id: ::String
                     ) -> _GetIndexResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetIndexResponseSuccess

      interface _GetPluginResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetPluginResponse]
        def application_id: () -> ::String
        def plugin_id: () -> ::String
        def display_name: () -> ::String
        def type: () -> ("SERVICE_NOW" | "SALESFORCE" | "JIRA" | "ZENDESK" | "CUSTOM")
        def server_url: () -> ::String
        def auth_configuration: () -> Types::PluginAuthConfiguration
        def custom_plugin_configuration: () -> Types::CustomPluginConfiguration
        def build_status: () -> ("READY" | "CREATE_IN_PROGRESS" | "CREATE_FAILED" | "UPDATE_IN_PROGRESS" | "UPDATE_FAILED" | "DELETE_IN_PROGRESS" | "DELETE_FAILED")
        def plugin_arn: () -> ::String
        def state: () -> ("ENABLED" | "DISABLED")
        def created_at: () -> ::Time
        def updated_at: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_plugin-instance_method
      def get_plugin: (
                        application_id: ::String,
                        plugin_id: ::String
                      ) -> _GetPluginResponseSuccess
                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetPluginResponseSuccess

      interface _GetRetrieverResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetRetrieverResponse]
        def application_id: () -> ::String
        def retriever_id: () -> ::String
        def retriever_arn: () -> ::String
        def type: () -> ("NATIVE_INDEX" | "KENDRA_INDEX")
        def status: () -> ("CREATING" | "ACTIVE" | "FAILED")
        def display_name: () -> ::String
        def configuration: () -> Types::RetrieverConfiguration
        def role_arn: () -> ::String
        def created_at: () -> ::Time
        def updated_at: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_retriever-instance_method
      def get_retriever: (
                           application_id: ::String,
                           retriever_id: ::String
                         ) -> _GetRetrieverResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetRetrieverResponseSuccess

      interface _GetUserResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetUserResponse]
        def user_aliases: () -> ::Array[Types::UserAlias]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_user-instance_method
      def get_user: (
                      application_id: ::String,
                      user_id: ::String
                    ) -> _GetUserResponseSuccess
                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetUserResponseSuccess

      interface _GetWebExperienceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetWebExperienceResponse]
        def application_id: () -> ::String
        def web_experience_id: () -> ::String
        def web_experience_arn: () -> ::String
        def default_endpoint: () -> ::String
        def status: () -> ("CREATING" | "ACTIVE" | "DELETING" | "FAILED" | "PENDING_AUTH_CONFIG")
        def created_at: () -> ::Time
        def updated_at: () -> ::Time
        def title: () -> ::String
        def subtitle: () -> ::String
        def welcome_message: () -> ::String
        def sample_prompts_control_mode: () -> ("ENABLED" | "DISABLED")
        def role_arn: () -> ::String
        def identity_provider_configuration: () -> Types::IdentityProviderConfiguration
        def authentication_configuration: () -> Types::WebExperienceAuthConfiguration
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#get_web_experience-instance_method
      def get_web_experience: (
                                application_id: ::String,
                                web_experience_id: ::String
                              ) -> _GetWebExperienceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetWebExperienceResponseSuccess

      interface _ListApplicationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListApplicationsResponse]
        def next_token: () -> ::String
        def applications: () -> ::Array[Types::Application]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_applications-instance_method
      def list_applications: (
                               ?next_token: ::String,
                               ?max_results: ::Integer
                             ) -> _ListApplicationsResponseSuccess
                           | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListApplicationsResponseSuccess

      interface _ListConversationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListConversationsResponse]
        def next_token: () -> ::String
        def conversations: () -> ::Array[Types::Conversation]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_conversations-instance_method
      def list_conversations: (
                                application_id: ::String,
                                ?user_id: ::String,
                                ?next_token: ::String,
                                ?max_results: ::Integer
                              ) -> _ListConversationsResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListConversationsResponseSuccess

      interface _ListDataSourceSyncJobsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDataSourceSyncJobsResponse]
        def history: () -> ::Array[Types::DataSourceSyncJob]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_data_source_sync_jobs-instance_method
      def list_data_source_sync_jobs: (
                                        data_source_id: ::String,
                                        application_id: ::String,
                                        index_id: ::String,
                                        ?next_token: ::String,
                                        ?max_results: ::Integer,
                                        ?start_time: ::Time,
                                        ?end_time: ::Time,
                                        ?status_filter: ("FAILED" | "SUCCEEDED" | "SYNCING" | "INCOMPLETE" | "STOPPING" | "ABORTED" | "SYNCING_INDEXING")
                                      ) -> _ListDataSourceSyncJobsResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDataSourceSyncJobsResponseSuccess

      interface _ListDataSourcesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDataSourcesResponse]
        def data_sources: () -> ::Array[Types::DataSource]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_data_sources-instance_method
      def list_data_sources: (
                               application_id: ::String,
                               index_id: ::String,
                               ?next_token: ::String,
                               ?max_results: ::Integer
                             ) -> _ListDataSourcesResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDataSourcesResponseSuccess

      interface _ListDocumentsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListDocumentsResponse]
        def document_detail_list: () -> ::Array[Types::DocumentDetails]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_documents-instance_method
      def list_documents: (
                            application_id: ::String,
                            index_id: ::String,
                            ?data_source_ids: Array[::String],
                            ?next_token: ::String,
                            ?max_results: ::Integer
                          ) -> _ListDocumentsResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListDocumentsResponseSuccess

      interface _ListGroupsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListGroupsResponse]
        def next_token: () -> ::String
        def items: () -> ::Array[Types::GroupSummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_groups-instance_method
      def list_groups: (
                         application_id: ::String,
                         index_id: ::String,
                         updated_earlier_than: ::Time,
                         ?data_source_id: ::String,
                         ?next_token: ::String,
                         ?max_results: ::Integer
                       ) -> _ListGroupsResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListGroupsResponseSuccess

      interface _ListIndicesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListIndicesResponse]
        def next_token: () -> ::String
        def indices: () -> ::Array[Types::Index]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_indices-instance_method
      def list_indices: (
                          application_id: ::String,
                          ?next_token: ::String,
                          ?max_results: ::Integer
                        ) -> _ListIndicesResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListIndicesResponseSuccess

      interface _ListMessagesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListMessagesResponse]
        def messages: () -> ::Array[Types::Message]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_messages-instance_method
      def list_messages: (
                           conversation_id: ::String,
                           application_id: ::String,
                           ?user_id: ::String,
                           ?next_token: ::String,
                           ?max_results: ::Integer
                         ) -> _ListMessagesResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListMessagesResponseSuccess

      interface _ListPluginsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListPluginsResponse]
        def next_token: () -> ::String
        def plugins: () -> ::Array[Types::Plugin]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_plugins-instance_method
      def list_plugins: (
                          application_id: ::String,
                          ?next_token: ::String,
                          ?max_results: ::Integer
                        ) -> _ListPluginsResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListPluginsResponseSuccess

      interface _ListRetrieversResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListRetrieversResponse]
        def retrievers: () -> ::Array[Types::Retriever]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_retrievers-instance_method
      def list_retrievers: (
                             application_id: ::String,
                             ?next_token: ::String,
                             ?max_results: ::Integer
                           ) -> _ListRetrieversResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListRetrieversResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _ListWebExperiencesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListWebExperiencesResponse]
        def web_experiences: () -> ::Array[Types::WebExperience]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#list_web_experiences-instance_method
      def list_web_experiences: (
                                  application_id: ::String,
                                  ?next_token: ::String,
                                  ?max_results: ::Integer
                                ) -> _ListWebExperiencesResponseSuccess
                              | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListWebExperiencesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#put_feedback-instance_method
      def put_feedback: (
                          application_id: ::String,
                          ?user_id: ::String,
                          conversation_id: ::String,
                          message_id: ::String,
                          ?message_copied_at: ::Time,
                          ?message_usefulness: {
                            usefulness: ("USEFUL" | "NOT_USEFUL"),
                            reason: ("NOT_FACTUALLY_CORRECT" | "HARMFUL_OR_UNSAFE" | "INCORRECT_OR_MISSING_SOURCES" | "NOT_HELPFUL" | "FACTUALLY_CORRECT" | "COMPLETE" | "RELEVANT_SOURCES" | "HELPFUL" | "NOT_BASED_ON_DOCUMENTS" | "NOT_COMPLETE" | "NOT_CONCISE" | "OTHER")?,
                            comment: ::String?,
                            submitted_at: ::Time
                          }
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _PutGroupResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutGroupResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#put_group-instance_method
      def put_group: (
                       application_id: ::String,
                       index_id: ::String,
                       group_name: ::String,
                       ?data_source_id: ::String,
                       type: ("INDEX" | "DATASOURCE"),
                       group_members: {
                         member_groups: Array[
                           {
                             group_name: ::String,
                             type: ("INDEX" | "DATASOURCE")?
                           },
                         ]?,
                         member_users: Array[
                           {
                             user_id: ::String,
                             type: ("INDEX" | "DATASOURCE")?
                           },
                         ]?
                       }
                     ) -> _PutGroupResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutGroupResponseSuccess

      interface _StartDataSourceSyncJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartDataSourceSyncJobResponse]
        def execution_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#start_data_source_sync_job-instance_method
      def start_data_source_sync_job: (
                                        data_source_id: ::String,
                                        application_id: ::String,
                                        index_id: ::String
                                      ) -> _StartDataSourceSyncJobResponseSuccess
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartDataSourceSyncJobResponseSuccess

      interface _StopDataSourceSyncJobResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StopDataSourceSyncJobResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#stop_data_source_sync_job-instance_method
      def stop_data_source_sync_job: (
                                       data_source_id: ::String,
                                       application_id: ::String,
                                       index_id: ::String
                                     ) -> _StopDataSourceSyncJobResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StopDataSourceSyncJobResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Array[
                            {
                              key: ::String,
                              value: ::String
                            },
                          ]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateApplicationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateApplicationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_application-instance_method
      def update_application: (
                                application_id: ::String,
                                ?identity_center_instance_arn: ::String,
                                ?display_name: ::String,
                                ?description: ::String,
                                ?role_arn: ::String,
                                ?attachments_configuration: {
                                  attachments_control_mode: ("ENABLED" | "DISABLED")
                                },
                                ?q_apps_configuration: {
                                  q_apps_control_mode: ("ENABLED" | "DISABLED")
                                },
                                ?personalization_configuration: {
                                  personalization_control_mode: ("ENABLED" | "DISABLED")
                                },
                                ?auto_subscription_configuration: {
                                  auto_subscribe: ("ENABLED" | "DISABLED"),
                                  default_subscription_type: ("Q_LITE" | "Q_BUSINESS")?
                                }
                              ) -> _UpdateApplicationResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateApplicationResponseSuccess

      interface _UpdateChatControlsConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateChatControlsConfigurationResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_chat_controls_configuration-instance_method
      def update_chat_controls_configuration: (
                                                application_id: ::String,
                                                ?client_token: ::String,
                                                ?response_scope: ("ENTERPRISE_CONTENT_ONLY" | "EXTENDED_KNOWLEDGE_ENABLED"),
                                                ?blocked_phrases_configuration_update: {
                                                  blocked_phrases_to_create_or_update: Array[::String]?,
                                                  blocked_phrases_to_delete: Array[::String]?,
                                                  system_message_override: ::String?
                                                },
                                                ?topic_configurations_to_create_or_update: Array[
                                                  {
                                                    name: ::String,
                                                    description: ::String?,
                                                    example_chat_messages: Array[::String]?,
                                                    rules: Array[
                                                      {
                                                        included_users_and_groups: {
                                                          user_ids: Array[::String]?,
                                                          user_groups: Array[::String]?
                                                        }?,
                                                        excluded_users_and_groups: {
                                                          user_ids: Array[::String]?,
                                                          user_groups: Array[::String]?
                                                        }?,
                                                        rule_type: ("CONTENT_BLOCKER_RULE" | "CONTENT_RETRIEVAL_RULE"),
                                                        rule_configuration: {
                                                          content_blocker_rule: {
                                                            system_message_override: ::String?
                                                          }?,
                                                          content_retrieval_rule: {
                                                            eligible_data_sources: Array[
                                                              {
                                                                index_id: ::String?,
                                                                data_source_id: ::String?
                                                              },
                                                            ]?
                                                          }?
                                                        }?
                                                      },
                                                    ]
                                                  },
                                                ],
                                                ?topic_configurations_to_delete: Array[
                                                  {
                                                    name: ::String,
                                                    description: ::String?,
                                                    example_chat_messages: Array[::String]?,
                                                    rules: Array[
                                                      {
                                                        included_users_and_groups: {
                                                          user_ids: Array[::String]?,
                                                          user_groups: Array[::String]?
                                                        }?,
                                                        excluded_users_and_groups: {
                                                          user_ids: Array[::String]?,
                                                          user_groups: Array[::String]?
                                                        }?,
                                                        rule_type: ("CONTENT_BLOCKER_RULE" | "CONTENT_RETRIEVAL_RULE"),
                                                        rule_configuration: {
                                                          content_blocker_rule: {
                                                            system_message_override: ::String?
                                                          }?,
                                                          content_retrieval_rule: {
                                                            eligible_data_sources: Array[
                                                              {
                                                                index_id: ::String?,
                                                                data_source_id: ::String?
                                                              },
                                                            ]?
                                                          }?
                                                        }?
                                                      },
                                                    ]
                                                  },
                                                ],
                                                ?creator_mode_configuration: {
                                                  creator_mode_control: ("ENABLED" | "DISABLED")
                                                }
                                              ) -> _UpdateChatControlsConfigurationResponseSuccess
                                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateChatControlsConfigurationResponseSuccess

      interface _UpdateDataSourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateDataSourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_data_source-instance_method
      def update_data_source: (
                                application_id: ::String,
                                index_id: ::String,
                                data_source_id: ::String,
                                ?display_name: ::String,
                                ?configuration: {
                                },
                                ?vpc_configuration: {
                                  subnet_ids: Array[::String],
                                  security_group_ids: Array[::String]
                                },
                                ?description: ::String,
                                ?sync_schedule: ::String,
                                ?role_arn: ::String,
                                ?document_enrichment_configuration: {
                                  inline_configurations: Array[
                                    {
                                      condition: {
                                        key: ::String,
                                        operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                        value: {
                                          string_value: ::String?,
                                          string_list_value: Array[::String]?,
                                          long_value: ::Integer?,
                                          date_value: ::Time?
                                        }?
                                      }?,
                                      target: {
                                        key: ::String,
                                        value: {
                                          string_value: ::String?,
                                          string_list_value: Array[::String]?,
                                          long_value: ::Integer?,
                                          date_value: ::Time?
                                        }?,
                                        attribute_value_operator: ("DELETE")?
                                      }?,
                                      document_content_operator: ("DELETE")?
                                    },
                                  ]?,
                                  pre_extraction_hook_configuration: {
                                    invocation_condition: {
                                      key: ::String,
                                      operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                      value: {
                                        string_value: ::String?,
                                        string_list_value: Array[::String]?,
                                        long_value: ::Integer?,
                                        date_value: ::Time?
                                      }?
                                    }?,
                                    lambda_arn: ::String?,
                                    s3_bucket_name: ::String?,
                                    role_arn: ::String?
                                  }?,
                                  post_extraction_hook_configuration: {
                                    invocation_condition: {
                                      key: ::String,
                                      operator: ("GREATER_THAN" | "GREATER_THAN_OR_EQUALS" | "LESS_THAN" | "LESS_THAN_OR_EQUALS" | "EQUALS" | "NOT_EQUALS" | "CONTAINS" | "NOT_CONTAINS" | "EXISTS" | "NOT_EXISTS" | "BEGINS_WITH"),
                                      value: {
                                        string_value: ::String?,
                                        string_list_value: Array[::String]?,
                                        long_value: ::Integer?,
                                        date_value: ::Time?
                                      }?
                                    }?,
                                    lambda_arn: ::String?,
                                    s3_bucket_name: ::String?,
                                    role_arn: ::String?
                                  }?
                                }
                              ) -> _UpdateDataSourceResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateDataSourceResponseSuccess

      interface _UpdateIndexResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateIndexResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_index-instance_method
      def update_index: (
                          application_id: ::String,
                          index_id: ::String,
                          ?display_name: ::String,
                          ?description: ::String,
                          ?capacity_configuration: {
                            units: ::Integer?
                          },
                          ?document_attribute_configurations: Array[
                            {
                              name: ::String?,
                              type: ("STRING" | "STRING_LIST" | "NUMBER" | "DATE")?,
                              search: ("ENABLED" | "DISABLED")?
                            },
                          ]
                        ) -> _UpdateIndexResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateIndexResponseSuccess

      interface _UpdatePluginResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdatePluginResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_plugin-instance_method
      def update_plugin: (
                           application_id: ::String,
                           plugin_id: ::String,
                           ?display_name: ::String,
                           ?state: ("ENABLED" | "DISABLED"),
                           ?server_url: ::String,
                           ?custom_plugin_configuration: {
                             description: ::String,
                             api_schema_type: ("OPEN_API_V3"),
                             api_schema: {
                               payload: ::String?,
                               s3: {
                                 bucket: ::String,
                                 key: ::String
                               }?
                             }
                           },
                           ?auth_configuration: {
                             basic_auth_configuration: {
                               secret_arn: ::String,
                               role_arn: ::String
                             }?,
                             o_auth_2_client_credential_configuration: {
                               secret_arn: ::String,
                               role_arn: ::String
                             }?,
                             no_auth_configuration: {
                             }?
                           }
                         ) -> _UpdatePluginResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdatePluginResponseSuccess

      interface _UpdateRetrieverResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateRetrieverResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_retriever-instance_method
      def update_retriever: (
                              application_id: ::String,
                              retriever_id: ::String,
                              ?configuration: {
                                native_index_configuration: {
                                  index_id: ::String,
                                  boosting_override: Hash[::String, {
                                      number_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH"),
                                        boosting_type: ("PRIORITIZE_LARGER_VALUES" | "PRIORITIZE_SMALLER_VALUES")?
                                      }?,
                                      string_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH"),
                                        attribute_value_boosting: Hash[::String, ("LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH")]?
                                      }?,
                                      date_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH"),
                                        boosting_duration_in_seconds: ::Integer?
                                      }?,
                                      string_list_configuration: {
                                        boosting_level: ("NONE" | "LOW" | "MEDIUM" | "HIGH" | "VERY_HIGH")
                                      }?
                                    }]?
                                }?,
                                kendra_index_configuration: {
                                  index_id: ::String
                                }?
                              },
                              ?display_name: ::String,
                              ?role_arn: ::String
                            ) -> _UpdateRetrieverResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateRetrieverResponseSuccess

      interface _UpdateUserResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateUserResponse]
        def user_aliases_added: () -> ::Array[Types::UserAlias]
        def user_aliases_updated: () -> ::Array[Types::UserAlias]
        def user_aliases_deleted: () -> ::Array[Types::UserAlias]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_user-instance_method
      def update_user: (
                         application_id: ::String,
                         user_id: ::String,
                         ?user_aliases_to_update: Array[
                           {
                             index_id: ::String?,
                             data_source_id: ::String?,
                             user_id: ::String
                           },
                         ],
                         ?user_aliases_to_delete: Array[
                           {
                             index_id: ::String?,
                             data_source_id: ::String?,
                             user_id: ::String
                           },
                         ]
                       ) -> _UpdateUserResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateUserResponseSuccess

      interface _UpdateWebExperienceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateWebExperienceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/QBusiness/Client.html#update_web_experience-instance_method
      def update_web_experience: (
                                   application_id: ::String,
                                   web_experience_id: ::String,
                                   ?role_arn: ::String,
                                   ?authentication_configuration: {
                                     saml_configuration: {
                                       metadata_xml: ::String,
                                       role_arn: ::String,
                                       user_id_attribute: ::String,
                                       user_group_attribute: ::String?
                                     }?
                                   },
                                   ?title: ::String,
                                   ?subtitle: ::String,
                                   ?welcome_message: ::String,
                                   ?sample_prompts_control_mode: ("ENABLED" | "DISABLED"),
                                   ?identity_provider_configuration: {
                                     saml_configuration: {
                                       authentication_url: ::String
                                     }?,
                                     open_id_connect_configuration: {
                                       secrets_arn: ::String,
                                       secrets_role: ::String
                                     }?
                                   }
                                 ) -> _UpdateWebExperienceResponseSuccess
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateWebExperienceResponseSuccess
    end
  end
end

