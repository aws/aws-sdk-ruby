# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module MarketplaceCatalog
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _BatchDescribeEntitiesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchDescribeEntitiesResponse]
        def entity_details: () -> ::Hash[::String, Types::EntityDetail]
        def errors: () -> ::Hash[::String, Types::BatchDescribeErrorDetail]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#batch_describe_entities-instance_method
      def batch_describe_entities: (
                                     entity_request_list: Array[
                                       {
                                         catalog: ::String,
                                         entity_id: ::String
                                       },
                                     ]
                                   ) -> _BatchDescribeEntitiesResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchDescribeEntitiesResponseSuccess

      interface _CancelChangeSetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CancelChangeSetResponse]
        def change_set_id: () -> ::String
        def change_set_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#cancel_change_set-instance_method
      def cancel_change_set: (
                               catalog: ::String,
                               change_set_id: ::String
                             ) -> _CancelChangeSetResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CancelChangeSetResponseSuccess

      interface _DeleteResourcePolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DeleteResourcePolicyResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#delete_resource_policy-instance_method
      def delete_resource_policy: (
                                    resource_arn: ::String
                                  ) -> _DeleteResourcePolicyResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DeleteResourcePolicyResponseSuccess

      interface _DescribeChangeSetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeChangeSetResponse]
        def change_set_id: () -> ::String
        def change_set_arn: () -> ::String
        def change_set_name: () -> ::String
        def intent: () -> ("VALIDATE" | "APPLY")
        def start_time: () -> ::String
        def end_time: () -> ::String
        def status: () -> ("PREPARING" | "APPLYING" | "SUCCEEDED" | "CANCELLED" | "FAILED")
        def failure_code: () -> ("CLIENT_ERROR" | "SERVER_FAULT")
        def failure_description: () -> ::String
        def change_set: () -> ::Array[Types::ChangeSummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#describe_change_set-instance_method
      def describe_change_set: (
                                 catalog: ::String,
                                 change_set_id: ::String
                               ) -> _DescribeChangeSetResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeChangeSetResponseSuccess

      interface _DescribeEntityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::DescribeEntityResponse]
        def entity_type: () -> ::String
        def entity_identifier: () -> ::String
        def entity_arn: () -> ::String
        def last_modified_date: () -> ::String
        def details: () -> ::String
        def details_document: () -> untyped
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#describe_entity-instance_method
      def describe_entity: (
                             catalog: ::String,
                             entity_id: ::String
                           ) -> _DescribeEntityResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _DescribeEntityResponseSuccess

      interface _GetResourcePolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetResourcePolicyResponse]
        def policy: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#get_resource_policy-instance_method
      def get_resource_policy: (
                                 resource_arn: ::String
                               ) -> _GetResourcePolicyResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetResourcePolicyResponseSuccess

      interface _ListChangeSetsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListChangeSetsResponse]
        def change_set_summary_list: () -> ::Array[Types::ChangeSetSummaryListItem]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#list_change_sets-instance_method
      def list_change_sets: (
                              catalog: ::String,
                              ?filter_list: Array[
                                {
                                  name: ::String?,
                                  value_list: Array[::String]?
                                },
                              ],
                              ?sort: {
                                sort_by: ::String?,
                                sort_order: ("ASCENDING" | "DESCENDING")?
                              },
                              ?max_results: ::Integer,
                              ?next_token: ::String
                            ) -> _ListChangeSetsResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListChangeSetsResponseSuccess

      interface _ListEntitiesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListEntitiesResponse]
        def entity_summary_list: () -> ::Array[Types::EntitySummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#list_entities-instance_method
      def list_entities: (
                           catalog: ::String,
                           entity_type: ::String,
                           ?filter_list: Array[
                             {
                               name: ::String?,
                               value_list: Array[::String]?
                             },
                           ],
                           ?sort: {
                             sort_by: ::String?,
                             sort_order: ("ASCENDING" | "DESCENDING")?
                           },
                           ?next_token: ::String,
                           ?max_results: ::Integer,
                           ?ownership_type: ("SELF" | "SHARED"),
                           ?entity_type_filters: {
                             data_product_filters: {
                               entity_id: {
                                 value_list: Array[::String]?
                               }?,
                               product_title: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               visibility: {
                                 value_list: Array[("Limited" | "Public" | "Restricted" | "Unavailable" | "Draft")]?
                               }?,
                               last_modified_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?
                             }?,
                             saa_s_product_filters: {
                               entity_id: {
                                 value_list: Array[::String]?
                               }?,
                               product_title: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               visibility: {
                                 value_list: Array[("Limited" | "Public" | "Restricted" | "Draft")]?
                               }?,
                               last_modified_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?
                             }?,
                             ami_product_filters: {
                               entity_id: {
                                 value_list: Array[::String]?
                               }?,
                               last_modified_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?,
                               product_title: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               visibility: {
                                 value_list: Array[("Limited" | "Public" | "Restricted" | "Draft")]?
                               }?
                             }?,
                             offer_filters: {
                               entity_id: {
                                 value_list: Array[::String]?
                               }?,
                               name: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               product_id: {
                                 value_list: Array[::String]?
                               }?,
                               resale_authorization_id: {
                                 value_list: Array[::String]?
                               }?,
                               release_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?,
                               availability_end_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?,
                               buyer_accounts: {
                                 wild_card_value: ::String?
                               }?,
                               state: {
                                 value_list: Array[("Draft" | "Released")]?
                               }?,
                               targeting: {
                                 value_list: Array[("BuyerAccounts" | "ParticipatingPrograms" | "CountryCodes" | "None")]?
                               }?,
                               last_modified_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?
                             }?,
                             container_product_filters: {
                               entity_id: {
                                 value_list: Array[::String]?
                               }?,
                               last_modified_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?,
                               product_title: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               visibility: {
                                 value_list: Array[("Limited" | "Public" | "Restricted" | "Draft")]?
                               }?
                             }?,
                             resale_authorization_filters: {
                               entity_id: {
                                 value_list: Array[::String]?
                               }?,
                               name: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               product_id: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               created_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?,
                                 value_list: Array[::String]?
                               }?,
                               availability_end_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?,
                                 value_list: Array[::String]?
                               }?,
                               manufacturer_account_id: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               product_name: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               manufacturer_legal_name: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               reseller_account_id: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               reseller_legal_name: {
                                 value_list: Array[::String]?,
                                 wild_card_value: ::String?
                               }?,
                               status: {
                                 value_list: Array[("Draft" | "Active" | "Restricted")]?
                               }?,
                               offer_extended_status: {
                                 value_list: Array[::String]?
                               }?,
                               last_modified_date: {
                                 date_range: {
                                   after_value: ::String?,
                                   before_value: ::String?
                                 }?
                               }?
                             }?
                           },
                           ?entity_type_sort: {
                             data_product_sort: {
                               sort_by: ("EntityId" | "ProductTitle" | "Visibility" | "LastModifiedDate")?,
                               sort_order: ("ASCENDING" | "DESCENDING")?
                             }?,
                             saa_s_product_sort: {
                               sort_by: ("EntityId" | "ProductTitle" | "Visibility" | "LastModifiedDate")?,
                               sort_order: ("ASCENDING" | "DESCENDING")?
                             }?,
                             ami_product_sort: {
                               sort_by: ("EntityId" | "LastModifiedDate" | "ProductTitle" | "Visibility")?,
                               sort_order: ("ASCENDING" | "DESCENDING")?
                             }?,
                             offer_sort: {
                               sort_by: ("EntityId" | "Name" | "ProductId" | "ResaleAuthorizationId" | "ReleaseDate" | "AvailabilityEndDate" | "BuyerAccounts" | "State" | "Targeting" | "LastModifiedDate")?,
                               sort_order: ("ASCENDING" | "DESCENDING")?
                             }?,
                             container_product_sort: {
                               sort_by: ("EntityId" | "LastModifiedDate" | "ProductTitle" | "Visibility")?,
                               sort_order: ("ASCENDING" | "DESCENDING")?
                             }?,
                             resale_authorization_sort: {
                               sort_by: ("EntityId" | "Name" | "ProductId" | "ProductName" | "ManufacturerAccountId" | "ManufacturerLegalName" | "ResellerAccountID" | "ResellerLegalName" | "Status" | "OfferExtendedStatus" | "CreatedDate" | "AvailabilityEndDate" | "LastModifiedDate")?,
                               sort_order: ("ASCENDING" | "DESCENDING")?
                             }?
                           }
                         ) -> _ListEntitiesResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListEntitiesResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def resource_arn: () -> ::String
        def tags: () -> ::Array[Types::Tag]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      interface _PutResourcePolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::PutResourcePolicyResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#put_resource_policy-instance_method
      def put_resource_policy: (
                                 resource_arn: ::String,
                                 policy: ::String
                               ) -> _PutResourcePolicyResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _PutResourcePolicyResponseSuccess

      interface _StartChangeSetResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartChangeSetResponse]
        def change_set_id: () -> ::String
        def change_set_arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#start_change_set-instance_method
      def start_change_set: (
                              catalog: ::String,
                              change_set: Array[
                                {
                                  change_type: ::String,
                                  entity: {
                                    type: ::String,
                                    identifier: ::String?
                                  },
                                  entity_tags: Array[
                                    {
                                      key: ::String,
                                      value: ::String
                                    },
                                  ]?,
                                  details: ::String?,
                                  details_document: {
                                  }?,
                                  change_name: ::String?
                                },
                              ],
                              ?change_set_name: ::String,
                              ?client_request_token: ::String,
                              ?change_set_tags: Array[
                                {
                                  key: ::String,
                                  value: ::String
                                },
                              ],
                              ?intent: ("VALIDATE" | "APPLY")
                            ) -> _StartChangeSetResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartChangeSetResponseSuccess

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Array[
                            {
                              key: ::String,
                              value: ::String
                            },
                          ]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MarketplaceCatalog/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess
    end
  end
end

