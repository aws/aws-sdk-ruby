{{> generated_src_warning}}

module {{module_name}}
  class {{class_name}}

    extend Aws::Deprecations

    # @overload def initialize({{#identifiers}}{{name}}, {{/identifiers}}options = {})
    {{#identifiers}}
    #   @param [{{type}}] {{name}}
    {{/identifiers}}
    #   @option options [Client] :client
    {{#identifiers?}}
    # @overload def initialize(options = {})
    {{#identifiers}}
    #   @option options [required, {{type}}] :{{name}}
    {{/identifiers}}
    #   @option options [Client] :client
    {{/identifiers?}}
    def initialize(*args)
      options = Hash === args.last ? args.pop.dup : {}
      {{#identifiers}}
      @{{name}} = extract_{{name}}(args, options)
      {{/identifiers}}
      {{#shape}}
      @data = options.delete(:data)
      {{/shape}}
      {{^shape}}
      @data = Aws::EmptyStructure.new
      {{/shape}}
      @client = options.delete(:client) || Client.new(options)
    end

    # @!group Read-Only Attributes
    {{#identifiers}}

    # @return [{{type}}]
    def {{name}}
      @{{name}}
    end
    {{#alias}}
    alias :{{alias}} :{{name}}
    {{/alias}}
    {{/identifiers}}
    {{#data_attributes}}

    {{> documentation}}
    def {{name}}
      data[:{{name}}]
    end
    {{/data_attributes}}

    # @!endgroup

    # @return [Client]
    def client
      @client
    end

    {{#load_method}}
    {{> method}}
    {{/load_method}}
    alias :reload :load

    {{#data_method}}
    {{> method}}
    {{/data_method}}

    # @return [Boolean]
    #   Returns `true` if this resource is loaded.  Accessing attributes or
    #   {#data} on an unloaded resource will trigger a call to {#load}.
    def data_loaded?
      !!@data
    end
    {{#exists_waiter}}

    # @param [Hash] options ({})
    # @return [Boolean]
    #   Returns `true` if the {{class_name}} exists.
    def exists?(options = {})
      begin
        wait_until_exists(options.merge(max_attempts: 1))
        true
      rescue Aws::Waiters::Errors::UnexpectedError => e
        raise e.error
      rescue Aws::Waiters::Errors::WaiterFailed
        false
      end
    end
    {{/exists_waiter}}
    {{#waiters}}

    # @param [Hash] options ({})
    # @option options [Integer] :max_attempts ({{max_attempts}})
    # @option options [Float] :delay ({{delay}})
    # @option options [Proc] :before_attempt
    # @option options [Proc] :before_wait
    # @return [{{class_name}}]
    def wait_until_{{name}}(options = {})
      options, params = separate_params_and_options(options)
      waiter = Waiters::{{waiter_class_name}}.new(options)
      yield_waiter_and_warn(waiter, &Proc.new) if block_given?
      {{#wait_call}}
      {{#lines}}
      {{{.}}}{{/lines}}
      {{/wait_call}}
      {{class_name}}.new({
      {{#constructor_args}}
      {{#lines}}
      {{{.}}}{{/lines}}
      {{/constructor_args}}
      })
    end
    {{/waiters}}
    {{#actions?}}

    # @!group Actions
    {{#actions}}

    {{> method}}
    {{/actions}}
    {{/actions?}}
    {{#associations?}}

    # @!group Associations
    {{#associations}}

    {{> method}}
    {{/associations}}
    {{/associations?}}

    {{#identifiers_method}}
    {{> method}}
    {{/identifiers_method}}
    deprecated(:identifiers)
    {{#identifiers?}}

    private
    {{#identifiers}}

    def extract_{{name}}(args, options)
      value = args[{{offset}}] || options.delete(:{{name}})
      case value
      when {{type}} then value
      when nil then raise ArgumentError, "missing required option :{{name}}"
      else
        msg = "expected :{{name}} to be a {{type}}, got #{value.class}"
        raise ArgumentError, msg
      end
    end
    {{/identifiers}}
    {{/identifiers?}}
    {{#waiters?}}

    def yield_waiter_and_warn(waiter, &block)
      if !@waiter_block_warned
        msg = "pass options to configure the waiter; "
        msg << "yielding the waiter is deprecated"
        warn(msg)
        @waiter_block_warned = true
      end
      yield(waiter.waiter)
    end

    def separate_params_and_options(options)
      opts = Set.new([:client, :max_attempts, :delay, :before_attempt, :before_wait])
      waiter_opts = {}
      waiter_params = {}
      options.each_pair do |key, value|
        if opts.include?(key)
          waiter_opts[key] = value
        else
          waiter_params[key] = value
        end
      end
      waiter_opts[:client] ||= @client
      [waiter_opts, waiter_params]
    end
    {{/waiters?}}

    {{^batch_actions?}}
    class Collection < Aws::Resources::Collection; end
    {{/batch_actions?}}
    {{#batch_actions?}}
    class Collection < Aws::Resources::Collection

      # @!group Batch Actions
      {{#batch_actions}}

      {{> method}}
      {{/batch_actions}}

      # @!endgroup

    end
    {{/batch_actions?}}
  end
end
